import * as exec from "@actions/exec";
export declare function git(...args: string[]): Promise<exec.ExecOutput>;
interface fetchOptions {
  remote?: string;
  refSpec?: string;
  depth?: number;
  deepen?: number;
  forceFlag?: boolean;
}
export declare function fetch(opts?: fetchOptions): Promise<void>;
interface revListOptions {
  maxCount?: number;
  ref?: string;
}
export declare function revList(opts?: revListOptions): Promise<string[]>;
interface describeOptions {
  ref?: string;
  abbrev?: number;
  exactMatch?: boolean;
  tags?: boolean;
}
export declare function describe(opts?: describeOptions): Promise<string>;
interface lsRemoteOptions {
  repository: string;
  refs?: string[];
  tagsFlag?: boolean;
  headsFlag?: boolean;
  refsFlag?: boolean;
  quietFlag?: boolean;
}
interface lsRemoteItem {
  objectSHA: string;
  refName: string;
}
export declare function lsRemote(
  opts: lsRemoteOptions
): Promise<lsRemoteItem[]>;
interface tagOptions {
  list?: boolean;
  ref?: string;
  pointsAt?: string;
  merged?: string;
  sort?: string;
}
export declare function tag(opts?: tagOptions): Promise<string>;
/**
 * Resolve any textual reference into commit SHA.
 * Commit SHA as <ref> is resolved to itself.
 */
export declare function resolveRef(ref?: string): Promise<string>;
/**
 * Fetch all tags from remote repository without their history (only single commit)
 * and without breaking local history of already fetched refs
 */
export declare function fetchTags(remote?: string): Promise<void>;
/**
 * Get all tags that point exactly to given commit (HEAD by default)
 */
export declare function listCommitTags(ref?: string): Promise<string[]>;
/**
 * Count number of commits from <from> to <to> references, including <to> commit itself.
 */
export declare function countCommits(from: string, to: string): Promise<number>;
/**
 * Get tag that points exactly to given commit
 * NOTE: when several tags point to given commit, the freshest (by tag's date)
 *       is returned. This behavior is defined by git itself.
 *       See 'man git-describe' for more info.
 */
export declare function currentTag(ref?: string): Promise<string>;
/**
 * Get first tag reachable from given commit.
 * It is either tag that points directly to commit, or to any of its parents (closest parent).
 *
 * NOTE: when several tags point to single commit, the freshest (by tag's date) is returned.
 *       This behavior is defined by git itself.
 *       See 'man git-describe' for more info.
 * @param ref
 */
export declare function latestTag(ref?: string): Promise<string>;
/**
 * Get first tag reachable from given commit's PARENT.
 * This is useful when you try to detect changes between two versions of code.
 * E.g.:
 *  const curTag = currentTag('HEAD')
 *  const prevTag = previousTag('HEAD')
 *  const versionChanges = log({ref: `${prevTag}..${curTag}`})
 *
 * NOTE: when several tags point to single commit, the freshest (by tag's date)
 *       is returned. This behavior is defined by git itself.
 *       See 'man git-describe' for more info.
 * @param ref
 */
export declare function previousTag(ref?: string): Promise<string>;
/**
 * Ensure git repository has history of at least <minCommits> size from <ref>.
 * If not, fetch at most <minCommits> of <ref> from <remote>.
 */
export declare function ensureHistorySize(
  minCommits: number,
  remote?: string,
  ref?: string
): Promise<void>;
export {};
