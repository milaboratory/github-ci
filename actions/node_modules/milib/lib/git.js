"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.git = git;
exports.fetch = fetch;
exports.revList = revList;
exports.describe = describe;
exports.lsRemote = lsRemote;
exports.tag = tag;
exports.resolveRef = resolveRef;
exports.fetchTags = fetchTags;
exports.listCommitTags = listCommitTags;
exports.countCommits = countCommits;
exports.currentTag = currentTag;
exports.latestTag = latestTag;
exports.previousTag = previousTag;
exports.ensureHistorySize = ensureHistorySize;
const exec = __importStar(require("@actions/exec"));
async function git(...args) {
    const execResult = await exec.getExecOutput("git", args, {
        ignoreReturnCode: true,
    });
    if (execResult.exitCode !== 0) {
        const cmd = `git '${args.join("' '")}'`;
        const exitCode = execResult.exitCode.toString();
        const stderr = execResult.stderr;
        throw Error(`command "${cmd}" failed with code '${exitCode}':\n\n${stderr}`);
    }
    return execResult;
}
async function fetch(opts) {
    const cmd = ["fetch"];
    if (opts && opts.forceFlag)
        cmd.push("--force");
    if (opts && opts.depth != null)
        cmd.push(`--depth=${opts.depth}`);
    if (opts && opts.deepen != null)
        cmd.push(`--deepen=${opts.deepen}`);
    if (opts && opts.remote)
        cmd.push(opts.remote);
    if (opts && opts.refSpec)
        cmd.push(opts.refSpec);
    await git(...cmd);
}
async function revList(opts) {
    const cmd = ["rev-list"];
    if (opts && opts.maxCount != null)
        cmd.push(`--max-count=${opts.maxCount}`);
    if (opts && opts.ref)
        cmd.push(opts.ref);
    const revListResult = await git(...cmd);
    const revListStr = revListResult.stdout.trim();
    if (revListStr === "") {
        return [];
    }
    return revListStr.split("\n");
}
async function describe(opts) {
    const cmd = ["describe"];
    if (opts && opts.tags)
        cmd.push("--tags");
    if (opts && opts.abbrev != null)
        cmd.push(`--abbrev=${opts.abbrev}`);
    if (opts && opts.exactMatch)
        cmd.push("--exact-match");
    if (opts && opts.ref)
        cmd.push(opts.ref);
    const describeResult = await git(...cmd);
    const versionString = describeResult.stdout;
    return versionString.trim();
}
async function lsRemote(opts) {
    const cmd = ["ls-remote"];
    if (opts.tagsFlag)
        cmd.push("--tags");
    if (opts.headsFlag)
        cmd.push("--heads");
    if (opts.refs)
        cmd.push("--refs");
    if (opts.quietFlag)
        cmd.push("--quiet");
    cmd.push(opts.repository);
    if (opts.refs)
        cmd.push(...opts.refs);
    const lsRemoteResult = await git(...cmd);
    const result = [];
    for (const line of lsRemoteResult.stdout.trim().split("\n")) {
        const parts = line.split("\t");
        result.push({ objectSHA: parts[0], refName: parts[1] });
    }
    return result;
}
async function tag(opts) {
    const cmd = ["tag"];
    if (opts && opts.list)
        cmd.push("--list");
    if (opts && opts.pointsAt)
        cmd.push(`--points-at=${opts.pointsAt}`);
    if (opts && opts.merged)
        cmd.push(`--merged=${opts.merged}`);
    if (opts && opts.sort)
        cmd.push(`--sort=${opts.sort}`);
    if (opts && opts.ref)
        cmd.push(opts.ref);
    const tagResult = await git(...cmd);
    return tagResult.stdout.trim();
}
/*
 * Complex git action helpers.
 * Here are functions that simplify common actions
 * The usually either 'aliases' that wrap git command with predefined arguments
 * or bunch of actions not covered by single git command.
 */
/**
 * Resolve any textual reference into commit SHA.
 * Commit SHA as <ref> is resolved to itself.
 */
async function resolveRef(ref = "HEAD") {
    const shaList = await revList({ maxCount: 1, ref });
    return shaList[0];
}
/**
 * Fetch all tags from remote repository without their history (only single commit)
 * and without breaking local history of already fetched refs
 */
async function fetchTags(remote = "origin") {
    await fetch({
        remote,
        refSpec: "refs/tags/*:refs/tags/*",
        deepen: 1,
    });
}
/**
 * Get all tags that point exactly to given commit (HEAD by default)
 */
async function listCommitTags(ref = "HEAD") {
    const tagsListStr = await tag({
        pointsAt: ref,
    });
    if (!tagsListStr) {
        return [];
    }
    return tagsListStr.split("\n");
}
/**
 * Count number of commits from <from> to <to> references, including <to> commit itself.
 */
async function countCommits(from, to) {
    const commits = await revList({ ref: `${from}..${to}` });
    return commits.length;
}
/**
 * Get tag that points exactly to given commit
 * NOTE: when several tags point to given commit, the freshest (by tag's date)
 *       is returned. This behavior is defined by git itself.
 *       See 'man git-describe' for more info.
 */
async function currentTag(ref = "HEAD") {
    return await describe({
        tags: true,
        abbrev: 0,
        exactMatch: true,
        ref,
    });
}
/**
 * Get first tag reachable from given commit.
 * It is either tag that points directly to commit, or to any of its parents (closest parent).
 *
 * NOTE: when several tags point to single commit, the freshest (by tag's date) is returned.
 *       This behavior is defined by git itself.
 *       See 'man git-describe' for more info.
 * @param ref
 */
async function latestTag(ref = "HEAD") {
    return await describe({
        tags: true,
        abbrev: 0,
        ref,
    });
}
/**
 * Get first tag reachable from given commit's PARENT.
 * This is useful when you try to detect changes between two versions of code.
 * E.g.:
 *  const curTag = currentTag('HEAD')
 *  const prevTag = previousTag('HEAD')
 *  const versionChanges = log({ref: `${prevTag}..${curTag}`})
 *
 * NOTE: when several tags point to single commit, the freshest (by tag's date)
 *       is returned. This behavior is defined by git itself.
 *       See 'man git-describe' for more info.
 * @param ref
 */
async function previousTag(ref = "HEAD") {
    return await latestTag(`${ref}^`);
}
/**
 * Ensure git repository has history of at least <minCommits> size from <ref>.
 * If not, fetch at most <minCommits> of <ref> from <remote>.
 */
async function ensureHistorySize(minCommits, remote = "origin", ref = "HEAD") {
    const commits = await revList({
        maxCount: minCommits,
        ref,
    });
    if (commits.length >= minCommits) {
        return;
    }
    await fetch({
        deepen: minCommits,
        remote,
        refSpec: ref,
    });
}
