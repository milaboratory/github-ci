{"version":3,"file":"index.js","sources":["../../node_modules/milib/lib/git.js","../../node_modules/milib/lib/string.js","../../node_modules/milib/lib/version.js","../../node_modules/milib/lib/main.js","../src/utils.ts","../src/main.ts"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.git = git;\nexports.fetch = fetch;\nexports.revList = revList;\nexports.describe = describe;\nexports.lsRemote = lsRemote;\nexports.tag = tag;\nexports.resolveRef = resolveRef;\nexports.fetchTags = fetchTags;\nexports.listCommitTags = listCommitTags;\nexports.countCommits = countCommits;\nexports.currentTag = currentTag;\nexports.latestTag = latestTag;\nexports.previousTag = previousTag;\nexports.ensureHistorySize = ensureHistorySize;\nconst exec = __importStar(require(\"@actions/exec\"));\nasync function git(...args) {\n    const execResult = await exec.getExecOutput(\"git\", args, {\n        ignoreReturnCode: true,\n    });\n    if (execResult.exitCode !== 0) {\n        const cmd = `git '${args.join(\"' '\")}'`;\n        const exitCode = execResult.exitCode.toString();\n        const stderr = execResult.stderr;\n        throw Error(`command \"${cmd}\" failed with code '${exitCode}':\\n\\n${stderr}`);\n    }\n    return execResult;\n}\nasync function fetch(opts) {\n    const cmd = [\"fetch\"];\n    if (opts && opts.forceFlag)\n        cmd.push(\"--force\");\n    if (opts && opts.depth != null)\n        cmd.push(`--depth=${opts.depth}`);\n    if (opts && opts.deepen != null)\n        cmd.push(`--deepen=${opts.deepen}`);\n    if (opts && opts.remote)\n        cmd.push(opts.remote);\n    if (opts && opts.refSpec)\n        cmd.push(opts.refSpec);\n    await git(...cmd);\n}\nasync function revList(opts) {\n    const cmd = [\"rev-list\"];\n    if (opts && opts.maxCount != null)\n        cmd.push(`--max-count=${opts.maxCount}`);\n    if (opts && opts.ref)\n        cmd.push(opts.ref);\n    const revListResult = await git(...cmd);\n    const revListStr = revListResult.stdout.trim();\n    if (revListStr === \"\") {\n        return [];\n    }\n    return revListStr.split(\"\\n\");\n}\nasync function describe(opts) {\n    const cmd = [\"describe\"];\n    if (opts && opts.tags)\n        cmd.push(\"--tags\");\n    if (opts && opts.abbrev != null)\n        cmd.push(`--abbrev=${opts.abbrev}`);\n    if (opts && opts.exactMatch)\n        cmd.push(\"--exact-match\");\n    if (opts && opts.ref)\n        cmd.push(opts.ref);\n    const describeResult = await git(...cmd);\n    const versionString = describeResult.stdout;\n    return versionString.trim();\n}\nasync function lsRemote(opts) {\n    const cmd = [\"ls-remote\"];\n    if (opts.tagsFlag)\n        cmd.push(\"--tags\");\n    if (opts.headsFlag)\n        cmd.push(\"--heads\");\n    if (opts.refs)\n        cmd.push(\"--refs\");\n    if (opts.quietFlag)\n        cmd.push(\"--quiet\");\n    cmd.push(opts.repository);\n    if (opts.refs)\n        cmd.push(...opts.refs);\n    const lsRemoteResult = await git(...cmd);\n    const result = [];\n    for (const line of lsRemoteResult.stdout.trim().split(\"\\n\")) {\n        const parts = line.split(\"\\t\");\n        result.push({ objectSHA: parts[0], refName: parts[1] });\n    }\n    return result;\n}\nasync function tag(opts) {\n    const cmd = [\"tag\"];\n    if (opts && opts.list)\n        cmd.push(\"--list\");\n    if (opts && opts.pointsAt)\n        cmd.push(`--points-at=${opts.pointsAt}`);\n    if (opts && opts.merged)\n        cmd.push(`--merged=${opts.merged}`);\n    if (opts && opts.sort)\n        cmd.push(`--sort=${opts.sort}`);\n    if (opts && opts.ref)\n        cmd.push(opts.ref);\n    const tagResult = await git(...cmd);\n    return tagResult.stdout.trim();\n}\n/*\n * Complex git action helpers.\n * Here are functions that simplify common actions\n * The usually either 'aliases' that wrap git command with predefined arguments\n * or bunch of actions not covered by single git command.\n */\n/**\n * Resolve any textual reference into commit SHA.\n * Commit SHA as <ref> is resolved to itself.\n */\nasync function resolveRef(ref = \"HEAD\") {\n    const shaList = await revList({ maxCount: 1, ref });\n    return shaList[0];\n}\n/**\n * Fetch all tags from remote repository without their history (only single commit)\n * and without breaking local history of already fetched refs\n */\nasync function fetchTags(remote = \"origin\") {\n    await fetch({\n        remote,\n        refSpec: \"refs/tags/*:refs/tags/*\",\n        deepen: 1,\n    });\n}\n/**\n * Get all tags that point exactly to given commit (HEAD by default)\n */\nasync function listCommitTags(ref = \"HEAD\") {\n    const tagsListStr = await tag({\n        pointsAt: ref,\n    });\n    if (!tagsListStr) {\n        return [];\n    }\n    return tagsListStr.split(\"\\n\");\n}\n/**\n * Count number of commits from <from> to <to> references, including <to> commit itself.\n */\nasync function countCommits(from, to) {\n    const commits = await revList({ ref: `${from}..${to}` });\n    return commits.length;\n}\n/**\n * Get tag that points exactly to given commit\n * NOTE: when several tags point to given commit, the freshest (by tag's date)\n *       is returned. This behavior is defined by git itself.\n *       See 'man git-describe' for more info.\n */\nasync function currentTag(ref = \"HEAD\") {\n    return await describe({\n        tags: true,\n        abbrev: 0,\n        exactMatch: true,\n        ref,\n    });\n}\n/**\n * Get first tag reachable from given commit.\n * It is either tag that points directly to commit, or to any of its parents (closest parent).\n *\n * NOTE: when several tags point to single commit, the freshest (by tag's date) is returned.\n *       This behavior is defined by git itself.\n *       See 'man git-describe' for more info.\n * @param ref\n */\nasync function latestTag(ref = \"HEAD\") {\n    return await describe({\n        tags: true,\n        abbrev: 0,\n        ref,\n    });\n}\n/**\n * Get first tag reachable from given commit's PARENT.\n * This is useful when you try to detect changes between two versions of code.\n * E.g.:\n *  const curTag = currentTag('HEAD')\n *  const prevTag = previousTag('HEAD')\n *  const versionChanges = log({ref: `${prevTag}..${curTag}`})\n *\n * NOTE: when several tags point to single commit, the freshest (by tag's date)\n *       is returned. This behavior is defined by git itself.\n *       See 'man git-describe' for more info.\n * @param ref\n */\nasync function previousTag(ref = \"HEAD\") {\n    return await latestTag(`${ref}^`);\n}\n/**\n * Ensure git repository has history of at least <minCommits> size from <ref>.\n * If not, fetch at most <minCommits> of <ref> from <remote>.\n */\nasync function ensureHistorySize(minCommits, remote = \"origin\", ref = \"HEAD\") {\n    const commits = await revList({\n        maxCount: minCommits,\n        ref,\n    });\n    if (commits.length >= minCommits) {\n        return;\n    }\n    await fetch({\n        deepen: minCommits,\n        remote,\n        refSpec: ref,\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.countOccurrences = countOccurrences;\n/**\n * Count number of <substr> fragments inside <str>.\n * Full <substr> is searched in <str>:\n *   countOccurrences(\"FFmmmmmFFFmmmFmmFFmmmFFF\", \"FF\") // returns '4'\n */\nfunction countOccurrences(str, substr) {\n    let index = 0;\n    let startIndex = 0;\n    const searchStrLen = substr.length;\n    if (searchStrLen === 0) {\n        return 0;\n    }\n    let count = 0;\n    while ((index = str.indexOf(substr, startIndex)) > -1) {\n        count = count + 1;\n        startIndex = index + searchStrLen;\n    }\n    return count;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = parse;\nexports.compare = compare;\nexports.toString = toString;\nexports.sanitize = sanitize;\nexports.toSemver = toSemver;\nconst semver = __importStar(require(\"semver\"));\n// /**\n//  * Check if version string contains only dots, hyphens and numbers:\n//  *  - 1.2.3    -> true\n//  *  - 1.0.4-1  -> true\n//  *  - 3.9.4a   -> false (a is letter)\n//  */\n// export function isNumeric(v: string): boolean {\n//   const n = Number(v.replaceAll(/[-.]/g, \"\"));\n//   return !Number.isNaN(n);\n// }\nfunction isNumber(v) {\n    const n = Number(v);\n    return !Number.isNaN(n);\n}\nfunction parse(v) {\n    const result = {\n        major: 0,\n        minor: 0,\n        patch: 0,\n        suffix: \"\", // part of the version string left after main fields parsing\n        original: v, // original version string parsed by parser\n        semver: false, // the version seems to conform with semver\n    };\n    const sv = semver.parse(v);\n    if (sv) {\n        result.major = sv.major;\n        result.minor = sv.minor;\n        result.patch = sv.patch;\n        result.semver = true;\n        if (sv.prerelease.length > 0) {\n            result.suffix += sv.prerelease.join(\".\");\n        }\n        if (sv.build.length > 0) {\n            const p = sv.build.map((v) => v.toString());\n            result.suffix += \"+\" + sv.build.join(\".\");\n        }\n        return result;\n    }\n    const parts = v.split(\".\");\n    if (isNumber(parts[0])) {\n        result.major = Number(parts[0]);\n    }\n    else {\n        result.suffix = v;\n    }\n    if (parts.length === 1) {\n        // Only <major> version part or completely unknown version format\n        result.semver = isNumber(parts[0]);\n        return result;\n    }\n    // parts.length >= 2\n    if (!isNumber(parts[1])) {\n        // Cases:\n        //  - 3.alpha (unknown format)\n        //  - 3.2-alpha (incomplete semver)\n        const minor = parse_suffix(parts[1]);\n        if (Number.isNaN(minor.v)) {\n            // Unknown format.\n            result.suffix = parts.slice(1).join(\".\");\n            return result;\n        }\n        // Incomplete semver format with suffix\n        result.minor = minor.v;\n        result.suffix = [minor.s].concat(parts.slice(2)).join(\".\");\n        result.semver = true;\n        return result;\n    }\n    result.minor = Number(parts[1]);\n    if (parts.length === 2) {\n        // Incomplete semver format: <major>.<minor>\n        result.semver = true;\n        return result;\n    }\n    // parts.length >=3\n    if (isNumber(parts[2])) {\n        // Regular semver with numeric <patch> part: <major>.<minor>.<patch>\n        result.patch = Number(parts[2]);\n        result.semver = parts.length === 3;\n        if (parts.length > 3) {\n            // Custom case with additional version parts: <major>.<minor>.<patch>.<...>\n            // Put rest of dots into 'suffix' field: <major>.<minor>.<patch>.<suffix>\n            result.suffix = parts.slice(3).join(\".\");\n        }\n        return result;\n    }\n    // parts.length >= 3 and parts[2] is not a number:\n    // Cases:\n    //   - 2.2.abra\n    //   - 2.2.abra.kadabra\n    //   - 2.2.abra-kadabra\n    //   - 0.2.3-custom\n    //   - 1.2.3-alpha.2\n    const patch = parse_suffix(parts[2]);\n    if (Number.isNaN(patch.v)) {\n        // <patch> version parts has no '-' delimiters and not a number.\n        // Treat non-numeric <patch> version as suffix: <major>.<minor>.<suffix>\n        // Cases:\n        //   - 2.2.abrakadabra\n        //   - 2.2.abra.kadabra\n        result.suffix = parts.slice(2).join(\".\");\n        return result;\n    }\n    // Canonical semver case with suffix: <major>.<minor>.<patch>-<suffix>\n    // Cases:\n    //   - 0.2.3-custom\n    //   - 1.2.3-alpha.2\n    result.patch = patch.v;\n    result.suffix = [patch.s].concat(parts.slice(3)).join(\".\");\n    result.semver = true;\n    return result;\n}\nfunction parse_suffix(value) {\n    const parts = value.split(\"-\");\n    if (parts.length === 1) {\n        // Cases:\n        //   - abc\n        //   - 123\n        //   - ''\n        if (isNumber(value)) {\n            return {\n                v: Number(value),\n                s: \"\",\n            };\n        }\n        // value has no '-' delimiters and not a number\n        // Cases:\n        //   - abc\n        //   - ''\n        return {\n            v: NaN,\n            s: value,\n        };\n    }\n    if (!isNumber(parts[0])) {\n        // Cases:\n        //   - abc-def\n        return {\n            v: NaN,\n            s: value,\n        };\n    }\n    // Cases:\n    //   - 1-abc\n    //   - 1-abc-def\n    return {\n        v: Number(parts[0]),\n        s: parts.slice(1).join(\"-\"),\n    };\n}\n/**\n * Compares <a> and <b> versions\n *   - returns -1 if <a> < <b>\n *   - returns  1 if <a> > <b>\n *   - returns  0 if <a> == <b>\n */\nfunction compare(a, b, trySanitize) {\n    if (trySanitize === undefined) {\n        trySanitize = true;\n    }\n    if (trySanitize) {\n        a = sanitize(a);\n        b = sanitize(b);\n    }\n    if (a.semver && !b.semver) {\n        // Always prefer semver versions to non-semver\n        return 1;\n    }\n    if (b.semver && !a.semver) {\n        // Always prefer semver versions to non-semver\n        return -1;\n    }\n    if (!a.semver && !b.semver) {\n        // Compare unknown version formats as stings\n        if (a.original < b.original) {\n            return -1;\n        }\n        if (a.original > b.original) {\n            return 1;\n        }\n        return 0;\n    }\n    // Both versions are semver\n    if (a.major < b.major) {\n        return -1;\n    }\n    if (a.major > b.major) {\n        return 1;\n    }\n    if (a.minor < b.minor) {\n        return -1;\n    }\n    if (a.minor > b.minor) {\n        return 1;\n    }\n    if (a.patch < b.patch) {\n        return -1;\n    }\n    if (a.patch > b.patch) {\n        return 1;\n    }\n    // <major>, <minor> and <patch> versions are the same for both <a> and <b> here\n    if (b.suffix === \"\" && a.suffix !== \"\") {\n        // Consider versions with suffix (alpha, beta, etc.) to be smaller than final versions\n        return -1;\n    }\n    if (a.suffix === \"\" && b.suffix !== \"\") {\n        // Consider versions with suffix (alpha, beta, etc.) to be smaller than final versions\n        return 1;\n    }\n    if (a.suffix < b.suffix) {\n        return -1;\n    }\n    if (a.suffix > b.suffix) {\n        return 1;\n    }\n    return 0;\n}\nfunction toString(v) {\n    if (!v.semver) {\n        return v.original;\n    }\n    if (v.suffix === \"\") {\n        return `${v.major}.${v.minor}.${v.patch}`;\n    }\n    return `${v.major}.${v.minor}.${v.patch}-${v.suffix}`;\n}\n/**\n * Sanitize version, trying to make versiuon to be valid semver.\n *   - replace 'non-semver' symbols with '-' (hyphen)\n *   - parse sanitized string as version number once again\n *\n * @param v: string | versionInfo\n * @returns versionInfo - version info after sanitizing. It might still not be a valid semver!\n */\nfunction sanitize(v) {\n    var versionString;\n    if (typeof v === \"string\") {\n        versionString = v;\n        v = parse(versionString);\n    }\n    else {\n        versionString = v.original;\n    }\n    if (v.semver) {\n        return v;\n    }\n    const regex = /[^0-9A-Za-z.+-]/g;\n    const sanitized = versionString.replace(regex, \"-\");\n    const result = parse(sanitized);\n    result.original = versionString;\n    return result;\n}\n/**\n * Sanitize version and throw an error, if the result is not in semver format.\n *\n * @param v: string | versionInfo\n * @returns versionInfo - version in semver format\n */\nfunction toSemver(v) {\n    const i = sanitize(v);\n    if (i.semver) {\n        return i;\n    }\n    var vString;\n    if (typeof v === \"string\") {\n        vString = v;\n    }\n    else {\n        vString = v.original;\n    }\n    throw new Error(`version ${vString} has not semver format and cannot be transformed to semver automatiaclly`);\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = exports.string = exports.git = void 0;\nconst git = __importStar(require(\"./git\"));\nexports.git = git;\nconst string = __importStar(require(\"./string\"));\nexports.string = string;\nconst version = __importStar(require(\"./version\"));\nexports.version = version;\n","import {git, version} from 'milib'\nimport * as semver from 'semver'\n\n// <tag name> -> <version>\nexport interface versionsMap {\n  [key: string]: version.versionInfo\n}\n\n/**\n * Get map of version numbers in git repository:\n *  <tag name> -> <parsed version info>\n */\nexport async function getVersions(): Promise<versionsMap> {\n  const tagsResult = await git.tag({list: true})\n  const tags = tagsResult.split('\\n')\n\n  const result = {} as versionsMap\n\n  for (const tag of tags) {\n    let v = tag\n    if (tag.startsWith('v')) {\n      v = tag.slice(1) // cut 'v' prefix\n    }\n\n    result[tag] = version.parse(v)\n  }\n\n  return result\n}\n\nexport function latestVersionTag(v: versionsMap): string {\n  const versionsList = Object.entries(v)\n\n  // Sort the list by values\n  versionsList.sort((a, b) => version.compare(a[1], b[1]))\n\n  // Get the tag name of the latest version\n  return versionsList[versionsList.length - 1][0]\n}\n\n/**\n * Check if action was started from branch AND current commit is\n * repository's branch head.\n */\nexport async function isBranchHead(): Promise<boolean> {\n  const refType = process.env.GITHUB_REF_TYPE as string\n  const currentSha = process.env.GITHUB_SHA as string\n  const eventName = process.env.GITHUB_EVENT_NAME as string\n  let refName\n\n  if (refType !== 'branch') {\n    return false\n  }\n\n  if (eventName === 'pull_request') {\n    // For pull requests get refName form the head ref or source branch\n    refName = process.env.GITHUB_HEAD_REF\n  } else {\n    refName = process.env.GITHUB_REF_NAME\n  }\n\n  await git.fetch({\n    deepen: 1,\n    remote: 'origin',\n    refSpec: refName\n  })\n\n  const remoteRefSha = await git.resolveRef(`origin/${refName}`)\n  return remoteRefSha === currentSha\n}\n\n/**\n * Check if current version is the latest known modification of the major verison.\n * Returns 'true' when 1.3.12 is the latest known modification of v1 even if\n * 2.12.1, 3.0.0 and other higher versions exist in list.\n */\nexport function isLatestMajor(\n  knownVersions: versionsMap,\n  current: version.versionInfo\n): boolean {\n  const allVersions = Object.values(knownVersions)\n  allVersions.sort(version.compare)\n\n  for (let i = allVersions.length - 1; i >= 0; i--) {\n    const v = allVersions[i]\n    if (v.major === current.major) {\n      return version.compare(v, current) === 0\n    }\n  }\n  return false\n}\n\n/**\n Filter out tags that are not valid semantic versions\n Sort tags in descending order (newest first)\n*/\nexport function sortTagsBySemver(tags: string[]): string[] {\n  return tags.filter(tag => semver.valid(tag) !== null).sort(semver.rcompare)\n}\n","import * as core from '@actions/core'\n\nimport * as utils from './utils'\nimport {git, version} from 'milib'\n\nasync function prepareRepository(depth: number): Promise<void> {\n  // We have to do black magic here because of\n  // https://github.com/milaboratory/github-ci/issues/13\n  const refType: string = process.env.GITHUB_REF_TYPE as string\n  const refName: string = process.env.GITHUB_REF_NAME as string\n\n  if (refType === 'tag') {\n    // force-fetch current tag from origin\n    await git.fetch({\n      remote: 'origin',\n      refSpec: `refs/tags/${refName}:refs/tags/${refName}`,\n      deepen: 1,\n      forceFlag: true\n    })\n  }\n\n  await git.fetchTags()\n  return git.ensureHistorySize(depth)\n}\n\nasync function genDevVersion(\n  baseVersion: version.versionInfo,\n  baseRef: string\n): Promise<version.versionInfo> {\n  const currentRefName = process.env.GITHUB_REF_NAME as string\n  const sanitizedRefName = version.sanitize(currentRefName)\n  const count = await git.countCommits(baseRef, 'HEAD')\n\n  return {\n    major: baseVersion.major,\n    minor: baseVersion.minor,\n    patch: baseVersion.patch,\n    suffix: `${count}-${sanitizedRefName}`,\n    original: `${baseVersion.original}-${count}-${sanitizedRefName}`,\n    semver: true\n  } as version.versionInfo\n}\n\nasync function loadBranchVersions(targetBranch: string): Promise<void> {\n  const refType = process.env.GITHUB_REF_TYPE as string\n  const refName = process.env.GITHUB_REF_NAME as string\n\n  const runNumber: string = process.env.GITHUB_RUN_NUMBER as string\n  const currentSha: string = await git.resolveRef('HEAD')\n  const currentVersionStr = `${runNumber}-${currentSha.substring(0, 8)}`\n\n  const currentVersion = version.sanitize(currentVersionStr)\n  const isRelease = refType === 'branch' && refName === targetBranch\n  const isBranchHead = await utils.isBranchHead()\n\n  setOutputs({\n    current: {\n      v: currentVersion,\n      tag: '',\n      sha: currentSha\n    },\n    previous: {\n      v: version.parse('unknown'),\n      tag: '',\n      sha: 'unknown'\n    },\n    latest: {\n      v: version.parse('unknown'),\n      tag: '',\n      sha: 'unknown'\n    },\n    isRelease,\n    isBranchHead,\n    isLatestVersion: isBranchHead && isRelease,\n    isLatestMajor: isBranchHead && isRelease\n  })\n}\n\nasync function getSanitizedVersion(\n  tag: string,\n  knownVersions: {[key: string]: version.versionInfo}\n): Promise<version.versionInfo | null> {\n  const originalVersion = knownVersions[tag]\n  if (originalVersion && originalVersion.original) {\n    return version.sanitize(originalVersion.original)\n  }\n  // Handle the case where version parsing fails or original is missing\n  return null\n}\n\nasync function loadTagVersions(depth: number): Promise<void> {\n  await prepareRepository(depth)\n\n  const knownVersions = await utils.getVersions()\n\n  let latestTag = utils.latestVersionTag(knownVersions)\n  let latestSha = await git.resolveRef(latestTag)\n  let latestVersion = await getSanitizedVersion(latestTag, knownVersions)\n\n  if (!latestVersion) {\n    throw new Error('Failed to parse latest version.')\n  }\n\n  if (latestTag.toLowerCase() === 'nightly') {\n    const sortedTags = utils.sortTagsBySemver(Object.keys(knownVersions))\n    const previousValidTag = sortedTags.find(\n      tag => tag.toLowerCase() !== 'nightly'\n    )\n    if (previousValidTag) {\n      latestTag = previousValidTag\n      latestVersion = knownVersions[previousValidTag]\n      latestSha = await git.resolveRef(previousValidTag)\n    }\n  }\n\n  let prevTag = await git.previousTag()\n  const prevSha = await git.resolveRef(prevTag)\n  let prevVersion = await getSanitizedVersion(prevTag, knownVersions)\n\n  if (prevTag.toLowerCase() === 'nightly') {\n    // Adjust to use the latest valid semver version if previous tag is 'nightly'\n    prevVersion = latestVersion\n    prevTag = latestTag\n  }\n\n  if (!prevVersion) {\n    throw new Error('Failed to parse previous version.')\n  }\n\n  const curSha = await git.resolveRef('HEAD')\n  let curTag = ''\n  let curVersion: version.versionInfo\n  try {\n    curTag = await git.currentTag()\n    const potentialCurVersion = await getSanitizedVersion(curTag, knownVersions)\n    if (!potentialCurVersion) {\n      throw new Error('Failed to parse current version.')\n    }\n    curVersion = potentialCurVersion // Now we are sure curVersion is not null\n    if (curTag.toLowerCase() === 'nightly' && prevVersion) {\n      curVersion = await genDevVersion(prevVersion, prevTag)\n    }\n  } catch (error) {\n    if (!(error instanceof Error)) {\n      throw error\n    }\n\n    core.notice(\n      `Current commit seems to have no tag. Version number will be generated.\\n${error.message}`\n    )\n    if (!prevVersion) {\n      throw new Error('Previous version is required but not available.')\n    }\n    curVersion = await genDevVersion(prevVersion, prevTag)\n  }\n\n  setOutputs({\n    current: {\n      v: curVersion,\n      tag: curTag,\n      sha: curSha\n    },\n    previous: {\n      v: prevVersion,\n      tag: prevTag,\n      sha: prevSha\n    },\n    latest: {\n      v: latestVersion,\n      tag: latestTag,\n      sha: latestSha\n    },\n    isRelease: curTag !== '',\n    isBranchHead: await utils.isBranchHead(),\n    isLatestVersion: version.compare(latestVersion, curVersion) === 0,\n    isLatestMajor: utils.isLatestMajor(knownVersions, curVersion)\n  })\n}\n\ninterface versionInfo {\n  v: version.versionInfo\n  tag: string\n  sha: string\n}\n\nfunction setOutputs(p: {\n  current: versionInfo\n  previous: versionInfo\n  latest: versionInfo\n  isRelease: boolean\n  isBranchHead: boolean\n  isLatestVersion: boolean\n  isLatestMajor: boolean\n}): void {\n  core.debug(\n    `current version: '${p.current.v.original}'\ncurrent tag: '${p.current.tag}'\n\nprevious version: '${p.previous.v.original}'\nprevious tag: '${p.previous.tag}'\n\nlatest version: '${p.latest.v.original}'\nlatest tag: '${p.latest.tag}'\n`\n  )\n\n  core.setOutput('current-version', version.toString(p.current.v))\n  core.setOutput('current-tag', p.current.tag)\n  core.setOutput('current-sha', p.current.sha)\n\n  core.setOutput('previous-version', version.toString(p.previous.v))\n  core.setOutput('previous-tag', p.previous.tag)\n  core.setOutput('previous-sha', p.previous.sha)\n\n  core.setOutput('latest-version', version.toString(p.latest.v))\n  core.setOutput('latest-tag', p.latest.tag)\n  core.setOutput('latest-sha', p.latest.sha)\n\n  core.setOutput('is-release', p.isRelease)\n  core.setOutput('is-branch-head', p.isBranchHead)\n  core.setOutput('is-latest-version', p.isLatestVersion)\n  core.setOutput('is-latest-major', p.isLatestMajor)\n}\n\nasync function detectVersions(): Promise<void> {\n  // Read inputs\n  const fetchDepth: number = parseInt(core.getInput('fetch-depth'))\n  const branchVersioning: string = core.getInput('branch-versioning')\n\n  if (branchVersioning !== '') {\n    await loadBranchVersions(branchVersioning)\n    return\n  }\n\n  await loadTagVersions(fetchDepth)\n}\n\nasync function run(): Promise<void> {\n  try {\n    await detectVersions()\n  } catch (error) {\n    if (error instanceof Error) {\n      core.setFailed(error.message)\n      return\n    }\n\n    throw error\n  }\n}\n\nrun()\n// loadTagVersions(200)\n"],"names":["__createBinding","this","o","m","k","k2","desc","__setModuleDefault","v","__importStar","mod","result","git_1","git","fetch","revList","describe","lsRemote","tag","resolveRef","fetchTags","listCommitTags","countCommits","currentTag","latestTag","previousTag","ensureHistorySize","exec","require$$0","args","execResult","cmd","exitCode","stderr","opts","revListStr","lsRemoteResult","line","parts","ref","remote","tagsListStr","from","to","minCommits","string","countOccurrences","str","substr","index","startIndex","searchStrLen","count","version","parse","compare","toString","sanitize","toSemver","semver","isNumber","n","sv","minor","parse_suffix","patch","value","a","b","trySanitize","versionString","regex","sanitized","i","vString","main","version_1","require$$1","require$$2","getVersions","tags","latestVersionTag","versionsList","isBranchHead","refType","currentSha","eventName","refName","isLatestMajor","knownVersions","current","allVersions","sortTagsBySemver","prepareRepository","depth","genDevVersion","baseVersion","baseRef","currentRefName","sanitizedRefName","loadBranchVersions","targetBranch","runNumber","currentVersionStr","currentVersion","isRelease","utils.isBranchHead","setOutputs","getSanitizedVersion","originalVersion","loadTagVersions","utils.getVersions","utils.latestVersionTag","latestSha","latestVersion","previousValidTag","utils.sortTagsBySemver","prevTag","prevSha","prevVersion","curSha","curTag","curVersion","potentialCurVersion","error","core","utils.isLatestMajor","p","detectVersions","fetchDepth","branchVersioning","run"],"mappings":"yfACIA,EAAmBC,GAAQA,EAAK,kBAAqB,OAAO,OAAU,SAASC,EAAGC,EAAGC,EAAGC,EAAI,CACxFA,IAAO,SAAWA,EAAKD,GAC3B,IAAIE,EAAO,OAAO,yBAAyBH,EAAGC,CAAC,GAC3C,CAACE,IAAS,QAASA,EAAO,CAACH,EAAE,WAAaG,EAAK,UAAYA,EAAK,iBAClEA,EAAO,CAAE,WAAY,GAAM,IAAK,UAAW,CAAE,OAAOH,EAAEC,CAAC,CAAE,IAE3D,OAAO,eAAeF,EAAGG,EAAIC,CAAI,CACrC,EAAM,SAASJ,EAAGC,EAAGC,EAAGC,EAAI,CACpBA,IAAO,SAAWA,EAAKD,GAC3BF,EAAEG,CAAE,EAAIF,EAAEC,CAAC,CACf,GACIG,EAAsBN,GAAQA,EAAK,qBAAwB,OAAO,OAAU,SAASC,EAAGM,EAAG,CAC3F,OAAO,eAAeN,EAAG,UAAW,CAAE,WAAY,GAAM,MAAOM,CAAC,CAAE,CACtE,EAAK,SAASN,EAAGM,EAAG,CAChBN,EAAE,QAAaM,CACnB,GACIC,EAAgBR,GAAQA,EAAK,cAAiB,SAAUS,EAAK,CAC7D,GAAIA,GAAOA,EAAI,WAAY,OAAOA,EAClC,IAAIC,EAAS,CAAA,EACb,GAAID,GAAO,KAAM,QAASN,KAAKM,EAASN,IAAM,WAAa,OAAO,UAAU,eAAe,KAAKM,EAAKN,CAAC,GAAGJ,EAAgBW,EAAQD,EAAKN,CAAC,EACvIG,OAAAA,EAAmBI,EAAQD,CAAG,EACvBC,CACX,EACA,OAAO,eAAeC,EAAS,aAAc,CAAE,MAAO,EAAI,CAAE,EACjDA,EAAA,IAAGC,EACDD,EAAA,MAAGE,EACDF,EAAA,QAAGG,EACFH,EAAA,SAAGI,EACHJ,EAAA,SAAGK,EACRL,EAAA,IAAGM,EACIN,EAAA,WAAGO,EACJP,EAAA,UAAGQ,EACER,EAAA,eAAGS,EACLT,EAAA,aAAGU,EACLV,EAAA,WAAGW,EACJX,EAAA,UAAGY,EACDZ,EAAA,YAAGa,EACGb,EAAA,kBAAGc,EAC5B,MAAMC,EAAOlB,EAAamB,CAAwB,EAClD,eAAef,KAAOgB,EAAM,CACxB,MAAMC,EAAa,MAAMH,EAAK,cAAc,MAAOE,EAAM,CACrD,iBAAkB,EAC1B,CAAK,EACD,GAAIC,EAAW,WAAa,EAAG,CAC3B,MAAMC,EAAM,QAAQF,EAAK,KAAK,KAAK,CAAC,IAC9BG,EAAWF,EAAW,SAAS,SAAQ,EACvCG,EAASH,EAAW,OAC1B,MAAM,MAAM,YAAYC,CAAG,uBAAuBC,CAAQ;AAAA;AAAA,EAASC,CAAM,EAAE,CAC9E,CACD,OAAOH,CACX,CACA,eAAehB,EAAMoB,EAAM,CACvB,MAAMH,EAAM,CAAC,OAAO,EAChBG,GAAQA,EAAK,WACbH,EAAI,KAAK,SAAS,EAClBG,GAAQA,EAAK,OAAS,MACtBH,EAAI,KAAK,WAAWG,EAAK,KAAK,EAAE,EAChCA,GAAQA,EAAK,QAAU,MACvBH,EAAI,KAAK,YAAYG,EAAK,MAAM,EAAE,EAClCA,GAAQA,EAAK,QACbH,EAAI,KAAKG,EAAK,MAAM,EACpBA,GAAQA,EAAK,SACbH,EAAI,KAAKG,EAAK,OAAO,EACzB,MAAMrB,EAAI,GAAGkB,CAAG,CACpB,CACA,eAAehB,EAAQmB,EAAM,CACzB,MAAMH,EAAM,CAAC,UAAU,EACnBG,GAAQA,EAAK,UAAY,MACzBH,EAAI,KAAK,eAAeG,EAAK,QAAQ,EAAE,EACvCA,GAAQA,EAAK,KACbH,EAAI,KAAKG,EAAK,GAAG,EAErB,MAAMC,GADgB,MAAMtB,EAAI,GAAGkB,CAAG,GACL,OAAO,KAAI,EAC5C,OAAII,IAAe,GACR,GAEJA,EAAW,MAAM;AAAA,CAAI,CAChC,CACA,eAAenB,EAASkB,EAAM,CAC1B,MAAMH,EAAM,CAAC,UAAU,EACvB,OAAIG,GAAQA,EAAK,MACbH,EAAI,KAAK,QAAQ,EACjBG,GAAQA,EAAK,QAAU,MACvBH,EAAI,KAAK,YAAYG,EAAK,MAAM,EAAE,EAClCA,GAAQA,EAAK,YACbH,EAAI,KAAK,eAAe,EACxBG,GAAQA,EAAK,KACbH,EAAI,KAAKG,EAAK,GAAG,GACE,MAAMrB,EAAI,GAAGkB,CAAG,GACF,OAChB,MACzB,CACA,eAAed,EAASiB,EAAM,CAC1B,MAAMH,EAAM,CAAC,WAAW,EACpBG,EAAK,UACLH,EAAI,KAAK,QAAQ,EACjBG,EAAK,WACLH,EAAI,KAAK,SAAS,EAClBG,EAAK,MACLH,EAAI,KAAK,QAAQ,EACjBG,EAAK,WACLH,EAAI,KAAK,SAAS,EACtBA,EAAI,KAAKG,EAAK,UAAU,EACpBA,EAAK,MACLH,EAAI,KAAK,GAAGG,EAAK,IAAI,EACzB,MAAME,EAAiB,MAAMvB,EAAI,GAAGkB,CAAG,EACjCpB,EAAS,CAAA,EACf,UAAW0B,KAAQD,EAAe,OAAO,OAAO,MAAM;AAAA,CAAI,EAAG,CACzD,MAAME,EAAQD,EAAK,MAAM,GAAI,EAC7B1B,EAAO,KAAK,CAAE,UAAW2B,EAAM,CAAC,EAAG,QAASA,EAAM,CAAC,CAAC,CAAE,CACzD,CACD,OAAO3B,CACX,CACA,eAAeO,EAAIgB,EAAM,CACrB,MAAMH,EAAM,CAAC,KAAK,EAClB,OAAIG,GAAQA,EAAK,MACbH,EAAI,KAAK,QAAQ,EACjBG,GAAQA,EAAK,UACbH,EAAI,KAAK,eAAeG,EAAK,QAAQ,EAAE,EACvCA,GAAQA,EAAK,QACbH,EAAI,KAAK,YAAYG,EAAK,MAAM,EAAE,EAClCA,GAAQA,EAAK,MACbH,EAAI,KAAK,UAAUG,EAAK,IAAI,EAAE,EAC9BA,GAAQA,EAAK,KACbH,EAAI,KAAKG,EAAK,GAAG,GACH,MAAMrB,EAAI,GAAGkB,CAAG,GACjB,OAAO,MAC5B,CAWA,eAAeZ,EAAWoB,EAAM,OAAQ,CAEpC,OADgB,MAAMxB,EAAQ,CAAE,SAAU,EAAG,IAAAwB,CAAG,CAAE,GACnC,CAAC,CACpB,CAKA,eAAenB,EAAUoB,EAAS,SAAU,CACxC,MAAM1B,EAAM,CACR,OAAA0B,EACA,QAAS,0BACT,OAAQ,CAChB,CAAK,CACL,CAIA,eAAenB,EAAekB,EAAM,OAAQ,CACxC,MAAME,EAAc,MAAMvB,EAAI,CAC1B,SAAUqB,CAClB,CAAK,EACD,OAAKE,EAGEA,EAAY,MAAM;AAAA,CAAI,EAFlB,EAGf,CAIA,eAAenB,EAAaoB,EAAMC,EAAI,CAElC,OADgB,MAAM5B,EAAQ,CAAE,IAAK,GAAG2B,CAAI,KAAKC,CAAE,EAAE,CAAE,GACxC,MACnB,CAOA,eAAepB,EAAWgB,EAAM,OAAQ,CACpC,OAAO,MAAMvB,EAAS,CAClB,KAAM,GACN,OAAQ,EACR,WAAY,GACZ,IAAAuB,CACR,CAAK,CACL,CAUA,eAAef,EAAUe,EAAM,OAAQ,CACnC,OAAO,MAAMvB,EAAS,CAClB,KAAM,GACN,OAAQ,EACR,IAAAuB,CACR,CAAK,CACL,CAcA,eAAed,EAAYc,EAAM,OAAQ,CACrC,OAAO,MAAMf,EAAU,GAAGe,CAAG,GAAG,CACpC,CAKA,eAAeb,EAAkBkB,EAAYJ,EAAS,SAAUD,EAAM,OAAQ,EAC1D,MAAMxB,EAAQ,CAC1B,SAAU6B,EACV,IAAAL,CACR,CAAK,GACW,QAAUK,GAGtB,MAAM9B,EAAM,CACR,OAAQ8B,EACR,OAAAJ,EACA,QAASD,CACjB,CAAK,CACL,UC3OA,OAAO,eAAeM,EAAS,aAAc,CAAE,MAAO,EAAI,CAAE,EACpCA,EAAA,iBAAGC,GAM3B,SAASA,GAAiBC,EAAKC,EAAQ,CACnC,IAAIC,EAAQ,EACRC,EAAa,EACjB,MAAMC,EAAeH,EAAO,OAC5B,GAAIG,IAAiB,EACjB,MAAO,GAEX,IAAIC,EAAQ,EACZ,MAAQH,EAAQF,EAAI,QAAQC,EAAQE,CAAU,GAAK,IAC/CE,EAAQA,EAAQ,EAChBF,EAAaD,EAAQE,EAEzB,OAAOC,CACX,UCpBIpD,GAAmBC,GAAQA,EAAK,kBAAqB,OAAO,OAAU,SAASC,EAAGC,EAAGC,EAAGC,EAAI,CACxFA,IAAO,SAAWA,EAAKD,GAC3B,IAAIE,EAAO,OAAO,yBAAyBH,EAAGC,CAAC,GAC3C,CAACE,IAAS,QAASA,EAAO,CAACH,EAAE,WAAaG,EAAK,UAAYA,EAAK,iBAClEA,EAAO,CAAE,WAAY,GAAM,IAAK,UAAW,CAAE,OAAOH,EAAEC,CAAC,CAAE,IAE3D,OAAO,eAAeF,EAAGG,EAAIC,CAAI,CACrC,EAAM,SAASJ,EAAGC,EAAGC,EAAGC,EAAI,CACpBA,IAAO,SAAWA,EAAKD,GAC3BF,EAAEG,CAAE,EAAIF,EAAEC,CAAC,CACf,GACIG,GAAsBN,GAAQA,EAAK,qBAAwB,OAAO,OAAU,SAASC,EAAGM,EAAG,CAC3F,OAAO,eAAeN,EAAG,UAAW,CAAE,WAAY,GAAM,MAAOM,CAAC,CAAE,CACtE,EAAK,SAASN,EAAGM,EAAG,CAChBN,EAAE,QAAaM,CACnB,GACIC,GAAgBR,GAAQA,EAAK,cAAiB,SAAUS,EAAK,CAC7D,GAAIA,GAAOA,EAAI,WAAY,OAAOA,EAClC,IAAIC,EAAS,CAAA,EACb,GAAID,GAAO,KAAM,QAASN,KAAKM,EAASN,IAAM,WAAa,OAAO,UAAU,eAAe,KAAKM,EAAKN,CAAC,GAAGJ,GAAgBW,EAAQD,EAAKN,CAAC,EACvIG,OAAAA,GAAmBI,EAAQD,CAAG,EACvBC,CACX,EACA,OAAO,eAAe0C,EAAS,aAAc,CAAE,MAAO,EAAI,CAAE,EAC/CA,EAAA,MAAGC,EACDD,EAAA,QAAGE,GACFF,EAAA,SAAGG,GACHH,EAAA,SAAGI,EACHJ,EAAA,SAAGK,GACnB,MAAMC,GAASlD,GAAamB,CAAiB,EAW7C,SAASgC,EAASpD,EAAG,CACjB,MAAMqD,EAAI,OAAOrD,CAAC,EAClB,MAAO,CAAC,OAAO,MAAMqD,CAAC,CAC1B,CACA,SAASP,EAAM9C,EAAG,CACd,MAAMG,EAAS,CACX,MAAO,EACP,MAAO,EACP,MAAO,EACP,OAAQ,GACR,SAAUH,EACV,OAAQ,EAChB,EACUsD,EAAKH,GAAO,MAAMnD,CAAC,EACzB,GAAIsD,EACA,OAAAnD,EAAO,MAAQmD,EAAG,MAClBnD,EAAO,MAAQmD,EAAG,MAClBnD,EAAO,MAAQmD,EAAG,MAClBnD,EAAO,OAAS,GACZmD,EAAG,WAAW,OAAS,IACvBnD,EAAO,QAAUmD,EAAG,WAAW,KAAK,GAAG,GAEvCA,EAAG,MAAM,OAAS,IACRA,EAAG,MAAM,IAAKtD,GAAMA,EAAE,UAAU,EAC1CG,EAAO,QAAU,IAAMmD,EAAG,MAAM,KAAK,GAAG,GAErCnD,EAEX,MAAM2B,EAAQ9B,EAAE,MAAM,GAAG,EAOzB,GANIoD,EAAStB,EAAM,CAAC,CAAC,EACjB3B,EAAO,MAAQ,OAAO2B,EAAM,CAAC,CAAC,EAG9B3B,EAAO,OAASH,EAEhB8B,EAAM,SAAW,EAEjB,OAAA3B,EAAO,OAASiD,EAAStB,EAAM,CAAC,CAAC,EAC1B3B,EAGX,GAAI,CAACiD,EAAStB,EAAM,CAAC,CAAC,EAAG,CAIrB,MAAMyB,EAAQC,EAAa1B,EAAM,CAAC,CAAC,EACnC,OAAI,OAAO,MAAMyB,EAAM,CAAC,GAEpBpD,EAAO,OAAS2B,EAAM,MAAM,CAAC,EAAE,KAAK,GAAG,EAChC3B,IAGXA,EAAO,MAAQoD,EAAM,EACrBpD,EAAO,OAAS,CAACoD,EAAM,CAAC,EAAE,OAAOzB,EAAM,MAAM,CAAC,CAAC,EAAE,KAAK,GAAG,EACzD3B,EAAO,OAAS,GACTA,EACV,CAED,GADAA,EAAO,MAAQ,OAAO2B,EAAM,CAAC,CAAC,EAC1BA,EAAM,SAAW,EAEjB,OAAA3B,EAAO,OAAS,GACTA,EAGX,GAAIiD,EAAStB,EAAM,CAAC,CAAC,EAEjB,OAAA3B,EAAO,MAAQ,OAAO2B,EAAM,CAAC,CAAC,EAC9B3B,EAAO,OAAS2B,EAAM,SAAW,EAC7BA,EAAM,OAAS,IAGf3B,EAAO,OAAS2B,EAAM,MAAM,CAAC,EAAE,KAAK,GAAG,GAEpC3B,EASX,MAAMsD,EAAQD,EAAa1B,EAAM,CAAC,CAAC,EACnC,OAAI,OAAO,MAAM2B,EAAM,CAAC,GAMpBtD,EAAO,OAAS2B,EAAM,MAAM,CAAC,EAAE,KAAK,GAAG,EAChC3B,IAMXA,EAAO,MAAQsD,EAAM,EACrBtD,EAAO,OAAS,CAACsD,EAAM,CAAC,EAAE,OAAO3B,EAAM,MAAM,CAAC,CAAC,EAAE,KAAK,GAAG,EACzD3B,EAAO,OAAS,GACTA,EACX,CACA,SAASqD,EAAaE,EAAO,CACzB,MAAM5B,EAAQ4B,EAAM,MAAM,GAAG,EAC7B,OAAI5B,EAAM,SAAW,EAKbsB,EAASM,CAAK,EACP,CACH,EAAG,OAAOA,CAAK,EACf,EAAG,EACnB,EAMe,CACH,EAAG,IACH,EAAGA,CACf,EAESN,EAAStB,EAAM,CAAC,CAAC,EAWf,CACH,EAAG,OAAOA,EAAM,CAAC,CAAC,EAClB,EAAGA,EAAM,MAAM,CAAC,EAAE,KAAK,GAAG,CAClC,EAXe,CACH,EAAG,IACH,EAAG4B,CACf,CASA,CAOA,SAASX,GAAQY,EAAGC,EAAGC,EAAa,CAQhC,OAPIA,IAAgB,SAChBA,EAAc,IAEdA,IACAF,EAAIV,EAASU,CAAC,EACdC,EAAIX,EAASW,CAAC,GAEdD,EAAE,QAAU,CAACC,EAAE,OAER,EAEPA,EAAE,QAAU,CAACD,EAAE,OAER,GAEP,CAACA,EAAE,QAAU,CAACC,EAAE,OAEZD,EAAE,SAAWC,EAAE,SACR,GAEPD,EAAE,SAAWC,EAAE,SACR,EAEJ,EAGPD,EAAE,MAAQC,EAAE,MACL,GAEPD,EAAE,MAAQC,EAAE,MACL,EAEPD,EAAE,MAAQC,EAAE,MACL,GAEPD,EAAE,MAAQC,EAAE,MACL,EAEPD,EAAE,MAAQC,EAAE,MACL,GAEPD,EAAE,MAAQC,EAAE,MACL,EAGPA,EAAE,SAAW,IAAMD,EAAE,SAAW,GAEzB,GAEPA,EAAE,SAAW,IAAMC,EAAE,SAAW,GAEzB,EAEPD,EAAE,OAASC,EAAE,OACN,GAEPD,EAAE,OAASC,EAAE,OACN,EAEJ,CACX,CACA,SAASZ,GAAShD,EAAG,CACjB,OAAKA,EAAE,OAGHA,EAAE,SAAW,GACN,GAAGA,EAAE,KAAK,IAAIA,EAAE,KAAK,IAAIA,EAAE,KAAK,GAEpC,GAAGA,EAAE,KAAK,IAAIA,EAAE,KAAK,IAAIA,EAAE,KAAK,IAAIA,EAAE,MAAM,GALxCA,EAAE,QAMjB,CASA,SAASiD,EAASjD,EAAG,CACjB,IAAI8D,EAQJ,GAPI,OAAO9D,GAAM,UACb8D,EAAgB9D,EAChBA,EAAI8C,EAAMgB,CAAa,GAGvBA,EAAgB9D,EAAE,SAElBA,EAAE,OACF,OAAOA,EAEX,MAAM+D,EAAQ,mBACRC,EAAYF,EAAc,QAAQC,EAAO,GAAG,EAC5C5D,EAAS2C,EAAMkB,CAAS,EAC9B,OAAA7D,EAAO,SAAW2D,EACX3D,CACX,CAOA,SAAS+C,GAASlD,EAAG,CACjB,MAAMiE,EAAIhB,EAASjD,CAAC,EACpB,GAAIiE,EAAE,OACF,OAAOA,EAEX,IAAIC,EACJ,MAAI,OAAOlE,GAAM,SACbkE,EAAUlE,EAGVkE,EAAUlE,EAAE,SAEV,IAAI,MAAM,WAAWkE,CAAO,0EAA0E,CAChH,CC7SA,IAAI1E,GAAmBC,GAAQA,EAAK,kBAAqB,OAAO,OAAU,SAASC,EAAGC,EAAGC,EAAGC,EAAI,CACxFA,IAAO,SAAWA,EAAKD,GAC3B,IAAIE,EAAO,OAAO,yBAAyBH,EAAGC,CAAC,GAC3C,CAACE,IAAS,QAASA,EAAO,CAACH,EAAE,WAAaG,EAAK,UAAYA,EAAK,iBAClEA,EAAO,CAAE,WAAY,GAAM,IAAK,UAAW,CAAE,OAAOH,EAAEC,CAAC,CAAE,IAE3D,OAAO,eAAeF,EAAGG,EAAIC,CAAI,CACrC,EAAM,SAASJ,EAAGC,EAAGC,EAAGC,EAAI,CACpBA,IAAO,SAAWA,EAAKD,GAC3BF,EAAEG,CAAE,EAAIF,EAAEC,CAAC,CACf,GACIG,GAAsBN,GAAQA,EAAK,qBAAwB,OAAO,OAAU,SAASC,EAAGM,EAAG,CAC3F,OAAO,eAAeN,EAAG,UAAW,CAAE,WAAY,GAAM,MAAOM,CAAC,CAAE,CACtE,EAAK,SAASN,EAAGM,EAAG,CAChBN,EAAE,QAAaM,CACnB,GACIC,EAAgBR,GAAQA,EAAK,cAAiB,SAAUS,EAAK,CAC7D,GAAIA,GAAOA,EAAI,WAAY,OAAOA,EAClC,IAAIC,EAAS,CAAA,EACb,GAAID,GAAO,KAAM,QAASN,KAAKM,EAASN,IAAM,WAAa,OAAO,UAAU,eAAe,KAAKM,EAAKN,CAAC,GAAGJ,GAAgBW,EAAQD,EAAKN,CAAC,EACvI,OAAAG,GAAmBI,EAAQD,CAAG,EACvBC,CACX,EACA,OAAO,eAAegE,EAAS,aAAc,CAAE,MAAO,EAAI,CAAE,EAC5D,IAAAC,EAAAD,EAAA,QAAgCA,EAAA,OAAG/D,QAAc,OACjD,MAAMC,GAAMJ,EAAamB,CAAgB,EACzC,IAAWhB,EAAA+D,EAAA,IAAG9D,GACd,MAAMgC,GAASpC,EAAaoE,CAAmB,EACjCF,EAAA,OAAG9B,GACjB,MAAMQ,GAAU5C,EAAaqE,CAAoB,EACjDF,EAAAD,EAAA,QAAkBtB,GCnBlB,eAAsB0B,IAAoC,CAElD,MAAAC,GADa,MAAMnE,EAAI,IAAI,CAAC,KAAM,GAAK,GACrB,MAAM;AAAA,CAAI,EAE5BF,EAAS,CAAA,EAEf,UAAWO,KAAO8D,EAAM,CACtB,IAAIxE,EAAIU,EACJA,EAAI,WAAW,GAAG,IAChBV,EAAAU,EAAI,MAAM,CAAC,GAGjBP,EAAOO,CAAG,EAAImC,EAAQ,MAAM7C,CAAC,CAC/B,CAEO,OAAAG,CACT,CAEO,SAASsE,GAAiBzE,EAAwB,CACjD,MAAA0E,EAAe,OAAO,QAAQ1E,CAAC,EAGrC,OAAA0E,EAAa,KAAK,CAACf,EAAGC,IAAMf,EAAQ,QAAQc,EAAE,CAAC,EAAGC,EAAE,CAAC,CAAC,CAAC,EAGhDc,EAAaA,EAAa,OAAS,CAAC,EAAE,CAAC,CAChD,CAMA,eAAsBC,GAAiC,CAC/C,MAAAC,EAAU,QAAQ,IAAI,gBACtBC,EAAa,QAAQ,IAAI,WACzBC,EAAY,QAAQ,IAAI,kBAC1B,IAAAC,EAEJ,OAAIH,IAAY,SACP,IAGLE,IAAc,eAEhBC,EAAU,QAAQ,IAAI,gBAEtBA,EAAU,QAAQ,IAAI,gBAGxB,MAAM1E,EAAI,MAAM,CACd,OAAQ,EACR,OAAQ,SACR,QAAS0E,CAAA,CACV,EAEoB,MAAM1E,EAAI,WAAW,UAAU0E,CAAO,EAAE,IACrCF,EAC1B,CAOgB,SAAAG,GACdC,EACAC,EACS,CACH,MAAAC,EAAc,OAAO,OAAOF,CAAa,EACnCE,EAAA,KAAKtC,EAAQ,OAAO,EAEhC,QAASoB,EAAIkB,EAAY,OAAS,EAAGlB,GAAK,EAAGA,IAAK,CAC1C,MAAAjE,EAAImF,EAAYlB,CAAC,EACnB,GAAAjE,EAAE,QAAUkF,EAAQ,MACtB,OAAOrC,EAAQ,QAAQ7C,EAAGkF,CAAO,IAAM,CAE3C,CACO,MAAA,EACT,CAMO,SAASE,GAAiBZ,EAA0B,CAClD,OAAAA,EAAK,OAAO9D,GAAOyC,EAAO,MAAMzC,CAAG,IAAM,IAAI,EAAE,KAAKyC,EAAO,QAAQ,CAC5E,CC7FA,eAAekC,GAAkBC,EAA8B,CAGvD,MAAAV,EAAkB,QAAQ,IAAI,gBAC9BG,EAAkB,QAAQ,IAAI,gBAEpC,OAAIH,IAAY,OAEd,MAAMvE,EAAI,MAAM,CACd,OAAQ,SACR,QAAS,aAAa0E,CAAO,cAAcA,CAAO,GAClD,OAAQ,EACR,UAAW,EAAA,CACZ,EAGH,MAAM1E,EAAI,YACHA,EAAI,kBAAkBiF,CAAK,CACpC,CAEA,eAAeC,EACbC,EACAC,EAC8B,CACxB,MAAAC,EAAiB,QAAQ,IAAI,gBAC7BC,EAAmB9C,EAAQ,SAAS6C,CAAc,EAClD9C,EAAQ,MAAMvC,EAAI,aAAaoF,EAAS,MAAM,EAE7C,MAAA,CACL,MAAOD,EAAY,MACnB,MAAOA,EAAY,MACnB,MAAOA,EAAY,MACnB,OAAQ,GAAG5C,CAAK,IAAI+C,CAAgB,GACpC,SAAU,GAAGH,EAAY,QAAQ,IAAI5C,CAAK,IAAI+C,CAAgB,GAC9D,OAAQ,EAAA,CAEZ,CAEA,eAAeC,GAAmBC,EAAqC,CAC/D,MAAAjB,EAAU,QAAQ,IAAI,gBACtBG,EAAU,QAAQ,IAAI,gBAEtBe,EAAoB,QAAQ,IAAI,kBAChCjB,EAAqB,MAAMxE,EAAI,WAAW,MAAM,EAChD0F,EAAoB,GAAGD,CAAS,IAAIjB,EAAW,UAAU,EAAG,CAAC,CAAC,GAE9DmB,EAAiBnD,EAAQ,SAASkD,CAAiB,EACnDE,EAAYrB,IAAY,UAAYG,IAAYc,EAChDlB,EAAe,MAAMuB,IAEhBC,EAAA,CACT,QAAS,CACP,EAAGH,EACH,IAAK,GACL,IAAKnB,CACP,EACA,SAAU,CACR,EAAGhC,EAAQ,MAAM,SAAS,EAC1B,IAAK,GACL,IAAK,SACP,EACA,OAAQ,CACN,EAAGA,EAAQ,MAAM,SAAS,EAC1B,IAAK,GACL,IAAK,SACP,EACA,UAAAoD,EAAA,aACAtB,EACA,gBAAiBA,GAAgBsB,EACjC,cAAetB,GAAgBsB,CAAA,CAChC,CACH,CAEA,eAAeG,EACb1F,EACAuE,EACqC,CAC/B,MAAAoB,EAAkBpB,EAAcvE,CAAG,EACrC,OAAA2F,GAAmBA,EAAgB,SAC9BxD,EAAQ,SAASwD,EAAgB,QAAQ,EAG3C,IACT,CAEA,eAAeC,GAAgBhB,EAA8B,CAC3D,MAAMD,GAAkBC,CAAK,EAEvB,MAAAL,EAAgB,MAAMsB,KAExB,IAAAvF,EAAYwF,GAAuBvB,CAAa,EAChDwB,EAAY,MAAMpG,EAAI,WAAWW,CAAS,EAC1C0F,EAAgB,MAAMN,EAAoBpF,EAAWiE,CAAa,EAEtE,GAAI,CAACyB,EACG,MAAA,IAAI,MAAM,iCAAiC,EAG/C,GAAA1F,EAAU,YAAY,IAAM,UAAW,CAEzC,MAAM2F,EADaC,GAAuB,OAAO,KAAK3B,CAAa,CAAC,EAChC,KAClCvE,GAAOA,EAAI,YAAA,IAAkB,SAAA,EAE3BiG,IACU3F,EAAA2F,EACZD,EAAgBzB,EAAc0B,CAAgB,EAClCF,EAAA,MAAMpG,EAAI,WAAWsG,CAAgB,EAErD,CAEI,IAAAE,EAAU,MAAMxG,EAAI,cACxB,MAAMyG,EAAU,MAAMzG,EAAI,WAAWwG,CAAO,EAC5C,IAAIE,EAAc,MAAMX,EAAoBS,EAAS5B,CAAa,EAQlE,GANI4B,EAAQ,YAAY,IAAM,YAEdE,EAAAL,EACJG,EAAA7F,GAGR,CAAC+F,EACG,MAAA,IAAI,MAAM,mCAAmC,EAGrD,MAAMC,EAAS,MAAM3G,EAAI,WAAW,MAAM,EAC1C,IAAI4G,EAAS,GACTC,EACA,GAAA,CACOD,EAAA,MAAM5G,EAAI,aACnB,MAAM8G,EAAsB,MAAMf,EAAoBa,EAAQhC,CAAa,EAC3E,GAAI,CAACkC,EACG,MAAA,IAAI,MAAM,kCAAkC,EAEvCD,EAAAC,EACTF,EAAO,gBAAkB,WAAaF,IAC3BG,EAAA,MAAM3B,EAAcwB,EAAaF,CAAO,SAEhDO,EAAO,CACV,GAAA,EAAEA,aAAiB,OACf,MAAAA,EAMR,GAHKC,EAAA,OACH;AAAA,EAA2ED,EAAM,OAAO,EAAA,EAEtF,CAACL,EACG,MAAA,IAAI,MAAM,iDAAiD,EAEtDG,EAAA,MAAM3B,EAAcwB,EAAaF,CAAO,CACvD,CAEWV,EAAA,CACT,QAAS,CACP,EAAGe,EACH,IAAKD,EACL,IAAKD,CACP,EACA,SAAU,CACR,EAAGD,EACH,IAAKF,EACL,IAAKC,CACP,EACA,OAAQ,CACN,EAAGJ,EACH,IAAK1F,EACL,IAAKyF,CACP,EACA,UAAWQ,IAAW,GACtB,aAAc,MAAMf,EAAmB,EACvC,gBAAiBrD,EAAQ,QAAQ6D,EAAeQ,CAAU,IAAM,EAChE,cAAeI,GAAoBrC,EAAeiC,CAAU,CAAA,CAC7D,CACH,CAQA,SAASf,EAAWoB,EAQX,CACFF,EAAA,MACH,qBAAqBE,EAAE,QAAQ,EAAE,QAAQ;AAAA,gBAC7BA,EAAE,QAAQ,GAAG;AAAA;AAAA,qBAERA,EAAE,SAAS,EAAE,QAAQ;AAAA,iBACzBA,EAAE,SAAS,GAAG;AAAA;AAAA,mBAEZA,EAAE,OAAO,EAAE,QAAQ;AAAA,eACvBA,EAAE,OAAO,GAAG;AAAA,CAAA,EAIzBF,EAAK,UAAU,kBAAmBxE,EAAQ,SAAS0E,EAAE,QAAQ,CAAC,CAAC,EAC/DF,EAAK,UAAU,cAAeE,EAAE,QAAQ,GAAG,EAC3CF,EAAK,UAAU,cAAeE,EAAE,QAAQ,GAAG,EAE3CF,EAAK,UAAU,mBAAoBxE,EAAQ,SAAS0E,EAAE,SAAS,CAAC,CAAC,EACjEF,EAAK,UAAU,eAAgBE,EAAE,SAAS,GAAG,EAC7CF,EAAK,UAAU,eAAgBE,EAAE,SAAS,GAAG,EAE7CF,EAAK,UAAU,iBAAkBxE,EAAQ,SAAS0E,EAAE,OAAO,CAAC,CAAC,EAC7DF,EAAK,UAAU,aAAcE,EAAE,OAAO,GAAG,EACzCF,EAAK,UAAU,aAAcE,EAAE,OAAO,GAAG,EAEpCF,EAAA,UAAU,aAAcE,EAAE,SAAS,EACnCF,EAAA,UAAU,iBAAkBE,EAAE,YAAY,EAC1CF,EAAA,UAAU,oBAAqBE,EAAE,eAAe,EAChDF,EAAA,UAAU,kBAAmBE,EAAE,aAAa,CACnD,CAEA,eAAeC,IAAgC,CAE7C,MAAMC,EAAqB,SAASJ,EAAK,SAAS,aAAa,CAAC,EAC1DK,EAA2BL,EAAK,SAAS,mBAAmB,EAElE,GAAIK,IAAqB,GAAI,CAC3B,MAAM9B,GAAmB8B,CAAgB,EACzC,MACF,CAEA,MAAMpB,GAAgBmB,CAAU,CAClC,CAEA,eAAeE,IAAqB,CAC9B,GAAA,CACF,MAAMH,GAAe,QACdJ,EAAO,CACd,GAAIA,aAAiB,MAAO,CACrBC,EAAA,UAAUD,EAAM,OAAO,EAC5B,MACF,CAEM,MAAAA,CACR,CACF,CAEAO,GAAI","x_google_ignoreList":[0,1,2,3]}