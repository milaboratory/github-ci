{"version":3,"file":"index.mjs","sources":["../../node_modules/milib/lib/git.js","../../node_modules/milib/lib/string.js","../../node_modules/milib/lib/version.js","../../node_modules/milib/lib/main.js","../src/utils.ts","../src/main.ts"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.git = git;\nexports.fetch = fetch;\nexports.revList = revList;\nexports.describe = describe;\nexports.lsRemote = lsRemote;\nexports.tag = tag;\nexports.resolveRef = resolveRef;\nexports.fetchTags = fetchTags;\nexports.listCommitTags = listCommitTags;\nexports.countCommits = countCommits;\nexports.currentTag = currentTag;\nexports.latestTag = latestTag;\nexports.previousTag = previousTag;\nexports.ensureHistorySize = ensureHistorySize;\nconst exec = __importStar(require(\"@actions/exec\"));\nasync function git(...args) {\n    const execResult = await exec.getExecOutput(\"git\", args, {\n        ignoreReturnCode: true,\n    });\n    if (execResult.exitCode !== 0) {\n        const cmd = `git '${args.join(\"' '\")}'`;\n        const exitCode = execResult.exitCode.toString();\n        const stderr = execResult.stderr;\n        throw Error(`command \"${cmd}\" failed with code '${exitCode}':\\n\\n${stderr}`);\n    }\n    return execResult;\n}\nasync function fetch(opts) {\n    const cmd = [\"fetch\"];\n    if (opts && opts.forceFlag)\n        cmd.push(\"--force\");\n    if (opts && opts.depth != null)\n        cmd.push(`--depth=${opts.depth}`);\n    if (opts && opts.deepen != null)\n        cmd.push(`--deepen=${opts.deepen}`);\n    if (opts && opts.remote)\n        cmd.push(opts.remote);\n    if (opts && opts.refSpec)\n        cmd.push(opts.refSpec);\n    await git(...cmd);\n}\nasync function revList(opts) {\n    const cmd = [\"rev-list\"];\n    if (opts && opts.maxCount != null)\n        cmd.push(`--max-count=${opts.maxCount}`);\n    if (opts && opts.ref)\n        cmd.push(opts.ref);\n    const revListResult = await git(...cmd);\n    const revListStr = revListResult.stdout.trim();\n    if (revListStr === \"\") {\n        return [];\n    }\n    return revListStr.split(\"\\n\");\n}\nasync function describe(opts) {\n    const cmd = [\"describe\"];\n    if (opts && opts.tags)\n        cmd.push(\"--tags\");\n    if (opts && opts.abbrev != null)\n        cmd.push(`--abbrev=${opts.abbrev}`);\n    if (opts && opts.exactMatch)\n        cmd.push(\"--exact-match\");\n    if (opts && opts.ref)\n        cmd.push(opts.ref);\n    const describeResult = await git(...cmd);\n    const versionString = describeResult.stdout;\n    return versionString.trim();\n}\nasync function lsRemote(opts) {\n    const cmd = [\"ls-remote\"];\n    if (opts.tagsFlag)\n        cmd.push(\"--tags\");\n    if (opts.headsFlag)\n        cmd.push(\"--heads\");\n    if (opts.refs)\n        cmd.push(\"--refs\");\n    if (opts.quietFlag)\n        cmd.push(\"--quiet\");\n    cmd.push(opts.repository);\n    if (opts.refs)\n        cmd.push(...opts.refs);\n    const lsRemoteResult = await git(...cmd);\n    const result = [];\n    for (const line of lsRemoteResult.stdout.trim().split(\"\\n\")) {\n        const parts = line.split(\"\\t\");\n        result.push({ objectSHA: parts[0], refName: parts[1] });\n    }\n    return result;\n}\nasync function tag(opts) {\n    const cmd = [\"tag\"];\n    if (opts && opts.list)\n        cmd.push(\"--list\");\n    if (opts && opts.pointsAt)\n        cmd.push(`--points-at=${opts.pointsAt}`);\n    if (opts && opts.merged)\n        cmd.push(`--merged=${opts.merged}`);\n    if (opts && opts.sort)\n        cmd.push(`--sort=${opts.sort}`);\n    if (opts && opts.ref)\n        cmd.push(opts.ref);\n    const tagResult = await git(...cmd);\n    return tagResult.stdout.trim();\n}\n/*\n * Complex git action helpers.\n * Here are functions that simplify common actions\n * The usually either 'aliases' that wrap git command with predefined arguments\n * or bunch of actions not covered by single git command.\n */\n/**\n * Resolve any textual reference into commit SHA.\n * Commit SHA as <ref> is resolved to itself.\n */\nasync function resolveRef(ref = \"HEAD\") {\n    const shaList = await revList({ maxCount: 1, ref });\n    return shaList[0];\n}\n/**\n * Fetch all tags from remote repository without their history (only single commit)\n * and without breaking local history of already fetched refs\n */\nasync function fetchTags(remote = \"origin\") {\n    await fetch({\n        remote,\n        refSpec: \"refs/tags/*:refs/tags/*\",\n        deepen: 1,\n    });\n}\n/**\n * Get all tags that point exactly to given commit (HEAD by default)\n */\nasync function listCommitTags(ref = \"HEAD\") {\n    const tagsListStr = await tag({\n        pointsAt: ref,\n    });\n    if (!tagsListStr) {\n        return [];\n    }\n    return tagsListStr.split(\"\\n\");\n}\n/**\n * Count number of commits from <from> to <to> references, including <to> commit itself.\n */\nasync function countCommits(from, to) {\n    const commits = await revList({ ref: `${from}..${to}` });\n    return commits.length;\n}\n/**\n * Get tag that points exactly to given commit\n * NOTE: when several tags point to given commit, the freshest (by tag's date)\n *       is returned. This behavior is defined by git itself.\n *       See 'man git-describe' for more info.\n */\nasync function currentTag(ref = \"HEAD\") {\n    return await describe({\n        tags: true,\n        abbrev: 0,\n        exactMatch: true,\n        ref,\n    });\n}\n/**\n * Get first tag reachable from given commit.\n * It is either tag that points directly to commit, or to any of its parents (closest parent).\n *\n * NOTE: when several tags point to single commit, the freshest (by tag's date) is returned.\n *       This behavior is defined by git itself.\n *       See 'man git-describe' for more info.\n * @param ref\n */\nasync function latestTag(ref = \"HEAD\") {\n    return await describe({\n        tags: true,\n        abbrev: 0,\n        ref,\n    });\n}\n/**\n * Get first tag reachable from given commit's PARENT.\n * This is useful when you try to detect changes between two versions of code.\n * E.g.:\n *  const curTag = currentTag('HEAD')\n *  const prevTag = previousTag('HEAD')\n *  const versionChanges = log({ref: `${prevTag}..${curTag}`})\n *\n * NOTE: when several tags point to single commit, the freshest (by tag's date)\n *       is returned. This behavior is defined by git itself.\n *       See 'man git-describe' for more info.\n * @param ref\n */\nasync function previousTag(ref = \"HEAD\") {\n    return await latestTag(`${ref}^`);\n}\n/**\n * Ensure git repository has history of at least <minCommits> size from <ref>.\n * If not, fetch at most <minCommits> of <ref> from <remote>.\n */\nasync function ensureHistorySize(minCommits, remote = \"origin\", ref = \"HEAD\") {\n    const commits = await revList({\n        maxCount: minCommits,\n        ref,\n    });\n    if (commits.length >= minCommits) {\n        return;\n    }\n    await fetch({\n        deepen: minCommits,\n        remote,\n        refSpec: ref,\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.countOccurrences = countOccurrences;\n/**\n * Count number of <substr> fragments inside <str>.\n * Full <substr> is searched in <str>:\n *   countOccurrences(\"FFmmmmmFFFmmmFmmFFmmmFFF\", \"FF\") // returns '4'\n */\nfunction countOccurrences(str, substr) {\n    let index = 0;\n    let startIndex = 0;\n    const searchStrLen = substr.length;\n    if (searchStrLen === 0) {\n        return 0;\n    }\n    let count = 0;\n    while ((index = str.indexOf(substr, startIndex)) > -1) {\n        count = count + 1;\n        startIndex = index + searchStrLen;\n    }\n    return count;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = parse;\nexports.compare = compare;\nexports.toString = toString;\nexports.sanitize = sanitize;\nexports.toSemver = toSemver;\nconst semver = __importStar(require(\"semver\"));\n// /**\n//  * Check if version string contains only dots, hyphens and numbers:\n//  *  - 1.2.3    -> true\n//  *  - 1.0.4-1  -> true\n//  *  - 3.9.4a   -> false (a is letter)\n//  */\n// export function isNumeric(v: string): boolean {\n//   const n = Number(v.replaceAll(/[-.]/g, \"\"));\n//   return !Number.isNaN(n);\n// }\nfunction isNumber(v) {\n    const n = Number(v);\n    return !Number.isNaN(n);\n}\nfunction parse(v) {\n    const result = {\n        major: 0,\n        minor: 0,\n        patch: 0,\n        suffix: \"\", // part of the version string left after main fields parsing\n        original: v, // original version string parsed by parser\n        semver: false, // the version seems to conform with semver\n    };\n    const sv = semver.parse(v);\n    if (sv) {\n        result.major = sv.major;\n        result.minor = sv.minor;\n        result.patch = sv.patch;\n        result.semver = true;\n        if (sv.prerelease.length > 0) {\n            result.suffix += sv.prerelease.join(\".\");\n        }\n        if (sv.build.length > 0) {\n            const p = sv.build.map((v) => v.toString());\n            result.suffix += \"+\" + sv.build.join(\".\");\n        }\n        return result;\n    }\n    const parts = v.split(\".\");\n    if (isNumber(parts[0])) {\n        result.major = Number(parts[0]);\n    }\n    else {\n        result.suffix = v;\n    }\n    if (parts.length === 1) {\n        // Only <major> version part or completely unknown version format\n        result.semver = isNumber(parts[0]);\n        return result;\n    }\n    // parts.length >= 2\n    if (!isNumber(parts[1])) {\n        // Cases:\n        //  - 3.alpha (unknown format)\n        //  - 3.2-alpha (incomplete semver)\n        const minor = parse_suffix(parts[1]);\n        if (Number.isNaN(minor.v)) {\n            // Unknown format.\n            result.suffix = parts.slice(1).join(\".\");\n            return result;\n        }\n        // Incomplete semver format with suffix\n        result.minor = minor.v;\n        result.suffix = [minor.s].concat(parts.slice(2)).join(\".\");\n        result.semver = true;\n        return result;\n    }\n    result.minor = Number(parts[1]);\n    if (parts.length === 2) {\n        // Incomplete semver format: <major>.<minor>\n        result.semver = true;\n        return result;\n    }\n    // parts.length >=3\n    if (isNumber(parts[2])) {\n        // Regular semver with numeric <patch> part: <major>.<minor>.<patch>\n        result.patch = Number(parts[2]);\n        result.semver = parts.length === 3;\n        if (parts.length > 3) {\n            // Custom case with additional version parts: <major>.<minor>.<patch>.<...>\n            // Put rest of dots into 'suffix' field: <major>.<minor>.<patch>.<suffix>\n            result.suffix = parts.slice(3).join(\".\");\n        }\n        return result;\n    }\n    // parts.length >= 3 and parts[2] is not a number:\n    // Cases:\n    //   - 2.2.abra\n    //   - 2.2.abra.kadabra\n    //   - 2.2.abra-kadabra\n    //   - 0.2.3-custom\n    //   - 1.2.3-alpha.2\n    const patch = parse_suffix(parts[2]);\n    if (Number.isNaN(patch.v)) {\n        // <patch> version parts has no '-' delimiters and not a number.\n        // Treat non-numeric <patch> version as suffix: <major>.<minor>.<suffix>\n        // Cases:\n        //   - 2.2.abrakadabra\n        //   - 2.2.abra.kadabra\n        result.suffix = parts.slice(2).join(\".\");\n        return result;\n    }\n    // Canonical semver case with suffix: <major>.<minor>.<patch>-<suffix>\n    // Cases:\n    //   - 0.2.3-custom\n    //   - 1.2.3-alpha.2\n    result.patch = patch.v;\n    result.suffix = [patch.s].concat(parts.slice(3)).join(\".\");\n    result.semver = true;\n    return result;\n}\nfunction parse_suffix(value) {\n    const parts = value.split(\"-\");\n    if (parts.length === 1) {\n        // Cases:\n        //   - abc\n        //   - 123\n        //   - ''\n        if (isNumber(value)) {\n            return {\n                v: Number(value),\n                s: \"\",\n            };\n        }\n        // value has no '-' delimiters and not a number\n        // Cases:\n        //   - abc\n        //   - ''\n        return {\n            v: NaN,\n            s: value,\n        };\n    }\n    if (!isNumber(parts[0])) {\n        // Cases:\n        //   - abc-def\n        return {\n            v: NaN,\n            s: value,\n        };\n    }\n    // Cases:\n    //   - 1-abc\n    //   - 1-abc-def\n    return {\n        v: Number(parts[0]),\n        s: parts.slice(1).join(\"-\"),\n    };\n}\n/**\n * Compares <a> and <b> versions\n *   - returns -1 if <a> < <b>\n *   - returns  1 if <a> > <b>\n *   - returns  0 if <a> == <b>\n */\nfunction compare(a, b, trySanitize) {\n    if (trySanitize === undefined) {\n        trySanitize = true;\n    }\n    if (trySanitize) {\n        a = sanitize(a);\n        b = sanitize(b);\n    }\n    if (a.semver && !b.semver) {\n        // Always prefer semver versions to non-semver\n        return 1;\n    }\n    if (b.semver && !a.semver) {\n        // Always prefer semver versions to non-semver\n        return -1;\n    }\n    if (!a.semver && !b.semver) {\n        // Compare unknown version formats as stings\n        if (a.original < b.original) {\n            return -1;\n        }\n        if (a.original > b.original) {\n            return 1;\n        }\n        return 0;\n    }\n    // Both versions are semver\n    if (a.major < b.major) {\n        return -1;\n    }\n    if (a.major > b.major) {\n        return 1;\n    }\n    if (a.minor < b.minor) {\n        return -1;\n    }\n    if (a.minor > b.minor) {\n        return 1;\n    }\n    if (a.patch < b.patch) {\n        return -1;\n    }\n    if (a.patch > b.patch) {\n        return 1;\n    }\n    // <major>, <minor> and <patch> versions are the same for both <a> and <b> here\n    if (b.suffix === \"\" && a.suffix !== \"\") {\n        // Consider versions with suffix (alpha, beta, etc.) to be smaller than final versions\n        return -1;\n    }\n    if (a.suffix === \"\" && b.suffix !== \"\") {\n        // Consider versions with suffix (alpha, beta, etc.) to be smaller than final versions\n        return 1;\n    }\n    if (a.suffix < b.suffix) {\n        return -1;\n    }\n    if (a.suffix > b.suffix) {\n        return 1;\n    }\n    return 0;\n}\nfunction toString(v) {\n    if (!v.semver) {\n        return v.original;\n    }\n    if (v.suffix === \"\") {\n        return `${v.major}.${v.minor}.${v.patch}`;\n    }\n    return `${v.major}.${v.minor}.${v.patch}-${v.suffix}`;\n}\n/**\n * Sanitize version, trying to make versiuon to be valid semver.\n *   - replace 'non-semver' symbols with '-' (hyphen)\n *   - parse sanitized string as version number once again\n *\n * @param v: string | versionInfo\n * @returns versionInfo - version info after sanitizing. It might still not be a valid semver!\n */\nfunction sanitize(v) {\n    var versionString;\n    if (typeof v === \"string\") {\n        versionString = v;\n        v = parse(versionString);\n    }\n    else {\n        versionString = v.original;\n    }\n    if (v.semver) {\n        return v;\n    }\n    const regex = /[^0-9A-Za-z.+-]/g;\n    const sanitized = versionString.replace(regex, \"-\");\n    const result = parse(sanitized);\n    result.original = versionString;\n    return result;\n}\n/**\n * Sanitize version and throw an error, if the result is not in semver format.\n *\n * @param v: string | versionInfo\n * @returns versionInfo - version in semver format\n */\nfunction toSemver(v) {\n    const i = sanitize(v);\n    if (i.semver) {\n        return i;\n    }\n    var vString;\n    if (typeof v === \"string\") {\n        vString = v;\n    }\n    else {\n        vString = v.original;\n    }\n    throw new Error(`version ${vString} has not semver format and cannot be transformed to semver automatiaclly`);\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = exports.string = exports.git = void 0;\nconst git = __importStar(require(\"./git\"));\nexports.git = git;\nconst string = __importStar(require(\"./string\"));\nexports.string = string;\nconst version = __importStar(require(\"./version\"));\nexports.version = version;\n","import {git, version} from 'milib'\nimport * as semver from 'semver'\n\n// <tag name> -> <version>\nexport interface versionsMap {\n  [key: string]: version.versionInfo\n}\n\n/**\n * Get map of version numbers in git repository:\n *  <tag name> -> <parsed version info>\n */\nexport async function getVersions(): Promise<versionsMap> {\n  const tagsResult = await git.tag({list: true})\n  const tags = tagsResult.split('\\n')\n\n  const result = {} as versionsMap\n\n  for (const tag of tags) {\n    let v = tag\n    if (tag.startsWith('v')) {\n      v = tag.slice(1) // cut 'v' prefix\n    }\n\n    result[tag] = version.parse(v)\n  }\n\n  return result\n}\n\nexport function latestVersionTag(v: versionsMap): string {\n  const versionsList = Object.entries(v)\n\n  // Sort the list by values\n  versionsList.sort((a, b) => version.compare(a[1], b[1]))\n\n  // Get the tag name of the latest version\n  return versionsList[versionsList.length - 1][0]\n}\n\n/**\n * Check if action was started from branch AND current commit is\n * repository's branch head.\n */\nexport async function isBranchHead(): Promise<boolean> {\n  const refType = process.env.GITHUB_REF_TYPE as string\n  const currentSha = process.env.GITHUB_SHA as string\n  const eventName = process.env.GITHUB_EVENT_NAME as string\n  let refName\n\n  if (refType !== 'branch') {\n    return false\n  }\n\n  if (eventName === 'pull_request') {\n    // For pull requests get refName form the head ref or source branch\n    refName = process.env.GITHUB_HEAD_REF\n  } else {\n    refName = process.env.GITHUB_REF_NAME\n  }\n\n  await git.fetch({\n    deepen: 1,\n    remote: 'origin',\n    refSpec: refName\n  })\n\n  const remoteRefSha = await git.resolveRef(`origin/${refName}`)\n  return remoteRefSha === currentSha\n}\n\n/**\n * Check if current version is the latest known modification of the major verison.\n * Returns 'true' when 1.3.12 is the latest known modification of v1 even if\n * 2.12.1, 3.0.0 and other higher versions exist in list.\n */\nexport function isLatestMajor(\n  knownVersions: versionsMap,\n  current: version.versionInfo\n): boolean {\n  const allVersions = Object.values(knownVersions)\n  allVersions.sort(version.compare)\n\n  for (let i = allVersions.length - 1; i >= 0; i--) {\n    const v = allVersions[i]\n    if (v.major === current.major) {\n      return version.compare(v, current) === 0\n    }\n  }\n  return false\n}\n\n/**\n Filter out tags that are not valid semantic versions\n Sort tags in descending order (newest first)\n*/\nexport function sortTagsBySemver(tags: string[]): string[] {\n  return tags.filter(tag => semver.valid(tag) !== null).sort(semver.rcompare)\n}\n","import * as core from '@actions/core'\n\nimport * as utils from './utils'\nimport {git, version} from 'milib'\n\nasync function prepareRepository(depth: number): Promise<void> {\n  // We have to do black magic here because of\n  // https://github.com/milaboratory/github-ci/issues/13\n  const refType: string = process.env.GITHUB_REF_TYPE as string\n  const refName: string = process.env.GITHUB_REF_NAME as string\n\n  if (refType === 'tag') {\n    // force-fetch current tag from origin\n    await git.fetch({\n      remote: 'origin',\n      refSpec: `refs/tags/${refName}:refs/tags/${refName}`,\n      deepen: 1,\n      forceFlag: true\n    })\n  }\n\n  await git.fetchTags()\n  return git.ensureHistorySize(depth)\n}\n\nasync function genDevVersion(\n  baseVersion: version.versionInfo,\n  baseRef: string\n): Promise<version.versionInfo> {\n  const currentRefName = process.env.GITHUB_REF_NAME as string\n  const sanitizedRefName = version.sanitize(currentRefName)\n  const count = await git.countCommits(baseRef, 'HEAD')\n\n  return {\n    major: baseVersion.major,\n    minor: baseVersion.minor,\n    patch: baseVersion.patch,\n    suffix: `${count}-${sanitizedRefName}`,\n    original: `${baseVersion.original}-${count}-${sanitizedRefName}`,\n    semver: true\n  } as version.versionInfo\n}\n\nasync function loadBranchVersions(targetBranch: string): Promise<void> {\n  const refType = process.env.GITHUB_REF_TYPE as string\n  const refName = process.env.GITHUB_REF_NAME as string\n\n  const runNumber: string = process.env.GITHUB_RUN_NUMBER as string\n  const currentSha: string = await git.resolveRef('HEAD')\n  const currentVersionStr = `${runNumber}-${currentSha.substring(0, 8)}`\n\n  const currentVersion = version.sanitize(currentVersionStr)\n  const isRelease = refType === 'branch' && refName === targetBranch\n  const isBranchHead = await utils.isBranchHead()\n\n  setOutputs({\n    current: {\n      v: currentVersion,\n      tag: '',\n      sha: currentSha\n    },\n    previous: {\n      v: version.parse('unknown'),\n      tag: '',\n      sha: 'unknown'\n    },\n    latest: {\n      v: version.parse('unknown'),\n      tag: '',\n      sha: 'unknown'\n    },\n    isRelease,\n    isBranchHead,\n    isLatestVersion: isBranchHead && isRelease,\n    isLatestMajor: isBranchHead && isRelease\n  })\n}\n\nasync function getSanitizedVersion(\n  tag: string,\n  knownVersions: {[key: string]: version.versionInfo}\n): Promise<version.versionInfo | null> {\n  const originalVersion = knownVersions[tag]\n  if (originalVersion && originalVersion.original) {\n    return version.sanitize(originalVersion.original)\n  }\n  // Handle the case where version parsing fails or original is missing\n  return null\n}\n\nasync function loadTagVersions(depth: number): Promise<void> {\n  await prepareRepository(depth)\n\n  const knownVersions = await utils.getVersions()\n\n  let latestTag = utils.latestVersionTag(knownVersions)\n  let latestSha = await git.resolveRef(latestTag)\n  let latestVersion = await getSanitizedVersion(latestTag, knownVersions)\n\n  if (!latestVersion) {\n    throw new Error('Failed to parse latest version.')\n  }\n\n  if (latestTag.toLowerCase() === 'nightly') {\n    const sortedTags = utils.sortTagsBySemver(Object.keys(knownVersions))\n    const previousValidTag = sortedTags.find(\n      tag => tag.toLowerCase() !== 'nightly'\n    )\n    if (previousValidTag) {\n      latestTag = previousValidTag\n      latestVersion = knownVersions[previousValidTag]\n      latestSha = await git.resolveRef(previousValidTag)\n    }\n  }\n\n  let prevTag = await git.previousTag()\n  const prevSha = await git.resolveRef(prevTag)\n  let prevVersion = await getSanitizedVersion(prevTag, knownVersions)\n\n  if (prevTag.toLowerCase() === 'nightly') {\n    // Adjust to use the latest valid semver version if previous tag is 'nightly'\n    prevVersion = latestVersion\n    prevTag = latestTag\n  }\n\n  if (!prevVersion) {\n    throw new Error('Failed to parse previous version.')\n  }\n\n  const curSha = await git.resolveRef('HEAD')\n  let curTag = ''\n  let curVersion: version.versionInfo\n  try {\n    curTag = await git.currentTag()\n    const potentialCurVersion = await getSanitizedVersion(curTag, knownVersions)\n    if (!potentialCurVersion) {\n      throw new Error('Failed to parse current version.')\n    }\n    curVersion = potentialCurVersion // Now we are sure curVersion is not null\n    if (curTag.toLowerCase() === 'nightly' && prevVersion) {\n      curVersion = await genDevVersion(prevVersion, prevTag)\n    }\n  } catch (error) {\n    if (!(error instanceof Error)) {\n      throw error\n    }\n\n    core.notice(\n      `Current commit seems to have no tag. Version number will be generated.\\n${error.message}`\n    )\n    if (!prevVersion) {\n      throw new Error('Previous version is required but not available.')\n    }\n    curVersion = await genDevVersion(prevVersion, prevTag)\n  }\n\n  setOutputs({\n    current: {\n      v: curVersion,\n      tag: curTag,\n      sha: curSha\n    },\n    previous: {\n      v: prevVersion,\n      tag: prevTag,\n      sha: prevSha\n    },\n    latest: {\n      v: latestVersion,\n      tag: latestTag,\n      sha: latestSha\n    },\n    isRelease: curTag !== '',\n    isBranchHead: await utils.isBranchHead(),\n    isLatestVersion: version.compare(latestVersion, curVersion) === 0,\n    isLatestMajor: utils.isLatestMajor(knownVersions, curVersion)\n  })\n}\n\ninterface versionInfo {\n  v: version.versionInfo\n  tag: string\n  sha: string\n}\n\nfunction setOutputs(p: {\n  current: versionInfo\n  previous: versionInfo\n  latest: versionInfo\n  isRelease: boolean\n  isBranchHead: boolean\n  isLatestVersion: boolean\n  isLatestMajor: boolean\n}): void {\n  core.debug(\n    `current version: '${p.current.v.original}'\ncurrent tag: '${p.current.tag}'\n\nprevious version: '${p.previous.v.original}'\nprevious tag: '${p.previous.tag}'\n\nlatest version: '${p.latest.v.original}'\nlatest tag: '${p.latest.tag}'\n`\n  )\n\n  core.setOutput('current-version', version.toString(p.current.v))\n  core.setOutput('current-tag', p.current.tag)\n  core.setOutput('current-sha', p.current.sha)\n\n  core.setOutput('previous-version', version.toString(p.previous.v))\n  core.setOutput('previous-tag', p.previous.tag)\n  core.setOutput('previous-sha', p.previous.sha)\n\n  core.setOutput('latest-version', version.toString(p.latest.v))\n  core.setOutput('latest-tag', p.latest.tag)\n  core.setOutput('latest-sha', p.latest.sha)\n\n  core.setOutput('is-release', p.isRelease)\n  core.setOutput('is-branch-head', p.isBranchHead)\n  core.setOutput('is-latest-version', p.isLatestVersion)\n  core.setOutput('is-latest-major', p.isLatestMajor)\n}\n\nasync function detectVersions(): Promise<void> {\n  // Read inputs\n  const fetchDepth: number = parseInt(core.getInput('fetch-depth'))\n  const branchVersioning: string = core.getInput('branch-versioning')\n\n  if (branchVersioning !== '') {\n    await loadBranchVersions(branchVersioning)\n    return\n  }\n\n  await loadTagVersions(fetchDepth)\n}\n\nasync function run(): Promise<void> {\n  try {\n    await detectVersions()\n  } catch (error) {\n    if (error instanceof Error) {\n      core.setFailed(error.message)\n      return\n    }\n\n    throw error\n  }\n}\n\nrun()\n// loadTagVersions(200)\n"],"names":["__createBinding","this","o","m","k","k2","desc","__setModuleDefault","v","__importStar","mod","result","git_1","git","fetch","revList","describe","lsRemote","tag","resolveRef","fetchTags","listCommitTags","countCommits","currentTag","latestTag","previousTag","ensureHistorySize","exec","require$$0","args","execResult","cmd","exitCode","stderr","opts","revListStr","lsRemoteResult","line","parts","ref","remote","tagsListStr","from","to","minCommits","string","countOccurrences","str","substr","index","startIndex","searchStrLen","count","version","parse","compare","toString","sanitize","toSemver","semver","isNumber","n","sv","minor","parse_suffix","patch","value","a","b","trySanitize","versionString","regex","sanitized","i","vString","main","version_1","require$$1","require$$2","getVersions","tags","latestVersionTag","versionsList","isBranchHead","refType","currentSha","eventName","refName","isLatestMajor","knownVersions","current","allVersions","sortTagsBySemver","prepareRepository","depth","genDevVersion","baseVersion","baseRef","currentRefName","sanitizedRefName","loadBranchVersions","targetBranch","runNumber","currentVersionStr","currentVersion","isRelease","utils.isBranchHead","setOutputs","getSanitizedVersion","originalVersion","loadTagVersions","utils.getVersions","utils.latestVersionTag","latestSha","latestVersion","previousValidTag","utils.sortTagsBySemver","prevTag","prevSha","prevVersion","curSha","curTag","curVersion","potentialCurVersion","error","core","utils.isLatestMajor","p","detectVersions","fetchDepth","branchVersioning","run"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}