name: Scan existing images in docker repository
author: 'MiLaboratories'
description: |
  Scan images in docker repository.
  If no tag is set, lists and scans all registry tags.

inputs:
  #
  # Scan target settings
  #
  registry:
    description: |
      Docker registry (i.e. quay.io, containers.pl-open.science and so on)
    required: true
  repository:
    description: |
      Repository inside the registry (i.e. milaboratories/pl-containers)
    required: true

  mode:
    description: |
      Planning parallel scan or start the scanner.
       - 'scan' - start the scanner
       - 'plan' - plan the scan
    default: 'scan'
    required: false

  ignore-list:
    description: |
      Do not scan images listed in given files for CVEs.
      For file path:
        Each line in a file is expected to be a full image tag.
        I.e. containers.pl-open.science/milaboratories/pl-containers:milaboratories.software-pframes-conv.main.376ca2add55b
        Empty lines and lines starting with '#' are ignored.

      For directory path:
        All files in directory are expected to have valid format, as described above.
        Duplicate items in several files are not a problem.
    required: false
    default: ''

  tags:
    description: |
      Tags to scan. Empty value starts all tags scanning within limit.
      Each tag is expected to be on a separate line.
    required: false
    default: ''
  tag-file:
    description: |
      File with tags to scan. Each tag is expected to be on a separate line.
      Empty lines and lines starting with '#' are ignored.
    required: false
    default: ''
  limit:
    description: |
      Limit number of images to scan. Empty value = 'no limit'.
      Use for test purposes only, there is no sence for this in production.
    required: false
    default: ''

  #
  # Scan settings
  #
  pkg-types:
    description: |
      Type of packages to scan.
    required: false
    default: 'os,library'
  scanners:
    description: |
      Scanners to use.
    required: false
    default: 'vuln,secret,misconfig'
  severity:
    description: |
      Severity of vulnerabilities to scan.
    required: false
    default: 'HIGH,CRITICAL'
  ignore-unfixed:
    description: |
      Ignore unfixed vulnerabilities.
    required: false
    default: 'false'

  #
  # Report settings
  #
  report-format:
    description: |
      Format of the report.
    required: false
    default: 'json'

outputs:
  report-file:
    description: |
      Scan report file path.
    value: ${{ steps.init.outputs.report-file }}
  skipped-list-file:
    description: |
      List of skipped images.
    value: ${{ steps.init.outputs.skipped-list-file }}

runs:
  using: "composite"

  steps:
    - name: Install Trivy
      id: init
      shell: bash
      env:
        ACTION_PATH: ${{ github.action_path }}
        WORKSPACE_PATH: ${{ runner.workspace }}
      run: |
        trivy_dir="${WORKSPACE_PATH}/trivy"
        mkdir -p "${trivy_dir}"
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh |
          sh -s -- -b "${trivy_dir}"
        # to fix the version used, put it as a value after trivy_dir, i.e. '-b "${trivy_dir}" v0.67.0'

        trivy_bin="${trivy_dir}/trivy"
        report_file="${trivy_dir}/report-file"
        skipped_file="${trivy_dir}/skipped-file"

        "${trivy_bin}" version

        echo "trivy=${trivy_bin}" >> "${GITHUB_OUTPUT}"
        echo "report-file=${report_file}" >> "${GITHUB_OUTPUT}"
        echo "skipped-file=${skipped_file}" >> "${GITHUB_OUTPUT}"

    - name: Post save report
      uses: milaboratory/github-ci/actions/post/artifact@v4-beta
      with:
        name: trivy-report
        archive: true
        path: |
          ${{ steps.init.outputs.report-file }}
          ${{ steps.init.outputs.skipped-file }}

    - name: Scan images
      id: scan-images
      shell: bash
      env:
        ACTION_PATH: ${{ github.action_path }}

        # Debug options
        SCAN_IMAGES_LIMIT: ${{ inputs.limit }}

        # Script options
        REGISTRY: ${{ inputs.registry }}
        REPOSITORY: ${{ inputs.repository }}
        IGNORE_LIST: ${{ inputs.ignore-list }}

        TAGS: ${{ inputs.tags }}
        TAG_FILE: ${{ inputs.tag-file }}

        SKIPPED_LIST_FILE: ${{ steps.init.outputs.skipped-file }}

        TRIVY_BIN: ${{ steps.init.outputs.trivy }}
        PKG_TYPES: ${{ inputs.pkg-types }}
        SCANNERS: ${{ inputs.scanners }}
        SEVERITY: ${{ inputs.severity }}
        IGNORE_UNFIXED: ${{ inputs.ignore-unfixed }}

        REPORT_FORMAT: ${{ inputs.report-format }}
        REPORT_FILE: ${{ steps.init.outputs.report-file }}
      run: |
        "${ACTION_PATH}/scan-images.sh" "${REGISTRY}" "${REPOSITORY}" "${TAGS}"
