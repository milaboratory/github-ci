name: Launch the Platforma container using Docker Compose
author: 'MiLaboratories'
description: |
  Launch the Platforma container using Docker Compose.

  Requirements:
    - get authorization token for aws ecr (aws-actions/amazon-ecr-login)

inputs:
  pl-docker-registry:
    description: |
      Platforma docker registry.
    required: false
    default: '511903394050.dkr.ecr.eu-central-1.amazonaws.com/pl'
  pl-docker-tag:
    description: |
      Platforma docker tag.
    required: false
    default: 'main'
  pl-sleep-time:
    description: |
      The waiting period after the Platforma starts.
    required: false
    default: '1'
  pl-test-assets-dir:
    description: |
      Platforma test assets directory;
      this directory will be mounted inside
      the container under the path `/storage/controllers/file/library`
      The path must be relative to github.workspace
      and will be appended to github.workspace within the docker compose action.
    required: false
    default: 'assets'
  pl-log-dir:
    description: |
      Platforma logs directory on the agent;
      this directory will be mounted inside
      the container under the path. `pl-log-destination`
      The path must be relative to github.workspace.
      If not provided, a temporary directory will be created.
    required: false
  pl-log-level:
    description: |
      Platforma log level
    required: false
    default: 'info'
  pl-auth-enabled:
    description: |
      Whether or not to enable authentication in the Platforma.
    required: false
    default: 'true'

outputs:
  pl-log-dir:
    description: 'Path to platforma log directory'
    value: ${{ steps.launch-pl.outputs.pl-log-dir }}
  pl-db-dir:
    description: 'Path to platforma db directory'
    value: ${{ steps.launch-pl.outputs.pl-db-dir }}
  pl-work-dir:
    description: 'Path to platforma work directory'
    value: ${{ steps.launch-pl.outputs.pl-work-dir }}

runs:
  using: "composite"

  steps:
    - name: Install Docker Compose
      uses: milaboratory/github-ci/actions/shell@v4
      with:
        run: |
          echo "Installing Docker Compose..."
          ARCH=$(uname -m)
          DOCKER_ARCH=""

          if [ "$ARCH" = "x86_64" ]; then
            DOCKER_ARCH="x86_64"
          elif [ "$ARCH" = "aarch64" ]; then
            DOCKER_ARCH="aarch64"
          else
            echo "Unsupported architecture: $ARCH"
            exit 1
          fi

          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-${DOCKER_ARCH}" -o "$DOCKER_CONFIG/cli-plugins/docker-compose"
          chmod +x "$DOCKER_CONFIG/cli-plugins/docker-compose"
          docker compose version

    - name: Launch Platforma
      id: launch-pl
      shell: bash
      env:
        PL_DOCKER_REGISTRY: ${{ inputs.pl-docker-registry }}
        PL_DOCKER_TAG: ${{ inputs.pl-docker-tag }}
        PL_TEST_ASSETS_DIR: ${{ format('{0}/{1}', github.workspace, inputs.pl-test-assets-dir) }}
        PL_LOG_DIR_INPUT: ${{ inputs.pl-log-dir }}
        PL_LOG_LEVEL: ${{ inputs.pl-log-level }}
        PL_SLEEP_TIME: ${{ inputs.pl-sleep-time }}
        PL_AUTH_ENABLED: ${{ inputs.pl-auth-enabled }}
        PL_WORKSPACE: ${{ github.workspace }}
      run: |
        # Just in case if there are no test assets in the repository
        mkdir -pv "${PL_TEST_ASSETS_DIR}"
        export TMPDIR="${PL_WORKSPACE}/tmp"
        mkdir -pv "${TMPDIR}"

        export PL_LOG_DIR
        if [ -n "${PL_LOG_DIR_INPUT}" ]; then
          PL_LOG_DIR="${PL_WORKSPACE}/${PL_LOG_DIR_INPUT}"
          mkdir -pv "${PL_LOG_DIR}"
        else
          PL_LOG_DIR="$(mktemp -d)"
        fi
        echo "pl-log-dir=${PL_LOG_DIR}" >> "${GITHUB_OUTPUT}"

        export PL_DB_DIR
        PL_DB_DIR="$(mktemp -d)"
        echo "pl-db-dir=${PL_DB_DIR}" >> "${GITHUB_OUTPUT}"

        export PL_WORK_DIR
        PL_WORK_DIR="$(mktemp -d)"
        echo "pl-work-dir=${PL_WORK_DIR}" >> "${GITHUB_OUTPUT}"

        docker compose --file ${{ github.action_path }}/docker-compose.yaml up --detach --force-recreate

        echo "Wait for the Platforma to start"
        sleep "${PL_SLEEP_TIME}"