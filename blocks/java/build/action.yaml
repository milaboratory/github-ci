name: Build Java project using gradle
author: 'MiLaboratories'
description: |
  Build Java project with gradle.

  This action cares about caching and re-using build results and
  uploading selected build results into GitHub Actions artifacts storage.

  Requirements:
    - initialized context (actions/context/init)

inputs:
  #
  # Build control
  #
  project:
    description: |
      Gradle project name to build _without_ task name:
        gradle :<project>:<task>
      For 'root' project just leave input empty

    required: false
    default: ''

  project-dir:
    description: |
      Path to project root directory.
      Defaults to repository root.
    required: false
    default: './'

  tasks:
    description: |
      Gradle build tasks.
      You can put several tasks here (one per line).
      Each task will be prefixed with <project> name:
        gradle :<project>:<task>

    required: false
    default: build

  exclude-tasks:
    description: |
      Tasks to skip (--exclude-task options).
      You can put several tasks here (one per line).
      Each task will be prefixed with <project> name:
        gradle :<project>:<task>

    required: false
    default: ''

  custom-arguments:
    description: |
      Custom arguments for gradle command.
      Each line is considered as single argument:
          '-b <file>'
        on single line will cause error. Put
          '-b
           <file>' to get what you want.

    required: false
    default: ''

  #
  # Obfuscation report upload control
  #
  cdn-url:
    description: |
      Main part of the CDN URL.
    required: false
    default: 'https://cdn.milaboratory.com'
  upload-obfuscation-mapping:
    description: |
      Set it to 'false' if you want to skip obfuscation mapping upload steps
    required: false
    default: 'false'
  s3-bucket:
    description: |
      S3 bucket to use for obfuscation mapping
    required: false
    default: 'milaboratory-artefacts-public-files'
  s3-path-prefix:
    description: |
      Prefix for all uploaded obfuscation mapping files.
      Obfuscation mapping file will be uploaded to:
        's3://<bucket>/<path-prefix>/<repository>/<hash>-<run-number>-<random-str>/obfuscation'

    required: false
    default: 'cdn/internal/ci'

  #
  # Environment control
  #
  java-version:
    description: |
      Version of JAVA to use for build.

      Empty value makes action to skip environment preparation step.
    required: false
    default: ''

  java-distribution:
    description: |
      Java distribution to use.
      Example: 'temurin', 'zulu', ...
      See 'https://github.com/actions/setup-java#supported-distributions'
      for complete list of supported distributions.
    required: false
    default: 'temurin'

  properties:
    description: |
      Contents for '~/.gradle/gradle.properties' to be set before gradle command run.

      Empty value makes actions to keep '~/.gradle/gradle.properties' file intact.
    required: false
    default: ''

  #
  # Cache gradle control
  #
  gradle-cache-read-only:
    description: |
      When 'true', existing entries will be read from the cache but no entries will be written.
      By default this value is 'false' for workflows on the GitHub default branch and 'true' for workflows on other branches.
    required: false
    default: ${{ github.event.repository != null && github.ref_name != github.event.repository.default_branch }}
  gradle-cache-write-only:
    description: |
      When 'true', entries will not be restored from the cache but will be saved at the end of the Job.
      Setting this to 'true' implies cache-read-only will be 'false'.
    required: false
    default: 'false'
  gradle-home-cache-includes:
    description: Paths within Gradle User Home to cache.
    required: false
    default: |
      caches
      notifications
  gradle-home-cache-excludes:
    description: Paths within Gradle User Home to exclude from cache.
    required: false

  #
  # Data cache control
  #

  data-cache-key:
    description: |
      Key to use for custom build data caching.

      Both <data-cache-key> and <data-cache-paths> are
      required for feature to work.

      Some builds produce project-specific data as a build result,
      This data can be re-used in subsequent builds.
    required: false
    default: ''

  data-cache-paths:
    description: |
      Additional paths to cache between runs.

      Both <data-cache-key> and <data-cache-paths> are
      required for feature to work.

      Some builds produce project-specific data as a build result,
      This data can be re-used in subsequent builds.
    required: false
    default: ''

  #
  # Artifact control
  #
  artifact-name:
    description: |
      Name of build artifact to create when <artifact-paths> input is not empty

    required: false
    default: 'build-artifacts'

  artifact-paths:
    description: |
      List of paths to artifacts to save after build run.
      Empty list disables artifacts upload.

      Relative paths are relative to gradle 'buildDir' project's property.
      Absolute paths (starting with '/') are relative to repository root.
      Patterns ('*', '**', etc.) are supported.

    required: false
    default: ''

  artifact-retention:
    description: |
      Time in days to keep build artifacts before removing them
    required: false
    default: '7'

outputs:
  obfus-mapping-url:
    description: |
      CDN link to uploaded obfuscation mapping file
    value: ${{ steps.upload-mapping.outputs.obfus-mapping-link }}

runs:
  using: "composite"

  steps:
    - id: context
      uses: milaboratory/github-ci/actions/context@v4-beta

    - name: Prepare env for Java application build
      if: inputs.java-version != ''
      uses: actions/setup-java@v3
      with:
        distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}

    - name: Restore data cache
      if:  inputs.data-cache-paths != ''
        && inputs.data-cache-key != ''

      uses: actions/cache@v3
      with:
        key: ${{ inputs.data-cache-key }}
        path: ${{ inputs.data-cache-paths }}

    - name: Set gradle.properties
      if: inputs.properties != ''
      uses: milaboratory/github-ci/actions/java/gradle/properties/set@v4-beta
      with:
        properties: |
          ${{ inputs.properties }}
          miRepoAccessKeyId=${{ env.AWS_ACCESS_KEY_ID }}
          miRepoSecretAccessKey=${{ env.AWS_SECRET_ACCESS_KEY }}
          miRepoSessionToken=${{ env.AWS_SESSION_TOKEN }}

    - name: Generate list of tasks to exclude
      id: excludes
      uses: milaboratory/github-ci/actions/strings/prefix@v4-beta
      with:
        input: ${{ inputs.exclude-tasks }}
        prefix: |-
          --exclude-task
          ${{ inputs.project && format(':{0}:', inputs.project) || ':' }}

    - name: Generate build tasks
      id: tasks
      uses: milaboratory/github-ci/actions/strings/prefix@v4-beta
      with:
        input: ${{ inputs.tasks }}
        prefix: ${{ inputs.project && format(':{0}:', inputs.project) || ':' }}

    - name: Build project
      uses: milaboratory/github-ci/actions/java/gradle/gradlew@v4-beta
      with:
        build-root-directory: ${{ inputs.project-dir }}
        gradle-home-cache-includes: ${{ inputs.gradle-home-cache-includes }}
        gradle-home-cache-excludes: ${{ inputs.gradle-home-cache-excludes }}
        cache-read-only: ${{ inputs.gradle-cache-read-only }}
        cache-write-only: ${{ inputs.gradle-cache-write-only }}
        arguments: |-
          -Pmi-ci=true
          -Pmi-release=${{ steps.context.outputs.is-release }}
          -Pversion=${{ steps.context.outputs.current-version }}
          ${{ steps.excludes.outputs.result }}
          ${{ inputs.custom-arguments }}
          ${{ steps.tasks.outputs.result }}

    - name: Read actual project properties
      id: gradle-props
      uses: milaboratory/github-ci/actions/java/gradle/properties/read@v4-beta
      with:
        project-dir: ${{ inputs.project-dir }}
        project-name: ${{ inputs.project }}

    - name: Generate artifacts paths
      id: artifact-paths
      uses: milaboratory/github-ci/actions/strings/convert-paths@v4-beta
      with:
        rel-root: ${{ steps.gradle-props.outputs.buildDir }}/
        abs-root: .
        paths: ${{ inputs.artifact-paths }}

    - name: Save build artifacts
      if: steps.artifact-paths.outputs.result != ''
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ steps.artifact-paths.outputs.result }}
        retention-days: ${{ inputs.artifact-retention }}

    - uses: milaboratory/github-ci/actions/shell@v4-beta
      if: inputs.upload-obfuscation-mapping
      with:
        dump-stdout: false
        run: |
          rand="$(
            shasum - <<<"${RANDOM}${RANDOM}${RANDOM}" |
              awk '{print $1}'
          )"
          OBFUS_MAPPING_S3_PATH="${GITHUB_REPOSITORY}/${GITHUB_SHA}-${GITHUB_RUN_NUMBER}-${rand:0:15}/obfuscation"

          ghwa_add_mask "${OBFUS_MAPPING_S3_PATH}"
          ghwa_set_env "OBFUS_MAPPING_S3_PATH" "${OBFUS_MAPPING_S3_PATH}"

    - uses: milaboratory/github-ci/actions/shell@v4-beta
      id: should-upload
      if: inputs.upload-obfuscation-mapping
      env:
        UPLOAD_ENABLED: ${{ inputs.upload-obfuscation-mapping }}
        BUILD_DIR: ${{ steps.gradle-props.outputs.buildDir }}
        OBFUS_MAPPING_FILE: 'proguard-mapping.txt'
      with:
        dump-stdout: false
        run: |
          if [ "${UPLOAD_ENABLED}" != 'true' ]; then
            exit 0
          fi

          OBFUS_MAPPING_LOCAL_PATH="${BUILD_DIR}/${OBFUS_MAPPING_FILE}"
          OBFUS_MAPPING_LINK="${CDN_URL}/${_S3_PATH_PREFIX}/${OBFUS_MAPPING_S3_PATH}/${OBFUS_MAPPING_FILE}"

          if ! [ -e "${OBFUS_MAPPING_LOCAL_PATH}" ]; then
            echo "Obfuscation mapping file '<build dir>/mapping-file' does not exist, nothing to upload."
            exit 0
          fi

          ghwa_set_env "OBFUS_MAPPING_LOCAL_PATH" "${OBFUS_MAPPING_LOCAL_PATH}"
          ghwa_set_env "UPLOAD_MAPPING" "true"

    - uses: milaboratory/github-ci/actions/shell@v4-beta
      id: upload-mapping
      if: always() && env.UPLOAD_MAPPING == 'true'
      with:
        dump-stdout: false
        run: |
          _S3_PATH_PREFIX=$(echo "${{ inputs.s3-path-prefix }}" | cut -d '/' -f 2-)
          _OBFUS_MAPPING_FILE=$(basename "${OBFUS_MAPPING_LOCAL_PATH}")
          OBFUS_MAPPING_LINK="${{ inputs.cdn-url }}/${_S3_PATH_PREFIX}/${OBFUS_MAPPING_S3_PATH}/${_OBFUS_MAPPING_FILE}"

          aws s3 cp --quiet \
          ${OBFUS_MAPPING_LOCAL_PATH} \
          s3://${{ inputs.s3-bucket }}/${{ inputs.s3-path-prefix }}/${OBFUS_MAPPING_S3_PATH}

          ghwa_add_mask "${OBFUS_MAPPING_LINK}"
          ghwa_set_output "obfus-mapping-link" "${OBFUS_MAPPING_LINK}"