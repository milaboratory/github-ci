name: Run pnpm tests against the Platform running in docker on Linux
author: 'MiLaboratories'
description: |
  Run npm tests against the Platform running in docker on Linux

  Prepare agent for running tests for the Platform on Linux.
  Install NodeJS specific version, cache dependencies.
  Launch the Platforma container using Docker Compose

inputs:
  test-script-name:
    description: |
      Test command.
    required: false

  test-dry-run-script-name:
    description: |
      Test command to run for dry-run.
    required: false

  test-skip-dry-run:
    description: |
      Skip test dry run step
    required: false
    default: 'false'

  pnpm-recursive-tests:
    description: |
      Run pnpm tests with -r flag.
    required: true

  pnpm-tests-args:
    description: |
      Additional pnpm tests arguments to pass
      for none --recursive pnpm invocations.
    required: false

  npmrc-config:
    description: |
      Generates a .npmrc file based on provided configuration.
    required: false

  pl-start-service:
    description: |
      Start Platforma Backend service before tests
    required: false
    default: 'true'

  pl-docker-registry:
    description: |
      Platforma docker registry.
    required: false

  pl-docker-tag:
    description: |
      Platforma docker tag.
    required: false

  pl-test-assets-dir:
    description: |
      Platforma test assets directory;
      this directory will be mounted inside
      the container under the path `/storage/controllers/file/library`
      The path must be relative to github.workspace
      and will be appended to github.workspace within the docker compose action.
    required: false
    default: 'assets'

  pl-log-level:
    description: |
      Platforma log level
    required: false
    default: 'info'

runs:
  using: "composite"
  steps:
    - name: Run turbo tests dry-run
      uses: milaboratory/github-ci/actions/shell@v4-beta
      if: inputs.test-skip-dry-run != 'true'
      env:
        TEST_DRY_RUN: ${{ inputs.test-dry-run-script-name }}
      with:
        run: |
          pnpm run "${TEST_DRY_RUN}" > ./test-dry-run.json
          SKIP_TESTS=$(tail -n +5 ./test-dry-run.json | jq '.tasks | map(select(.task == "test")) | all((.cache.status == "HIT") or (.cache.status == "MISS" and .command == "<NONEXISTENT>"))')
          STATS=$(tail -n +5 ./test-dry-run.json | jq '.tasks | map(select(.task == "test")) | map(.cache.status) | reduce .[] as $status ({HIT: 0, MISS: 0}; .[$status] += 1)')
          STATS_FULL=$(tail -n +5 ./test-dry-run.json | jq -r ' .tasks | map(select(.task == "test")) | sort_by(if .cache.status == "HIT" then 0 elif .cache.status == "MISS" and .command == "<NONEXISTENT>" then 1 else 2 end) | .[] | "\(.package): \(.cache.status) (command: \(.command))"')
          echo "Stats: ${STATS}"
          echo "Skip tests: ${SKIP_TESTS}"
          echo "Stats full: ${STATS_FULL}"
          if [ "${SKIP_TESTS}" == "true" ]; then
            echo "Tests are cached, skipping"
            ghwa_set_env "SKIP_TESTS" "${SKIP_TESTS}"
            exit 0
          fi

    - uses: milaboratory/github-ci/actions/docker/pl-compose@v4-beta
      if: inputs.pl-start-service != 'false' && (env.SKIP_TESTS != 'true' || inputs.test-skip-dry-run == 'true')
      id: pl-compose
      with:
        pl-docker-registry: ${{ inputs.pl-docker-registry }}
        pl-docker-tag: ${{ inputs.pl-docker-tag }}
        pl-test-assets-dir: ${{ inputs.pl-test-assets-dir }}
        pl-log-level: ${{ inputs.pl-log-level }}

    - name: Run test - ${{ inputs.test-script-name}}
      if: inputs.pl-start-service != 'false' && (env.SKIP_TESTS != 'true' || inputs.test-skip-dry-run == 'true')
      env:
        PNPM_R: ${{ inputs.pnpm-recursive-tests }}
        PNPM_ARGS: ${{ inputs.pnpm-tests-args }}
      shell: bash
      run: |
        if [ "${PNPM_R}" == "true" ];then
          pnpm run -r ${{ inputs.test-script-name }}
        else
          set_args=()
          while read -r _set_args; do
          if [ -n "${_set_args}" ]; then
            set_args+=( "${_set_args}" )
          fi
          done <<<"${PNPM_ARGS}"

          pnpm run ${{ inputs.test-script-name }} "${set_args[@]}"
        fi

    - name: Restore assets ownership
      if: always() && inputs.pl-start-service != 'false' && (env.SKIP_TESTS != 'true' || inputs.test-skip-dry-run == 'true')
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        PL_ASSETS_DIR: ${{ format('{0}/{1}',  github.workspace, inputs.pl-test-assets-dir) }}
      with:
        dump-stdout: false
        run: |
          user_name="$(whoami)"
          sudo chown -R "${user_name}:${user_name}" "${PL_ASSETS_DIR}"
