name: Build the Platform on Unix/Linux
author: 'MiLaboratories'
description: |
  Build the Platform

  Prepare agent for building the Platform on Unix/Linux.
  Install Golang specific version, cache dependencies, re-use build results

inputs:
  build-command:
    description: |
      Build command (initiate build for the platform).
    required: false
    default: 'go build .'
  build-path:
    description: |
      The path where the build command will be run.
    required: false
    default: ${{ github.workspace }}
  build-archive-path:
    description: |
      The path to files to save as build artifact. The script will upload the resulting archive to s3.
      If this is empty, then the build-path will be used instead.
    required: false
    default: ''
  build-archive-name:
    description: |
      The name of the archive with build results.
      For Windows use .zip extension for MacOS/Linux tar.gz or .tgz extension.
    required: false
    default: 'pl.tgz'
  build-archive-additional-source-files:
    description: |
      Additional folders/paths to add to the resulting build archive.
      The script will add these paths in addition to build-archive-path.
    required: false
  build-archive-include-patterns:
    description: |
        The list of patterns to include in the resulting build archive.
    required: false
  build-archive-exclude-patterns:
    description: |
      The list of patterns to exclude from the resulting build archive.
    required: false
    default: |
      *.go
      *.sum
  ext-programs-path:
    description: |
      The external_programs bootstrap script path.
    required: false
    default: 'external_programs'
  ext-programs-script-name:
    description: |
      The name of the bootstrap script.
    required: false
    default: 'download.sh'
  bootstrap-ci-script-name:
    description: |
      Bootstrap CI script name (install go modules, C++ libraries, binary tools, etc).
    required: true
    default: 'bootstrap-ci.sh'
  golang-version:
    description: |
      Golang version to use.
      Examples: '1.19', '1.20'
    required: true
  cache-version:
    description: |
      Simple hack, that allows to 'reset' cache for particular job.

      Just change the value of this parameter and the next run will
      not find build cache and will have to start from scratch.

    required: false
    default: 'v1'
  build-cache-paths:
    description: |
      List of paths to files or folders to restore/cache before/after each integration tests run.
    required: false
    default: ''
  build-cache-key:
    description: |
      Key for additional integration tests cache.
      Must be used in conjunction with <build-cache-paths>
    required: false
    default: ''
  cdn-url:
    description: |
      CDN url for Static and Shared RockDB Libs.
    required: false
    default: 'https://cdn.mixcr.com/internal/pkgs'

  #
  # Github authentication control
  #
  github-token:
    description: |
      Github token to authorize git operation in the same repository as the workflow.
    required: true
  #
  # Artifact control
  #
  github-artifact-name:
    description: |
      Name of build artifact to create when <artifact-paths> input is not empty.

    required: false
    default: 'build-artifacts'
  github-artifact-retention:
    description: |
      Time in days to keep build artifacts before removing them.
    required: false
    default: '7'

runs:
  using: "composite"

  steps:
    - name: Prepare environment for building a golang application
      uses: milaboratory/github-ci/actions/golang/prepare@v4-beta
      with:
        golang-version: ${{ inputs.golang-version }}
        cache-version: ${{ inputs.cache-version }}

    - uses: milaboratory/github-ci/actions/git/auth@v4-beta
      with:
        github-token: ${{ inputs.github-token }}

    - name: Restore custom cache
      if: inputs.build-cache-paths != '' && inputs.build-cache-key != ''
      uses: actions/cache@v3
      with:
        key: ${{ inputs.build-cache-key }}
        path: ${{ inputs.build-cache-paths }}

    - name: Get runner metadata
      id: get_runner_metadata
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        PL_BUILD_PATH: ${{ inputs.build-path || github.workspace }}
        PL_BUILD_ARCHIVE_PATH: ${{ inputs.build-archive-path }}
        PL_EXT_PROGRAMS_PATH: ${{ inputs.ext-programs-path }}
      with:
        run: |
          PL_BUILD_PATH_SANITIZED=$(mish_sanitized "${PL_BUILD_PATH}")
          PL_BUILD_ARCHIVE_PATH_SANITIZED=$(mish_sanitized "${PL_BUILD_ARCHIVE_PATH}")
          PL_EXT_PROGRAMS_PATH_SANITIZED=$(mish_sanitized "$PL_EXT_PROGRAMS_PATH")

          if [ "${PL_BUILD_PATH_SANITIZED}" == "${GITHUB_WORKSPACE}" ];then
            PL_BUILD_PATH="${GITHUB_WORKSPACE}"
          else
            PL_BUILD_PATH="${GITHUB_WORKSPACE}/${PL_BUILD_PATH_SANITIZED}"
          fi

          if [ -z "${PL_BUILD_ARCHIVE_PATH_SANITIZED}" ];then
            PL_BUILD_ARCHIVE_PATH="${PL_BUILD_PATH}"
          else
            PL_BUILD_ARCHIVE_PATH="${GITHUB_WORKSPACE}/${PL_BUILD_ARCHIVE_PATH_SANITIZED}"
          fi

          if [ -z "${PL_EXT_PROGRAMS_PATH_SANITIZED}" ];then
            echo "ext-programs-path cannot be empty."
            exit 1
          else
            PL_EXT_PROGRAMS_PATH="${GITHUB_WORKSPACE}/${PL_EXT_PROGRAMS_PATH_SANITIZED}"
          fi

          PL_ROCKSDB_LIBS_PATH="${PL_EXT_PROGRAMS_PATH}/rocksdb-ci-libs"

          # set outputs
          ghwa_set_output pl_build_path "${PL_BUILD_PATH}"
          ghwa_set_output pl_build_archive_path "${PL_BUILD_ARCHIVE_PATH}"
          ghwa_set_output pl_ext_programs_path "${PL_EXT_PROGRAMS_PATH}"

          # set envs
          ghwa_set_env PKG_CONFIG_PATH "${PL_ROCKSDB_LIBS_PATH}/lib/pkgconfig"

          if [ "${RUNNER_OS}" == "macOS" ];then
            ghwa_set_env DYLIBBUNDLER_SEARCH_LIB_PATH "${PL_ROCKSDB_LIBS_PATH}/lib"
          elif [ "${RUNNER_OS}" == "Linux" ];then
            ghwa_set_env LD_LIBRARY_PATH "${PL_ROCKSDB_LIBS_PATH}/lib"
          else
            echo "Neither: MacOS, nor Linux. Runner OS is: ${RUNNER_OS}."
            exit 1
          fi

    - name: Run boostrap ci script
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        CI_SCRIPT: ${{ inputs.bootstrap-ci-script-name }}
      with:
        run: |
          if [ -x "${CI_SCRIPT}" ];then
            "./${CI_SCRIPT}"
          else
            printf "File: %s doesn't exist or it's not executable." "${CI_SCRIPT}"
            exit 1
          fi

    - name: Run build command for the platform
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        BUILD_PATH: ${{ fromJSON(steps.get_runner_metadata.outputs.data).pl_build_path }}
        BUILD_COMMAND: ${{ inputs.build-command }}
      with:
        dump-stdout: false
        run: |
            cd "${BUILD_PATH}"
            if [ -x "${BUILD_COMMAND}" ];then
              "./${BUILD_COMMAND}"
            else
              ${{ inputs.build-command }}
            fi

    - name: Run bundle dylibs on macOS
      if: startsWith(runner.os, 'macOS')
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        BUILD_ARCHIVE_PATH: ${{ fromJSON(steps.get_runner_metadata.outputs.data).pl_build_archive_path }}
      with:
        dump-stdout: false
        run : |
          cd "${BUILD_ARCHIVE_PATH}"
          dylibbundler \
            --bundle-deps \
            --create-dir \
            --dest-dir ./libs \
            --install-path '@executable_path/libs/' \
            --search-path "${DYLIBBUNDLER_SEARCH_LIB_PATH}" \
            --fix-file pl

    - name: Add external programs download script
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        BUILD_ARCHIVE_PATH: ${{ fromJSON(steps.get_runner_metadata.outputs.data).pl_build_archive_path }}
        EXT_PROGRAMS_PATH: ${{ fromJSON(steps.get_runner_metadata.outputs.data).pl_ext_programs_path }}
        EXT_PROGRAMS_SCRIPT_NAME: ${{ inputs.ext-programs-script-name }}
      with:
        dump-stdout: false
        run: |
          if [ -f "${EXT_PROGRAMS_PATH}/${EXT_PROGRAMS_SCRIPT_NAME}" ];then
            cp -v "${EXT_PROGRAMS_PATH}/${EXT_PROGRAMS_SCRIPT_NAME}" "${BUILD_ARCHIVE_PATH}/"
          else
            # softfail
            echo "${EXT_PROGRAMS_PATH}/${EXT_PROGRAMS_SCRIPT_NAME} script not found"
            exit 0
          fi

    - name: Add build results to the archive
      uses: milaboratory/github-ci/actions/create-archive@v4-beta
      env:
        BUILD_ARCHIVE_PATH: ${{ fromJSON(steps.get_runner_metadata.outputs.data).pl_build_archive_path }}
      with:
        source-files: |
          ${{ env.BUILD_ARCHIVE_PATH }}
          ${{ inputs.build-archive-additional-source-files }}
        include-patterns: |
          ${{ inputs.build-archive-include-patterns }}
        exclude-patterns: |
          ${{ inputs.build-archive-exclude-patterns }}
        archive-name: ${{ inputs.build-archive-name }}

    - name: Save build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.github-artifact-name }}
        path: |
          ${{ inputs.build-archive-name }}
          !**/*.go
        retention-days: ${{ inputs.github-artifact-retention }}
