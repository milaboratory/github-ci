name: Build the Platform on Linux
author: 'MiLaboratories'
description: |
  Build the Platform

  Prepare agent for building the Platform on Linux.
  Install Golang specific version, cache dependencies, re-use build results

inputs:
  build-command:
    description: |
      Build command (initiate build for the platform)
    required: false
    default: 'go build .'
  build-path:
    description: |
      The path where the build command will run
    required: false
    default: 'platform/cmd/pl'
  bootstrap-ci-script-name:
    description: |
      Bootstrap CI script name (install go modules, C++ libraries, binary tools, etc)
    required: true
    default: 'bootstrap-ci.sh'
  pkg-config-path:
    description: |
      Path to pre-build libs for the rocksdb
    required: false
  golang-version:
    description: |
      Golang version to use.
      Examples: '1.19', '1.20'
    required: true
  cache-version:
    description: |
      Simple hack, that allows to 'reset' cache for particular job.

      Just change the value of this parameter and the next run will
      not find build cache and will have to start from scratch.

    required: false
    default: 'v1'
  build-cache-paths:
    description: |
      List of paths to files or folders to restore/cache before/after each integration tests run.
    required: false
    default: ''
  build-cache-key:
    description: |
      Key for additional integration tests cache.
      Must be used in conjunction with <build-cache-paths>
    required: false
    default: ''
  build-static:
    description: |
      Activate additional steps in workflow to build pl statically
    required: false
    default: 'false'
  #
  # Github authentication control
  #
  github-token:
    description: |
      Github token to authorize git operation in the same repository as the workflow.
    required: true
  #
  # Artifact control
  #
  artifact-name:
    description: |
      Name of build artifact to create when <artifact-paths> input is not empty

    required: false
    default: 'build-artifacts'
  artifact-paths:
    description: |
      List of paths to artifacts to save after build run.
      Paths are relative to github workspace (repository root).
      Patterns ('*', '**', etc.) are supported.
    required: false
    default: ''
  artifact-retention:
    description: |
      Time in days to keep build artifacts before removing them
    required: false
    default: '7'

runs:
  using: "composite"

  steps:
    - name: Prepare environment for building a golang application
      uses: milaboratory/github-ci/actions/golang/prepare@v4-beta
      with:
        golang-version: ${{ inputs.golang-version }}
        cache-version: ${{ inputs.cache-version }}

    - uses: milaboratory/github-ci/actions/git/auth@v4-beta
      with:
        github-token: ${{ inputs.github-token }}

    - name: Restore custom cache
      if: inputs.build-cache-paths != '' && inputs.build-cache-key != ''
      uses: actions/cache@v3
      with:
        key: ${{ inputs.build-cache-key }}
        path: ${{ inputs.build-cache-paths }}

    - name: Run boostrap ci script
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        CI_SCRIPT: ${{ inputs.bootstrap-ci-script-name }}
      with:
        run: |
          if [ -x "${CI_SCRIPT}" ];then
            "./${CI_SCRIPT}"
          else
            printf "File: %s doesn't exist or it's not executable." "${CI_SCRIPT}"
            exit 1
          fi

    - name: Run build command for the platform
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        BUILD_CMD: ${{ inputs.build-command }}
        BUILD_PATH: ${{ inputs.build-path }}
        BUILD_STATIC: ${{ inputs.build-static }}
      with:
        dump-stdout: false
        run: |
          if [ "${BUILD_STATIC}" == "true" ];then
            echo "Build static flag set to true"
            export PKG_CONFIG_PATH="${{ inputs.pkg-config-path }}/lib/pkgconfig"
            cd "${BUILD_PATH}" && ${{ inputs.build-command }}
          else
            echo "Build static flag set to false"
            cd "${BUILD_PATH}"
            ${{ inputs.build-command }}
          fi

    - name: Copy shared libs
      uses: milaboratory/github-ci/actions/shell@v4-beta
      if: inputs.build-static == 'false'
      env:
        BUILD_PATH: ${{ inputs.build-path }}
      with:
        dump-stdout: false
        run: |
          mkdir -p "${BUILD_PATH}/libs"
          ldd "${BUILD_PATH}/pl" | awk 'NF == 4 {system("cp -v " $3 " ${BUILD_PATH}/libs")}'

    - name: Add build results to the archive
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        BUILD_PATH: ${{ inputs.build-path }}
      with:
        dump-stdout: false
        run: |
          cd "${BUILD_PATH}"
          7z a pl.zip . '-xr!*.go' '-xr!*.zip' '-xr!*.sum' '-xr!*.mod'

    - name: Save build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact-name }}
        path: |
          ${{ inputs.artifact-paths }}
          !**/*.go
        retention-days: ${{ inputs.artifact-retention }}
