name: Run pnpm tests against the Platform running in docker on Linux
author: 'MiLaboratories'
description: |
  Run npm tests against the Platform running in docker on Linux

  Prepare agent for running tests for the Platform on Linux.
  Install NodeJS specific version, cache dependencies.
  Launch the Platforma container using Docker Compose

inputs:
  test-script-name:
    description: |
      Test command.
    required: false

  test-skip-dry-run:
    description: |
      Skip test dry run step
    required: false
    default: 'false'

  node-version:
    description: |
      Node version to use.
      Examples: '16.x', '14.x'
    required: true

  cache-version:
    description: |
      Simple hack, that allows to 'reset' cache for particular job.

      Just change the value of this parameter and the next run will
      not find build cache and will have to start from scratch.
    required: false
    default: 'v1'

  cache-hashfiles-search-path:
    description: |
      Hashfiles search path for pnpm-lock.yaml
    required: false
    default: 'pnpm-lock.yaml'

  pnpm-version:
    description: |
      Version of pnpm to install.
    required: false
    default: 'latest'

  pnpm-recursive-tests:
    description: |
      Run pnpm tests with -r flag.
    required: true

  pnpm-tests-args:
    description: |
      Additional pnpm tests arguments to pass
      for none --recursive pnpm invocations.
    required: false

  npmrc-config:
    description: |
      Generates a .npmrc file based on provided configuration.
    required: false

  pl-start-service:
    description: |
      Start Platforma Backend service before tests
    required: false
    default: 'true'

  pl-docker-registry:
    description: |
      Platforma docker registry.
    required: false

  pl-docker-tag:
    description: |
      Platforma docker tag.
    required: false

  pl-test-assets-dir:
    description: |
      Platforma test assets directory;
      this directory will be mounted inside
      the container under the path `/storage/controllers/file/library`
      The path must be relative to github.workspace
      and will be appended to github.workspace within the docker compose action.
    required: false
    default: 'assets'

  pl-log-dir:
    description: |
      Platforma logs directory on the agent;
      this directory will be mounted inside
      the container under the path. `pl-log-destination`
      The path must be relative to github.workspace
      and will be appended to github.workspace within the docker compose action.
    required: false
    default: 'log'

  pl-log-commit-summary:
    description: |
      Whether or not to log commit summary for Platforma.
    required: false
    default: 'true'

  pl-log-resource-data:
    description: |
      Whether or not to log resource data for Platforma.
    required: false
    default: 'true'

  pl-log-level:
    description: |
      Platforma log level
    required: false
    default: 'info'

  pl-auth-enabled:
    description: |
      Whether or not to enable authentication in the Platforma.
    required: false
    default: 'true'

runs:
  using: "composite"

  steps:
    - name: Prepare environment for building a NodeJS application
      uses: milaboratory/github-ci/actions/node/prepare-pnpm@v4-beta
      with:
        node-version: ${{ inputs.node-version }}
        cache-version: ${{ inputs.cache-version }}
        cache-hashfiles-search-path: ${{ inputs.cache-hashfiles-search-path }}
        pnpm-version: ${{ inputs.pnpm-version }}
        npmrc-config: ${{ inputs.npmrc-config }}

    - name: Install NodeJS packages with pnpm
      uses: milaboratory/github-ci/actions/shell@v4-beta
      with:
        run: |
          pnpm install --frozen-lockfile --prefer-offline

    - name: Run turbo tests dry-run
      if: inputs.test-skip-dry-run != 'true'
      uses: milaboratory/github-ci/actions/shell@v4-beta
      with:
        run: |
          pnpx turbo run test --dry-run=json --cache=remote:rw > ./test-dry-run.json
          SKIP_TESTS=$(jq '.tasks | map(select(.task == "test")) | all(.cache.status == "HIT")' ./test-dry-run.json)
          STATS=$(jq '.tasks | map(select(.task == "test")) | map(.cache.status) | reduce .[] as $status ({HIT: 0, MISS: 0}; .[$status] += 1)' ./test-dry-run.json)
          echo "Stats: ${STATS}"
          echo "Skip tests: ${SKIP_TESTS}"
          if [ "${SKIP_TESTS}" == "true" ]; then
            echo "Tests are cached, skipping"
            ghwa_set_env "SKIP_TESTS" "${SKIP_TESTS}"
            exit 0
          fi

    - uses: milaboratory/github-ci/actions/docker/pl-compose@v4-beta
      id: pl-compose
      if: inputs.pl-start-service != 'false' && (env.SKIP_TESTS != 'true' || inputs.test-skip-dry-run == 'true')
      with:
        pl-docker-registry: ${{ inputs.pl-docker-registry }}
        pl-docker-tag: ${{ inputs.pl-docker-tag }}
        pl-test-assets-dir: ${{ inputs.pl-test-assets-dir }}
        pl-log-level: ${{ inputs.pl-log-level }}

    - name: Run test - ${{ inputs.test-script-name}}
      if: env.SKIP_TESTS != 'true' || inputs.test-skip-dry-run == 'true'
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        PNPM_R: ${{ inputs.pnpm-recursive-tests }}
        PNPM_ARGS: ${{ inputs.pnpm-tests-args }}
      with:
        run: |
          if [ "${PNPM_R}" == "true" ];then
           pnpm run -r ${{ inputs.test-script-name }}
          else
           set_args=()
           while read -r _set_args; do
           if [ -n "${_set_args}" ]; then
             set_args+=( "${_set_args}" )
           fi
           done <<<"${PNPM_ARGS}"

           pnpm run ${{ inputs.test-script-name }} "${set_args[@]}"
          fi

    - name: Stop all running containers
      uses: milaboratory/github-ci/actions/shell@v4-beta
      if: always() && inputs.pl-start-service != 'false' && (env.SKIP_TESTS != 'true' || inputs.test-skip-dry-run == 'true')
      with:
        dump-stdout: false
        run: |
          docker stop $(docker ps -a -q)
          sleep 10

    - name: Check if we should upload logs
      if: always() && inputs.pl-start-service != 'false' && (env.SKIP_TESTS != 'true' || inputs.test-skip-dry-run == 'true')
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        PL_MAIN_ROOT: ${{ steps.pl-compose.outputs.main-root }}
      with:
        dump-stdout: false
        run: |
          if [ -z "$(ls -A ${PL_MAIN_ROOT})" ]; then
            ghwa_error "Tests report '${PL_MAIN_ROOT}' is empty, nothing to upload. It seems something broke platforma process."
            exit 0
          fi

          ghwa_set_env "UPLOAD_LOGS" "true"

    - name: Upload Platforma state dump
      uses: actions/upload-artifact@v4
      if: always() && env.UPLOAD_LOGS == 'true'
      with:
        name: pl-docker-dump
        path: |
          ${{ steps.pl-compose.outputs.main-root }}

    - name: Clean Platforma state files
      if: always() && env.UPLOAD_LOGS == 'true'
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        PL_MAIN_ROOT: ${{ steps.pl-compose.outputs.main-root }}
      with:
        dump-stdout: false
        run: |
          sudo rm -rfv "${PL_MAIN_ROOT}"

    - name: Restore assets ownership
      if: always() && inputs.pl-start-service != 'false' && (env.SKIP_TESTS != 'true' || inputs.test-skip-dry-run == 'true')
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        PL_ASSETS_DIR: ${{ format('{0}/{1}',  github.workspace, inputs.pl-test-assets-dir) }}
      with:
        dump-stdout: false
        run: |
          user_name="$(whoami)"
          sudo chown -R "${user_name}:${user_name}" "${PL_ASSETS_DIR}"
