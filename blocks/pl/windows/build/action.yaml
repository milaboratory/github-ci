name: Build the Platform on Windows
author: 'MiLaboratories'
description: |
  Build the Platform

  Prepare agent for building the Platform on Windows.
  Install Golang specific version, cache dependencies, run boostrap-ci script .e.t.c

inputs:
  #
  # Build control
  #
  build-command:
    description: |
      Build command (initiate build for the platform)
    required: false
    default: 'go build -ldflags "-linkmode external -extldflags -static" .'
  build-path:
    description: |
      The path where the build command will run
    required: false
    default: ${{ github.workspace }}
  build-archive-path:
    description: |
      The path to files to save as build artifact. The script will upload the resulting archive to s3.
      If this is empty, then the build-path will be used instead.
    required: false
    default: ''
  build-archive-name:
    description: |
      The name of the archive with build results.
      For Windows use .zip extension for MacOS/Linux tar.gz or .tgz extension.
    required: false
    default: 'pl.zip'
  build-archive-additional-source-files:
    description: |
      Additional folders/paths to add to the resulting build archive.
      The script will add these paths in addition to build-archive-path.
    required: false
  build-archive-include-patterns:
    description: |
      The list of patterns to include in the resulting build archive.
    required: false
  build-archive-exclude-patterns:
    description: |
      The list of patterns to exclude from the resulting build archive.
    required: false
    default: |
      *.go
      *.sum
      *.mod
  ext-programs-path:
    description: |
      The external_programs bootstrap script path.
    required: false
    default: 'external_programs'
  ext-programs-script-name:
    description: |
      The name of the bootstrap script.
    required: false
    default: 'download-windows.ps1'
  bootstrap-ci-script-name:
    description: |
      Bootstrap CI script name (install go modules, C++ libraries, binary tools, etc)
    required: true
    default: 'bootstrap-ci-windows.ps1'
  pkg-config-path:
    description: |
      Path to pre-build libs for the rocksdb
    required: false
  golang-version:
    description: |
      Golang version to use.
      Examples: '1.19', '1.20'
    required: true
  cache-version:
    description: |
      Simple hack, that allows to 'reset' cache for particular job.

      Just change the value of this parameter and the next run will
      not find build cache and will have to start from scratch.

    required: false
    default: 'v1'
  #
  # Github authentication control
  #
  netrc-machine:
    description: |
      Hostname of a remote machine.
    required: false
    default: 'github.com'
  netrc-login:
    description: |
      A user on the remote machine.
    required: false
    default: 'x-access-token'
  netrc-password:
    description: |
       A password or a token for the user on the remote machine.
       E.g: github token.
    required: true
  #
  # Artifact control
  #
  github-artifact-name:
    description: |
      Name of build artifact to create when <artifact-paths> input is not empty.

    required: false
    default: 'build-artifacts'
  github-artifact-retention:
    description: |
      Time in days to keep build artifacts before removing them.
    required: false
    default: '7'

runs:
  using: "composite"

  steps:
    - name: Prepare environment for building a golang application
      uses:  milaboratory/github-ci/actions/golang/prepare@v4-beta
      with:
        golang-version: ${{ inputs.golang-version }}
        cache-version: ${{ inputs.cache-version }}

    - name: Get runner metadata
      id: get_runner_metadata
      shell: pwsh
      env:

        PL_BUILD_PATH: ${{ inputs.build-path || github.workspace }}
        PL_BUILD_ARCHIVE_PATH: ${{ inputs.build-archive-path }}
        PL_EXT_PROGRAMS_PATH: ${{ inputs.ext-programs-path }}
      run: |
        function Mish-Sanitized {
          param (
          [string]$path
          )

          $sanitizedPath = $path -replace '\.\./', ''
          $sanitizedPath = $sanitizedPath -replace '[;&|]', ''
          $sanitizedPath = $sanitizedPath -replace '[^a-zA-Z0-9/_\\-]', ''

          return $sanitizedPath
        }

        $PL_BUILD_PATH_SANITIZED = Mish-Sanitized -path "${{ env.PL_BUILD_PATH }}"
        $PL_BUILD_ARCHIVE_PATH_SANITIZED = Mish-Sanitized -path "${{ env.PL_BUILD_ARCHIVE_PATH }}"
        $PL_EXT_PROGRAMS_PATH_SANITIZED = Mish-Sanitized -path "${{ env.PL_EXT_PROGRAMS_PATH }}"

        if ("$PL_BUILD_PATH_SANITIZED" -eq "$env:GITHUB_WORKSPACE") {
          $PL_BUILD_PATH = "$env:GITHUB_WORKSPACE"
        } else {
          $PL_BUILD_PATH = Join-path -Path "$env:GITHUB_WORKSPACE" -ChildPath "$PL_BUILD_PATH_SANITIZED"
        }

        if ([string]::IsNullOrWhiteSpace("$PL_BUILD_ARCHIVE_PATH_SANITIZED")) {
          $PL_BUILD_ARCHIVE_PATH = "${{ env.PL_BUILD_PATH }}"
        } else {
          $PL_BUILD_ARCHIVE_PATH = Join-path -Path "$env:GITHUB_WORKSPACE" -ChildPath "$PL_BUILD_ARCHIVE_PATH_SANITIZED"
        }

        if ([string]::IsNullOrWhiteSpace("$PL_EXT_PROGRAMS_PATH_SANITIZED")) {
          Write-Host "ext-programs-path cannot be empty."
          exit 1
        } else {
          $PL_EXT_PROGRAMS_PATH = Join-path -Path "$env:GITHUB_WORKSPACE" -ChildPath "$PL_EXT_PROGRAMS_PATH_SANITIZED"
        }

        $PL_ROCKSDB_LIBS_PATH = Join-path -Path $PL_EXT_PROGRAMS_PATH -ChildPath "rocksdb"
        # set output

        echo "pl_build_path=$PL_BUILD_PATH" >> $env:GITHUB_OUTPUT
        echo "pl_build_archive_path=$PL_BUILD_ARCHIVE_PATH" >> $env:GITHUB_OUTPUT
        echo "pl_ext_programs_path=$PL_EXT_PROGRAMS_PATH" >> $env:GITHUB_OUTPUT

        # set env
        echo "PKG_CONFIG_PATH=$PL_ROCKSDB_LIBS_PATH\lib\pkgconfig" >> $env:GITHUB_ENV

    - name: Run boostrap ci script for windows
      shell: pwsh
      env:
        GH_WORKSPACE: ${{ github.workspace }}
        BOOTSTRAP_CI_SCRIPT_NAME: ${{ inputs.bootstrap-ci-script-name }}
      run: |
        if (Test-Path -Path "${{ env.BOOTSTRAP_CI_SCRIPT_NAME }}" -PathType Leaf) {
            & "./${{ env.BOOTSTRAP_CI_SCRIPT_NAME }}"
        } else {
            Write-Error "Script '${{ env.BOOTSTRAP_CI_SCRIPT_NAME }}' not found."
        }

    - uses: milaboratory/github-ci/actions/git/auth-netrc@v4-beta
      with:
        machine: ${{ inputs.netrc-machine }}
        login: ${{ inputs.netrc-login }}
        password: ${{ inputs.netrc-password }}

    - name: Run build command for the platform
      shell: pwsh
      working-directory: ${{ steps.get_runner_metadata.outputs.pl_build_path }}
      run: |
        ${{ inputs.build-command }}

    - name: Run build command for the platform
      if: 1 > 2
      shell: pwsh
      working-directory: ${{ steps.get_runner_metadata.outputs.pl_build_path }}
      run: |
        $BUILD_COMMAND = ${{ inputs.build-command }}

        $regex = '"[^"]*"|\S+'
        $commandParts = [System.Text.RegularExpressions.Regex]::Matches($BUILD_COMMAND, $regex) | ForEach-Object { $_.Value }
        $baseCommand = $commandParts[0]
        $argumentsArray = $commandParts[1..($commandParts.Length - 1)]

        if (Get-Command $baseCommand -ErrorAction SilentlyContinue) {
          Start-Process -NoNewWindow -FilePath $baseCommand -ArgumentList $argumentsArray -Wait
        } elseif (Test-Path -Path "./$BUILD_COMMAND" -PathType Leaf) {
          & "./$BUILD_COMMAND"
        } else {
          Write-Error "The command or script '$BUILD_COMMAND' is not recognized."
        }

    - name: Add external programs download script
      shell: pwsh
      env:
        BUILD_ARCHIVE_PATH: ${{ steps.get_runner_metadata.outputs.pl_build_archive_path }}
        EXT_PROGRAMS_PATH: ${{ steps.get_runner_metadata.outputs.pl_ext_programs_path }}
        EXT_PROGRAMS_SCRIPT_NAME: ${{ inputs.ext-programs-script-name }}
      run: |
        $RES_PATH = Join-path -Path ${{ env.EXT_PROGRAMS_PATH }} -ChildPath ${{ env.EXT_PROGRAMS_SCRIPT_NAME }}

        if (Test-Path "$RES_PATH" -PathType Leaf) {
          Copy-Item -Path "$RES_PATH" -Destination "${{ env.BUILD_ARCHIVE_PATH }}" -Verbose
        } else {
          # softfail
          Write-Host "$RES_PATH script not found"
          exit 0
        }

    - name: Add build results to the archive
      uses: milaboratory/github-ci/actions/create-archive@v4-beta
      env:
        BUILD_ARCHIVE_PATH: ${{ steps.get_runner_metadata.outputs.pl_build_archive_path }}
      with:
        source-files: |
          ${{ env.BUILD_ARCHIVE_PATH }}
          ${{ inputs.build-archive-additional-source-files }}
        include-patterns: |
          ${{ inputs.build-archive-include-patterns }}
        exclude-patterns: |
          ${{ inputs.build-archive-exclude-patterns }}
        archive-name: ${{ inputs.build-archive-name }}

    - name: Save build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.github-artifact-name  }}
        path: |
          ${{ inputs.build-archive-name }}
          !**\*.go
        retention-days: ${{ inputs.github-artifact-retention }}