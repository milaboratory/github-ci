name: Build the Platform on Windows
author: 'MiLaboratories'
description: |
  Build the Platform

  Prepare agent for building the Platform on Windows.
  Install Golang specific version, cache dependencies, run boostrap-ci script .e.t.c

inputs:
  #
  # Build control
  #
  build-command:
    description: |
      Build command (initiate build for the platform)
    required: false
    default: 'go build -ldflags "-linkmode external -extldflags -static" .'
  build-path:
    description: |
      The path where the build command will run
    required: false
    default: 'platform\cmd\pl'
  bootstrap-ci-script-name:
    description: |
      Bootstrap CI script name (install go modules, C++ libraries, binary tools, etc)
    required: true
    default: 'bootstrap-ci-windows.ps1'
  pkg-config-path:
    description: |
      Path to pre-build libs for the rocksdb
    required: false
  golang-version:
    description: |
      Golang version to use.
      Examples: '1.19', '1.20'
    required: true
  cache-version:
    description: |
      Simple hack, that allows to 'reset' cache for particular job.

      Just change the value of this parameter and the next run will
      not find build cache and will have to start from scratch.

    required: false
    default: 'v1'
  cdn-url:
    description: |
      CDN url for Static and Shared RockDB Libs.
    required: false
    default: 'https://cdn.mixcr.com/internal/pkgs'
  rocksdb-version:
    description:
      RocksDB version.
    required: true
  #
  # Github authentication control
  #
  netrc-machine:
    description: |
      Hostname of a remote machine.
    required: false
    default: 'github.com'
  netrc-login:
    description: |
      A user on the remote machine.
    required: false
    default: 'x-access-token'
  netrc-password:
    description: |
       A password or a token for the user on the remote machine.
       E.g: github token.
    required: true
  #
  # Artifact control
  #
  artifact-name:
    description: |
      Name of build artifact to create when <artifact-paths> input is not empty

    required: false
    default: 'build-artifacts'
  artifact-paths:
    description: |
      List of paths to artifacts to save after build run.
      Paths are relative to github workspace (repository root).
      Patterns ('*', '**', etc.) are supported.
    required: false
    default: ''
  artifact-retention:
    description: |
      Time in days to keep build artifacts before removing them
    required: false
    default: '7'

runs:
  using: "composite"

  steps:
    - name: Prepare environment for building a golang application
      uses:  milaboratory/github-ci/actions/golang/prepare@v4-beta
      with:
        golang-version: ${{ inputs.golang-version }}
        cache-version: ${{ inputs.cache-version }}

    - name: Run boostrap ci script for windows
      shell: pwsh
      env:
        GH_WORKSPACE: ${{ github.workspace }}
      run: |
        .\${{ inputs.bootstrap-ci-script-name }}

    - uses: milaboratory/github-ci/actions/git/auth-netrc@v4-beta
      with:
        machine: ${{ inputs.netrc-machine }}
        login: ${{ inputs.netrc-login }}
        password: ${{ inputs.netrc-password }}

    - name: Download and unpack static rocksdb libs
      shell: pwsh
      env:
        GH_WORKSPACE: ${{ github.workspace }}
        CDN_URL: ${{ inputs.cdn-url }}
        ROCKSDB_VERSION: ${{ inputs.rocksdb-version }}
      run: |
          $ROCKSDB_STATIC_LIB_ARCHIVE = "rocksdb-static-lib-${{ env.ROCKSDB_VERSION }}-windows-amd64.zip"
          $ROCKSDB_LIB_PATH = "${{ env.GH_WORKSPACE }}\rocksdb"
          $DOWNLOAD_URL = "${{ env.CDN_URL }}/rocksdb/${{ env.ROCKSDB_VERSION }}/$ROCKSDB_STATIC_LIB_ARCHIVE"

          Write-Output "Downloading static libs windows-amd64"
          Invoke-WebRequest -URI $DOWNLOAD_URL -OutFile "${{ env.GH_WORKSPACE }}\$ROCKSDB_STATIC_LIB_ARCHIVE"
          Write-Output "Unzip static libs"
          7z x "${{ env.GH_WORKSPACE }}\$ROCKSDB_STATIC_LIB_ARCHIVE" -o"$ROCKSDB_LIB_PATH"

          echo "PKG_CONFIG_PATH=$ROCKSDB_LIB_PATH\lib\pkgconfig" >> $env:GITHUB_ENV

    - name: Run build command for the platform
      shell: pwsh
      working-directory: ${{ inputs.build-path }}
      run: |
        ${{ inputs.build-command }}

    - name: Add build results to the archive
      env:
        BUILD_PATH: ${{ inputs.build-path }}
      shell: pwsh
      run: |
       cd ${{ env.BUILD_PATH }}
       7z a pl.zip . "-xr!*.go" "-xr!*.zip" "-xr!*.sum" "-xr!*.mod"

    - name: Save build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact-name }}
        path: |
          ${{ inputs.artifact-paths }}
          !**\*.go
        retention-days: ${{ inputs.artifact-retention }}