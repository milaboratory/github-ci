# This workflow will build and upload nodejs application on the github's npm registry.

name: Build and Upload NodeJS PNPM Applications

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}

      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      gha-runner-label:
        description: |
          The label for github actions hosted runner
        type: string
        default: 'ubuntu-latest'

      #
      # Checkout settings
      #
      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''

      #
      # Environment settings
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'

      #
      # NodeJS settings
      #
      node-version:
        description: |
          Node version to use
        type: string
        required: true

      #
      # Golang settings
      #
      golang-version:
        description: |
          Node version to use.
          Examples: '1.19', '1.20'
        type: string
        required: false

      golang-cache-hashfiles-path:
        description: |
          Returns a single hash for the set of files that matches the path pattern.
          You can provide a single path pattern or multiple path patterns separated by commas.
          The path is relative to the GITHUB_WORKSPACE directory
          and can only include files inside of the GITHUB_WORKSPACE.
        type: string
        required: false
        default: '**/go.sum'

      #
      # Cache control
      #
      cache-version:
        description: |
          Simple hack, that allows to 'reset' cache for particular job.

          Just change the value of this parameter and the next run will
          not find build cache and will have to start from scratch.

        type: string
        required: false
        default: 'v1'

      cache-hashfiles-search-path:
        description: |
          Hashfiles search path for pnpm-lock.yaml
        type: string
        required: false
        default: 'pnpm-lock.yaml'

      team-id:
        description: |
          The Team ID to use. This controls the directory where turbo cache entries will be saved
        type: string
        required: false
        default: 'ci'

      #
      # PNPM settings
      #
      pnpm-version:
        description: |
          Version of pnpm to install.
        type: string
        required: false
        default: 'latest'

      pnpm-recursive-build:
        description: |
          Run pnpm build with -r flag.
        type: boolean
        required: true

      pnpm-recursive-tests:
        description: |
          Run pnpm tests with -r flag.
        type: boolean
        required: true

      pnpm-build-args:
        description: |
          Additional pnpm build arguments to pass
          for none --recursive pnpm invocations.
        type: string
        required: false

      pnpm-tests-args:
        description: |
          Additional pnpm tests arguments to pass
          for none --recursive pnpm invocations.
        type: string
        required: false
      #
      # Build control
      #
      build-script-name:
        description: |
          The name of a build script
        type: string
        required: true
        default: 'build'

      is-electron-application:
        description: |
          If 'true' enables cache for an Electron application,
          if 'false', enables cache for a generic NodeJS application.
        type: string
        required: false
        default: 'true'
      #
      # Build pre-calculated control
      #
      pre-calculated:
        description:
          Flag to indicate whether individual subtasks are pre-calculated on isolated nodes
          to enable parallel builds within a monorepo workflow. Set to true to activate pre-calculation.
        type: boolean
        required: false
        default: false

      pre-calculated-task-list:
        description:
          JSON-formatted string listing of the specific subtasks that have been pre-calculated.
          This list is used to manage and track the execution of parallel builds in the monorepo.
        type: string
        required: false
        default: '[]'
      #
      # Test control
      #
      test:
        description: |
          Run tests
        type: boolean
        required: false
        default: false

      test-script-name:
        description: |
          The name of a test
        type: string
        required: false
        default: 'test'

      test-dry-run-script-name:
        description: |
          The name of a test dry-run script
        type: string
        required: false
        default: 'test:dry-run'

      test-skip-dry-run:
        description: |
          Skip test dry-run step
        type: string
        required: false
        default: 'false'
      #
      # NPM registry settings
      #
      npmrc-config:
        description: |
          Generates a .npmrc file based on provided configuration.
        type: string
        required: true

      #
      # Distribution control
      #
      publish-to-public:
        description: |
          Whether or not the npm package should be published as public.
        type: string
        required: false
        default: 'false'

      create-tag:
        description: |
          Create a tag after publishing the package.
        type: string
        required: false
        default: 'false'

      package-path:
        description: |
          Relative path to the package.json with package version.
        type: string
        required: false
        default: '.'

      aws-region:
        description: |
          The AWS region
        type: string
        required: false
        default: 'eu-central-1'

      aws-login-duration:
        description: |
          Maximum time AWS credentials will be valid until expiration.
          Defaults to 1 hour.
        type: number
        required: false
        default: 3600
      #
      # Platforma Docker settings
      #
      pl-start-for-tests:
        description: |
          Start Platforma Backend instance for tests
        type: boolean
        required: false
        default: true

      pl-docker-tag:
        description: |
          Platforma docker tag.
        type: string
        required: false
        default: 'main'

      pl-test-assets-dir:
        description: |
          Platforma test assets directory;
          this directory will be mounted inside
          the container under the path `/storage/controllers/data/library`
          The path must be relative to github.workspace
          and will be appended to github.workspace within the docker compose action.
        type: string
        required: false
        default: 'assets'
      #
      # Changed files
      #

      changeset-default-branch:
        description:
          Specify the default branch for changesets to run checks against.
        type: string
        required: false
        default: 'main'

      require-review:
        description: |
          Whether or not to require a review for the PR.
        type: boolean
        required: false
        default: false

      #
      # Docker settings
      #
      docker-quay-push:
        description: |
          Whether or not to push images to quay.io registry.
        type: boolean
        required: false
        default: true

      docker-ga-push:
        description: |
          Whether or not to push images to GA registry.
        type: boolean
        required: false
        default: true

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: false

      notify-slack:
        description: |
          Enable Slack notifications
        required: false
        type: boolean
        default: true

    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false
      SLACK_BOT_TOKEN:
        description: |
          Slack bot token for notifications
        required: false
      SLACK_CHANNEL:
        description: |
          Slack channel for notifications
        required: false
      GH_ZEN_APP_ID:
        description: |
          Zen Artisian Github AppID
        required: false
      GH_ZEN_APP_PRIVATE_KEY:
        description: |
          Zen Artisian Github App PrivateKey
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta
    outputs:
      is-release: ${{ steps.context.outputs.is-release }}
      current-version: ${{ steps.context.outputs.current-version }}

  metadata:
    name: get run metadata
    runs-on: ubuntu-latest
    needs:
      - init
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - id: npm-pkg-metadata
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          PACKAGE_PATH: ${{ inputs.package-path }}
        with:
          run: |
            NPM_PKG_VERSION="$(cat "${GITHUB_WORKSPACE}/${PACKAGE_PATH}/package.json" | jq --raw-output '.version')"
            PNPM_VERSION="$(cat "${GITHUB_WORKSPACE}/package.json" | jq --raw-output 'if .packageManager and (.packageManager | length > 0) then .packageManager | split("@")[1] else empty end')"
            ghwa_set_output npm-pkg-version "${NPM_PKG_VERSION}"
            ghwa_set_output pnpm-version "${PNPM_VERSION}"

    outputs:
      npm-pkg-version: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).npm-pkg-version }}
      pnpm-version: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).pnpm-version }}

  check-changesets:
    name: check for changesets
    runs-on: ubuntu-latest
    needs:
      - metadata
    if: github.ref_name == 'main' || github.event_name == 'merge_group'
    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}
          fetch-depth: '0'

      - name: Prepare environment for building a NodeJS application
        uses: milaboratory/github-ci/actions/node/prepare-pnpm@v4-beta
        env:
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          pnpm-version: ${{ env.PNPM_VERSION || inputs.pnpm-version }}
          cache-hashfiles-search-path: ${{ inputs.cache-hashfiles-search-path }}
          npmrc-config: ${{ inputs.npmrc-config }}

      - name: Install NodeJS packages with pnpm
        uses: milaboratory/github-ci/actions/shell@v4-beta
        with:
          run: |
            pnpm install --frozen-lockfile --prefer-offline

      - name: Check for Changesets
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          BRANCH_NAME: ${{ inputs.changeset-default-branch }}
        with:
          run: |
            pnpm changeset status --since="origin/${BRANCH_NAME}"

  pre-calculated-build:
    name: pre-build
    runs-on: ${{ inputs.gha-runner-label }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(inputs.pre-calculated-task-list) }}
    needs:
      - check-changesets
      - metadata
    if: >
      inputs.pre-calculated && inputs.pre-calculated-task-list != '[]' &&
      !failure() && !cancelled() &&
      (
        needs.check-changesets.result == 'success' ||
        needs.check-changesets.result == 'skipped'
      )
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - name: Generate Zen Artisan Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_ZEN_APP_ID }}
          private-key: ${{ secrets.GH_ZEN_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_CI_IAM_MONOREPO_SIMPLE_ROLE }}
          role-duration-seconds: ${{ inputs.aws-login-duration }}
          aws-region: ${{ inputs.aws-region }}

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Login to Quay.io
        if: inputs.docker-quay-push && env.QUAY_USERNAME != '' && env.QUAY_ROBOT_TOKEN != ''
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ env.QUAY_USERNAME }}
          password: ${{ env.QUAY_ROBOT_TOKEN }}
          ecr: false

      - name: Login to Docker GA
        if: inputs.docker-ga-push && env.QUAY_USERNAME != '' && env.QUAY_ROBOT_TOKEN != ''
        uses: docker/login-action@v3
        with:
          registry: containers.pl-open.science
          username: ${{ env.QUAY_USERNAME }}
          password: ${{ env.QUAY_ROBOT_TOKEN }}
          ecr: false

      - uses: milaboratory/github-ci/actions/turborepo/cache-s3@v4-beta
        with:
          storage-provider: 's3'
          storage-path: ${{ env.AWS_CI_TURBOREPO_S3_BUCKET }}
          team-id: ${{ inputs.team-id }}

      - name: Prepare environment for building a NodeJS application
        uses: milaboratory/github-ci/actions/node/prepare-pnpm@v4-beta
        env:
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          pnpm-version: ${{ env.PNPM_VERSION || inputs.pnpm-version }}
          cache-hashfiles-search-path: ${{ inputs.cache-hashfiles-search-path }}
          npmrc-config: ${{ inputs.npmrc-config }}

      - name: Install NodeJS packages with pnpm
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN  }}
        with:
          dump-stdout: false
          run: |
            pnpm install --frozen-lockfile --prefer-offline

      - name: Run changeset version
        if: ( github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'pull_request' || github.event_name == 'merge_group'
        uses: milaboratory/github-ci/actions/shell@v4-beta
        with:
          run: |
            pnpm run version-packages

      - name: Run build for - ${{ matrix.step }}
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          PRE_CALCULATED_STEP: ${{ matrix.step }}
        with:
          dump-stdout: false
          run: |
            pnpm run build --filter="${PRE_CALCULATED_STEP}"
    outputs:
      status: 'completed'

  build-test-publish:
    name: unified (build test publish)
    runs-on: ${{ inputs.gha-runner-label }}
    needs:
      - check-changesets
      - metadata
      - pre-calculated-build
    if: >
      !failure() && !cancelled() &&
      (
        needs.pre-calculated-build.result == 'success' ||
        needs.pre-calculated-build.result == 'skipped'
      ) &&
      (
        needs.check-changesets.result == 'success' ||
        needs.check-changesets.result == 'skipped'
      )
    permissions:
      id-token: write
      packages: write
      contents: write
      pull-requests: write
      issues: read

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - name: Generate Zen Artisan Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_ZEN_APP_ID }}
          private-key: ${{ secrets.GH_ZEN_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: '0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_CI_IAM_MONOREPO_SIMPLE_ROLE }}
          role-duration-seconds: ${{ inputs.aws-login-duration }}
          aws-region: ${{ inputs.aws-region }}

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Login to Quay.io
        if: inputs.docker-quay-push && env.QUAY_USERNAME != '' && env.QUAY_ROBOT_TOKEN != ''
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ env.QUAY_USERNAME }}
          password: ${{ env.QUAY_ROBOT_TOKEN }}
          ecr: false

      - name: Login to Docker GA
        if: inputs.docker-ga-push && env.QUAY_USERNAME != '' && env.QUAY_ROBOT_TOKEN != ''
        uses: docker/login-action@v3
        with:
          registry: containers.pl-open.science
          username: ${{ env.QUAY_USERNAME }}
          password: ${{ env.QUAY_ROBOT_TOKEN }}
          ecr: false

      - name: Prepare environment for Golang when requested
        if: inputs.golang-version != ''
        uses: milaboratory/github-ci/actions/golang/prepare@v4-beta
        with:
          golang-version: ${{ inputs.golang-version }}
          cache-version: ${{ inputs.cache-version }}
          cache-dependency-hashfiles-path: ${{ inputs.golang-cache-hashfiles-path }}

      - name: Prepare environment for building a NodeJS application
        uses: milaboratory/github-ci/actions/node/prepare-pnpm@v4-beta
        env:
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          pnpm-version: ${{ env.PNPM_VERSION || inputs.pnpm-version }}
          cache-hashfiles-search-path: ${{ inputs.cache-hashfiles-search-path }}
          npmrc-config: ${{ inputs.npmrc-config }}

      - uses: milaboratory/github-ci/actions/turborepo/cache-s3@v4-beta
        with:
          storage-provider: 's3'
          storage-path: ${{ env.AWS_CI_TURBOREPO_S3_BUCKET }}
          team-id: ${{ inputs.team-id }}

      - name: Install NodeJS packages with pnpm
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN  }}
        with:
          dump-stdout: false
          run: |
            pnpm install --frozen-lockfile --prefer-offline

      - name: Run changeset version
        if: ( github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'pull_request' || github.event_name == 'merge_group'
        uses: milaboratory/github-ci/actions/shell@v4-beta
        with:
          run: |
            pnpm run version-packages

      - name: Get changed files staged and unstaged
        if: github.event_name == 'push'
          && github.ref_name == 'main'
        id: check-changes
        shell: bash
        run: |
          # Check for tracked files
          TRACKED_FILES=$(git diff --diff-filter=ACMUXTR --name-only)
          # Check for untracked files
          UNTRACKED_FILES=$(git ls-files --others --exclude-standard)
          # Check for unstaged deleted files
          UNSTAGED_DELETED_FILES=$(git ls-files --deleted)

          if [ -n "${TRACKED_FILES}" ] || [ -n "${UNTRACKED_FILES}" ] || [ -n "${UNSTAGED_DELETED_FILES}" ]; then
            echo "Local changes detected but not committed."
            echo "has-changes=1" >> $GITHUB_OUTPUT
            echo "Tracked files:"
            echo "${TRACKED_FILES}"
            echo "Untracked files:"
            echo "${UNTRACKED_FILES}"
            echo "Unstaged deleted files:"
            echo "${UNSTAGED_DELETED_FILES}"
          else
            echo "No local changes detected."
            echo "has-changes=0" >> $GITHUB_OUTPUT
          fi

      - name: Run build
        uses: milaboratory/github-ci/blocks/monorepo/build-and-test-pnpm@v4-beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN  }}
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          build-script-name: ${{ inputs.build-script-name }}
          tests: 'false'
          test-script-name: ${{ inputs.test-script-name }}
          pnpm-recursive-build: ${{ inputs.pnpm-recursive-build }}
          pnpm-recursive-tests: ${{ inputs.pnpm-recursive-tests }}
          pnpm-build-args: ${{ inputs.pnpm-build-args }}
          pnpm-tests-args: ${{ inputs.pnpm-tests-args }}

      - name: Run tests
        id: test
        uses: milaboratory/github-ci/blocks/monorepo/test-pl-docker-pnpm@v4-beta
        if: inputs.test
        env:
          PL_ADDRESS: "http://127.0.0.1:6345"
          PL_TEST_USER: ${{ env.PL_CI_TEST_USER }}
          PL_TEST_PASSWORD: ${{ env.PL_CI_TEST_PASSWORD }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN  }}
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          test-script-name: ${{ inputs.test-script-name }}
          test-dry-run-script-name: ${{ inputs.test-dry-run-script-name }}
          test-skip-dry-run: ${{ inputs.test-skip-dry-run }}
          pnpm-recursive-tests: ${{ inputs.pnpm-recursive-tests }}
          pnpm-tests-args: ${{ inputs.pnpm-tests-args }}
          pl-start-service: ${{ inputs.pl-start-for-tests }}
          pl-docker-registry: ${{ format('{0}/{1}', steps.login-ecr.outputs.registry, 'pl') }}
          pl-docker-tag: ${{ inputs.pl-docker-tag }}
          pl-test-assets-dir: ${{ inputs.pl-test-assets-dir }}
          pl-log-level: ${{ inputs.pl-log-level }}

      - name: Run build (before publish)
        uses: milaboratory/github-ci/blocks/monorepo/build-and-test-pnpm@v4-beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN  }}
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          build-script-name: ${{ inputs.build-script-name }}
          tests: 'false'
          test-script-name: ${{ inputs.test-script-name }}
          pnpm-recursive-build: ${{ inputs.pnpm-recursive-build }}
          pnpm-recursive-tests: ${{ inputs.pnpm-recursive-tests }}
          pnpm-build-args: ${{ inputs.pnpm-build-args }}
          pnpm-tests-args: ${{ inputs.pnpm-tests-args }}

      - name: Get GitHub App User ID
        if: steps.check-changes.outputs.has-changes == '1'
        id: get-user-id
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"

      - name: Commit changed files to main
        uses: milaboratory/github-ci/actions/shell@v4-beta
        if: steps.check-changes.outputs.has-changes == '1'
        env:
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        with:
          run: |
            git config --global user.name "${APP_SLUG}[bot]"
            git config --global user.email "${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com>"
            git checkout main
            git add .
            git commit -m "Auto-generated changes"
            git push

      - name: Publish npm package
        id: publish-to-private
        if: github.ref_name == 'main'
          && steps.check-changes.outputs.has-changes == '0'
          && inputs.publish-to-public == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN }}
        uses: changesets/action@v1
        with:
          publish: pnpm -r publish --no-git-checks

      - name: Publish npm package (public)
        id: publish-to-public
        if: github.ref_name == 'main'
          && steps.check-changes.outputs.has-changes == '0'
          && inputs.publish-to-public == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN }}
        uses: changesets/action@v1
        with:
          publish: pnpm -r publish --no-git-checks --access public

      - name: Create release with tag
        if: github.ref_name == 'main'
          && steps.check-changes.outputs.has-changes == '0'
          && inputs.create-tag == 'true'
        uses: milaboratory/github-ci/actions/release/create-with-tag@v4-beta
        env:
          NPM_PKG_VERSION: ${{ needs.metadata.outputs.npm-pkg-version }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ format('v{0}', env.NPM_PKG_VERSION) }}
          tag: ${{ format('v{0}', env.NPM_PKG_VERSION) }}
          commit: ${{ github.sha }}
          skipIfReleaseExists: true
          draft: false
          prerelease: false

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

  notify-release:
    name: notify release
    runs-on: ubuntu-latest
    if: always() && inputs.notify-telegram
    needs:
      - init
      - metadata
      - check-changesets
      - build-test-publish
      - pre-calculated-build
    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4-beta
        with:
          input: |
            release

      - uses: milaboratory/github-ci/blocks/notify/release@v4-beta
        env:
          NPM_PKG_VERSION: ${{ needs.metadata.outputs.npm-pkg-version }}
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}
          job-status: |
            ${{ needs.pre-calculated-build.result }}
            ${{ needs.build-test-publish.result }}
            ${{ needs.check-changesets.result }}
          product-name: ${{ inputs.app-name }}
          override-version: ${{ format('{0}', env.NPM_PKG_VERSION) }}
          override-tag: ${{ format('v{0}', env.NPM_PKG_VERSION) }}
          search-tags: ${{ steps.search-tags.outputs.result }}

  notify-slack-release:
    name: notify slack release
    runs-on: ubuntu-latest
    if: always() && inputs.notify-slack
    needs:
      - init
      - metadata
      - check-changesets
      - build-test-publish
      - pre-calculated-build
    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4-beta
        with:
          input: |
            release

      - uses: milaboratory/github-ci/blocks/notify/slack/release@v4-beta
        env:
          NPM_PKG_VERSION: ${{ needs.metadata.outputs.npm-pkg-version }}
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          job-status: |
            ${{ needs.pre-calculated-build.result }}
            ${{ needs.build-test-publish.result }}
            ${{ needs.check-changesets.result }}
          product-name: ${{ inputs.app-name }}
          override-version: ${{ format('{0}', env.NPM_PKG_VERSION) }}
          override-tag: ${{ format('v{0}', env.NPM_PKG_VERSION) }}
          search-tags: ${{ steps.search-tags.outputs.result }}
