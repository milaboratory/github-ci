# This workflow will build and upload nodejs application on the github's npm registry.

name: Build and Upload NodeJS PNPM Applications

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}

      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      gha-runner-label:
        description: |
          The label for github actions hosted runner
        type: string
        default: 'ubuntu-latest'

      #
      # Checkout settings
      #
      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''

      #
      # Environment settings
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'

      #
      # NodeJS settings
      #
      node-version:
        description: |
          Node version to use
        type: string
        required: true

      #
      # Cache control
      #
      cache-version:
        description: |
          Simple hack, that allows to 'reset' cache for particular job.

          Just change the value of this parameter and the next run will
          not find build cache and will have to start from scratch.

        type: string
        required: false
        default: 'v1'

      cache-hashfiles-search-path:
        description: |
          Hashfiles search path for pnpm-lock.yaml
        type: string
        required: false
        default: 'pnpm-lock.yaml'

      #
      # PNPM settings
      #
      pnpm-version:
        description: |
          Version of pnpm to install.
        type: string
        required: false
        default: 'latest'

      pnpm-recursive-build:
        description: |
          Run pnpm build with -r flag.
        type: boolean
        required: true

      pnpm-recursive-tests:
        description: |
          Run pnpm tests with -r flag.
        type: boolean
        required: true

      pnpm-build-args:
        description: |
          Additional pnpm build arguments to pass
          for none --recursive pnpm invocations.
        type: string
        required: false

      pnpm-tests-args:
        description: |
          Additional pnpm tests arguments to pass
          for none --recursive pnpm invocations.
        type: string
        required: false
      #
      # Build control
      #
      build-script-name:
        description: |
          The name of a build script
        type: string
        required: true
        default: 'build'
      is-electron-application:
        description: |
          If 'true' enables cache for an Electron application,
          if 'false', enables cache for a generic NodeJS application.
        type: string
        required: false
        default: 'true'

      #
      # Test control
      #
      test:
        description: |
          Run tests
        type: boolean
        required: false
        default: false
      test-script-name:
        description: |
          The name of a test
        type: string
        required: false
        default: 'test'

      #
      # NPM registry settings
      #
      npmrc-config:
        description: |
          Generates a .npmrc file based on provided configuration.
        type: string
        required: true

      #
      # Distribution control
      #
      publish-to-public:
        description: |
          Whether or not the npm package should be published as public.
        type: string
        required: false
        default: 'false'
      #
      # AWS ECR settings
      #
      aws-region:
        description: |
          The AWS region
        type: string
        required: false
        default: 'eu-central-1'
      #
      # Platforma Docker settings
      #
      pl-docker-tag:
        description: |
          Platforma docker tag.
        type: string
        required: false
        default: 'main'
      pl-test-assets-dir:
        description: |
          Platforma test assets directory;
          this directory will be mounted inside
          the container under the path `/storage/controllers/file/library`
          The path must be relative to github.workspace
          and will be appended to github.workspace within the docker compose action.
        type: string
        required: false
        default: 'assets'
      pl-log-dir:
        description: |
          Platforma logs directory on the agent;
          this directory will be mounted inside
          the container under the path. `pl-log-destination`
          The path must be relative to github.workspace
          and will be appended to github.workspace within the docker compose action.
        type: string
        required: false
        default: 'log'
      pl-log-commit-summary:
        description: |
          Whether or not to log commit summary for Platforma.
        type: boolean
        required: false
        default: true
      pl-log-resource-data:
        description: |
          Whether or not to log resource data for Platforma.
        type: boolean
        required: false
        default: true
      pl-log-level:
        description: |
          Platforma log level
        type: string
        required: false
        default: 'info'
      pl-auth-enabled:
        description: |
          Whether or not to enable authentication in the Platforma.
        type: boolean
        required: false
        default: true
      #
      # Changed files
      #
      changed-files-list:
        description: |
          File/Directory names to check for uncommited changes.
        type: string
        required: false
      match-gitignore-files:
        description: |
          Indicates whether to match files in `.gitignore`'
        type: boolean
        required: false
        default: false
      changeset-default-branch:
        description:
          Specify the default branch for changesets to run checks against.
        type: string
        required: false
        default: 'main'
      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: 'true'

      notify-tests:
        description: |
          Enable notifications about tests status (ready/failed)
          Possible values are:
           - 'true' - send all notifications about tests status (both success and failed)
           - 'failure-only' - send notification about failed tests, don't notify on success
           - 'success-only' - send notification about success tests, don't notify on failures
           - 'false' - don't send notifications about tests results at all.
        required: false
        type: string
        default: 'true'

    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false
      GH_ZEN_APP_ID:
        description: |
          Zen Artisian Github AppID
        required: false
      GH_ZEN_APP_PRIVATE_KEY:
        description: |
          Zen Artisian Github App PrivateKey
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}
      current-version: ${{ steps.context.outputs.current-version }}

  metadata:
    name: get run metadata
    runs-on: ubuntu-latest

    needs:
      - init
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - id: npm-pkg-metadata
        uses: milaboratory/github-ci/actions/shell@v4-beta
        with:
          run: |
            NPM_PKG_VERSION="$(cat "${GITHUB_WORKSPACE}/package.json" | jq --raw-output '.version')"
            PNPM_VERSION="$(cat "${GITHUB_WORKSPACE}/package.json" | jq --raw-output 'if .packageManager and (.packageManager | length > 0) then .packageManager | split("@")[1] else empty end')"
            ghwa_set_output npm-pkg-version "${NPM_PKG_VERSION}"
            ghwa_set_output pnpm-version "${PNPM_VERSION}"

    outputs:
      npm-pkg-version: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).npm-pkg-version }}
      pnpm-version: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).pnpm-version }}

  check:
    name: check for changesets
    runs-on: ubuntu-latest

    needs:
      - metadata

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}
          fetch-depth: '0'

      - name: Prepare environment for building a NodeJS application
        uses: milaboratory/github-ci/actions/node/prepare-pnpm@v4-beta
        env:
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          pnpm-version: ${{ env.PNPM_VERSION || inputs.pnpm-version }}
          cache-hashfiles-search-path: ${{ inputs.cache-hashfiles-search-path }}
          npmrc-config: ${{ inputs.npmrc-config }}

      - name: Install NodeJS packages with pnpm
        uses: milaboratory/github-ci/actions/shell@v4-beta
        with:
          run: |
            pnpm install --frozen-lockfile --prefer-offline

      - name: Check for Changesets
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          BRANCH_NAME: ${{ inputs.changeset-default-branch }}
        with:
          run: |
            pnpm changeset status --since="origin/${BRANCH_NAME}"

  build-test-publish:
    name: unified (build test publish)
    runs-on: ${{ inputs.gha-runner-label }}

    needs:
      - check
      - metadata

    permissions:
      id-token: write
      packages: write
      contents: write
      pull-requests: write
      issues: read

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - name: Generate Zen Artisan Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_ZEN_APP_ID }}
          private-key: ${{ secrets.GH_ZEN_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: '0'

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_CI_IAM_MONOREPO_SIMPLE_ROLE }}
          aws-region: ${{ inputs.aws-region }}

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - uses: milaboratory/github-ci/actions/turborepo/cache-s3@v4
        with:
          storage-provider: 's3'
          storage-path: ${{ env.AWS_CI_TURBOREPO_S3_BUCKET }}

      - name: Prepare environment for building a NodeJS application
        uses: milaboratory/github-ci/actions/node/prepare-pnpm@v4-beta
        env:
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          pnpm-version: ${{ env.PNPM_VERSION || inputs.pnpm-version }}
          cache-hashfiles-search-path: ${{ inputs.cache-hashfiles-search-path }}
          npmrc-config: ${{ inputs.npmrc-config }}

      - name: Install NodeJS packages with pnpm
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN  }}
        with:
          dump-stdout: false
          run: |
            pnpm install --frozen-lockfile --prefer-offline

      - name: Run changeset version
        if: ( github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'pull_request'
        uses: milaboratory/github-ci/actions/shell@v4
        with:
          run: |
            pnpm run version-packages

      - name: Get changed files staged and unstaged
        if: github.event_name == 'push'
          && github.ref_name == 'main'
        id: check-changes
        shell: bash
        run: |
          # Check for unstaged changes
          UNSTAGED=$(git diff --name-only)
          # Check for uncommitted changes in the staging area
          STAGED=$(git diff --name-only --cached)

          if [ -n "${UNSTAGED}" ] || [ -n "${STAGED}" ]; then
            echo "Local changes detected (unstaged or staged but not committed)."
            echo "has-changes=1" >> $GITHUB_OUTPUT
            echo "Unstaged changes:"
            echo "${UNSTAGED}"
            echo "Staged changes:"
            echo "${STAGED}"
          else
            echo "No local changes detected."
            echo "has-changes=0" >> $GITHUB_OUTPUT
          fi

      - name: Run build
        uses: milaboratory/github-ci/blocks/node/build-and-test-pnpm@v4-beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN  }}
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          build-script-name: ${{ inputs.build-script-name }}
          tests: 'false'
          test-script-name: ${{ inputs.test-script-name }}
          pnpm-recursive-build: ${{ inputs.pnpm-recursive-build }}
          pnpm-recursive-tests: ${{ inputs.pnpm-recursive-tests }}
          pnpm-build-args: ${{ inputs.pnpm-build-args }}
          pnpm-tests-args: ${{ inputs.pnpm-tests-args }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          cache-hashfiles-search-path: ${{ inputs.cache-hashfiles-search-path }}
          pnpm-version: ${{ env.PNPM_VERSION || inputs.pnpm-version }}
          npmrc-config: ${{ inputs.npmrc-config }}

      - name: Run tests
        id: test
        uses: milaboratory/github-ci/blocks/pl/linux/test-pl-docker-pnpm@v4-beta
        if: inputs.test
        env:
          PL_ADDRESS: "http://127.0.0.1:6345"
          PL_TEST_USER: ${{ env.PL_CI_TEST_USER }}
          PL_TEST_PASSWORD: ${{ env.PL_CI_TEST_PASSWORD }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN  }}
          PNPM_VERSION: ${{ needs.metadata.outputs.pnpm-version }}
        with:
          test-script-name: ${{ inputs.test-script-name }}
          pnpm-recursive-tests: ${{ inputs.pnpm-recursive-tests }}
          pnpm-tests-args: ${{ inputs.pnpm-tests-args }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          pnpm-version: ${{ env.PNPM_VERSION || inputs.pnpm-version }}
          cache-hashfiles-search-path: ${{ inputs.cache-hashfiles-search-path }}
          npmrc-config: ${{ inputs.npmrc-config }}
          pl-auth-enabled: ${{ inputs.pl-auth-enabled }}
          pl-docker-registry: ${{ format('{0}/{1}', steps.login-ecr.outputs.registry, 'pl') }}
          pl-docker-tag: ${{ inputs.pl-docker-tag }}
          pl-test-assets-dir: ${{ inputs.pl-test-assets-dir }}
          pl-log-dir: ${{ inputs.pl-log-dir }}
          pl-log-level: ${{ inputs.pl-log-level }}
          pl-log-commit-summary: ${{ inputs.pl-log-commit-summary }}
          pl-log-resource-data: ${{ inputs.pl-log-resource-data }}

      - name: Get GitHub App User ID
        if: steps.check-changes.outputs.has-changes == '1'
        id: get-user-id
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"

      - name: Commit changed files to main
        uses: milaboratory/github-ci/actions/shell@v4-beta
        if: steps.check-changes.outputs.has-changes == '1'
        env:
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        with:
          run: |
            git config --global user.name "${APP_SLUG}[bot]"
            git config --global user.email "${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com>"
            git checkout main
            git add .
            git commit -m "Auto-generated changes"
            git push

      - name: Publish npm package
        if: github.ref_name == 'main'
          && steps.check-changes.outputs.has-changes == '0'
          && inputs.publish-to-public == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN }}
        uses: changesets/action@v1
        with:
          publish: pnpm -r publish --no-git-checks

      - name: Publish npm package (public)
        if: github.ref_name == 'main'
          && steps.check-changes.outputs.has-changes == '0'
          && inputs.publish-to-public == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN }}
        uses: changesets/action@v1
        with:
          publish: pnpm -r publish --no-git-checks --access public

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

  notify-release:
    name: notify release
    runs-on: ubuntu-latest

    if: always()
    needs:
      - init
      - metadata
      - check
      - build-test-publish

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4-beta
        with:
          input: |
            release

      - uses: milaboratory/github-ci/blocks/notify/release@v4-beta
        env:
          NPM_PKG_VERSION: ${{ needs.metadata.outputs.npm-pkg-version }}
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}
          job-status: |
            ${{ needs.build-test-publish.result }}
            ${{ needs.check.result }}
          product-name: ${{ inputs.app-name }}
          override-version: ${{ format('{0}', env.NPM_PKG_VERSION) }}
          override-tag: ${{ format('v{0}', env.NPM_PKG_VERSION) }}
          search-tags: ${{ steps.search-tags.outputs.result }}
