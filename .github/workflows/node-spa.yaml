# This workflow will build and deploy application on the aws cloudfront.

name: Build and Deploy Application (AWS Cloudfront)

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}

      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      #
      # Checkout settings
      #
      git-crypt-unlock:
        description: |
          Perform `git ctypt unlock` after each fresh repository checkout

          NOTE: don't forget to set the following secrets:
                  - GIT_CRYPT_GPG_KEY
                  - GIT_CRYPT_KEY_PASSWORD

        type: boolean
        required: false
        default: false

      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''

      #
      # Environment settings
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'

      #
      # NodeJS settings
      #
      node-version:
        description: |
          Node version to use
        type: string
        required: true

     #
     # Build control
     #
      build-version:
        description: |
          Set version number in 'package.json' file to given value.
        type: string
        required: false
      build-script-name:
        description: |
          The name of a build script
        type: string
        required: true
        default: 'build'
      build-script-env:
        description: |
          JSON-encoded environment variables to set for 'npm run <build-script-name>':
          Example: '{ "SOME_VAR_NAME": "variable custom value" }'
        type: string
        required: false
        default: '{}'
      is-electron-application:
        description: |
          If 'true' enables cache for an Electron application,
          if 'false', enables cache for a generic NodeJS application.
        type: string
        required: false
        default: 'true'

      #
      # Test control
      #
      test:
        description: |
          Run tests
        type: boolean
        required: false
        default: false
      test-script-name:
        description: |
          The name of a test
        type: string
        required: false
        default: 'test'

      #
      # Archive distribution control
      #
      dist-archive-path:
        description:
          The name of a distribution folder for nodejs application.
        type: string
        required: false
        default: 'dist'

      dist-artifact-retention:
        description: |
          Time in days to keep build artifacts before removing them
        type: number
        required: false
        default: 7

      #
      # AWS settings
      #
      aws-iam-role-to-assume:
        description: |
          The ARN of a IAM role to assume and configure the Actions environment with
          assumed role credentials.
        type: string
        required: true

      aws-region:
        description: |
          The AWS region
        type: string
        required: true
        default: 'us-east-1'

      aws-cloudfront-distribution-id:
        description: |
          The ID of an AWS Cloudfront distribution
        type: string
        required: true

      aws-cloudfront-s3-bucket-name:
        description: |
          The name of an aws s3 bucket to sync static files
        type: string
        required: true

      aws-cloudfront-cache-invalidation:
        description: |
          Invalidate the cache on the AWS Cloudfornt for a given distribution
        type: string
        required: false
        default: 'true'

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: 'true'

      notify-tests:
        description: |
          Enable notifications about tests status (ready/failed)
          Possible values are:
           - 'true' - send all notifications about tests status (both success and failed)
           - 'failure-only' - send notification about failed tests, don't notify on success
           - 'success-only' - send notification about success tests, don't notify on failures
           - 'false' - don't send notifications about tests results at all.
        required: false
        type: string
        default: 'true'

    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

      GIT_CRYPT_GPG_KEY:
        description: |
          base64-encoded GPG key pair
          (see actions/git/crypt inputs description)
        required: false

      GIT_CRYPT_KEY_PASSWORD:
        description: |
          Password for GPG key
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  build:
    name: :build
    runs-on: ubuntu-latest

    needs:
      - init

    steps:
      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v3
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - uses: milaboratory/github-ci/blocks/node/build/generic@v4
        env: ${{ fromJSON(inputs.build-script-env) }}
        with:
          build-version: ${{ steps.context.outputs.current-version }}
          build-script-name: ${{ inputs.build-script-name }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          is-electron-application: ${{ inputs.is-electron-application }}

      - id: artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.app-name-slug }}
          path: ${{ inputs.dist-archive-path }}
          retention-days: ${{ inputs.dist-artifact-retention }}

  test:
    name: :test
    runs-on: ubuntu-latest

    if: inputs.test
    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v3
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - id: test
        uses: milaboratory/github-ci/blocks/node/test@v4
        with:
          test-name: ${{ inputs.test-script-name }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          is-electron-application: ${{ inputs.is-electron-application }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

  deployDist:
    name: deploy
    runs-on: ubuntu-latest

    needs:
      - init
      - build
      - test

    permissions:
      id-token: write
      contents: read

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4

      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.app-name-slug }}
          path: ${{ inputs.app-name-slug }}

      - uses: milaboratory/github-ci/actions/aws/cloudfront@v4
        with:
          aws-iam-role-to-assume: ${{ inputs.aws-iam-role-to-assume }}
          aws-region: ${{ inputs.aws-region }}
          aws-cloudfront-distribution-id: ${{ inputs.aws-cloudfront-distribution-id }}
          aws-cloudfront-s3-bucket-name: ${{ inputs.aws-cloudfront-s3-bucket-name }}
          aws-cloudfront-cache-invalidation: ${{ inputs.aws-cloudfront-cache-invalidation }}
          dist-assets: ${{ inputs.app-name-slug }}/


  notify-test:
    name: notify test
    runs-on: ubuntu-latest

    if:  always()
      && needs.test.outputs.started == 'true'
      && inputs.notify-tests != 'false'

    needs:
      - test

    steps:
      - uses: milaboratory/github-ci/blocks/notify/tests@v4
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          notification-mode: ${{ inputs.notify-tests }}
          tests-status: ${{ needs.test.result }}
          tests-type: 'Unit'

          product-name: ${{ inputs.app-name }}

  notify-build:
    name: Notify build
    runs-on: ubuntu-latest

    if: always()
      && inputs.notify-telegram
      && inputs.notify-build != 'false'
      && needs.build.result != 'cancelled'

    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/blocks/notify/build@v4
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          build-status: |
            ${{ needs.build.result }}
          product-name: ${{ inputs.app-name }}
