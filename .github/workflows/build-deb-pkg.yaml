name: Build Debian package with dpkg-buildpackage in a flexible environment.
on:
  workflow_call:
    inputs:
      #
      # Build control
      #
      deb-conf-path:
        description: |
          Path to the debian package config inside repository
          e.g: linux/rocksdb/7.3
        type: string
        required: true
      src-path:
        description: |
          Path to the source folder where debian config will be moved
        type: string
        required: false
        default: 'src'
      repo:
        description: |
          The Name of the repository including user or organization
          e.g: facebook/rocksdb
        type: string
        required: true
      repo-ref:
        description: |
         Repository branch/tag or commit sha
         e.g: v7.3.1
        type: string
        required: true
      buildpackage-opts:
        description: |
          description: Options to be passed to dpkg-buildpackage
        type: string
        required: false
        default: '--build=binary --no-sign'
      buildpackage-env:
        description: |
          JSON-encoded environment variables to set for 'dpkg-buildpackage':
          Example: '{ "SOME_VAR_NAME": "variable custom value" }'
        type: string
        required: false
        default: '{ "DEB_BUILD_OPTIONS": "noautodbgsym" }'
      docker-image:
        description: |
          Name of a Docker image to build inside or path of a Dockerfile
        type: string
        required: false
        default: ubuntu:jammy
      #
      # AWS
      #
      aws-iam-role-to-assume:
        description: |
          The ARN of a IAM role to assume and configure the Actions environment with
          assumed role credentials.
        type: string
        required: false
        default: 'arn:aws:iam::511903394050:role/milab-euce1-prod-github-oidc-role-pkgs-build'
      aws-region:
        description: |
          The AWS region
        type: string
        required: false
        default: 'eu-central-1'
      aws-s3-bucket-name:
        description: |
          AWS S3 bucket name
        type: string
        required: false
        default: 'milab-euce1-prod-pkgs-s3-apt-repository'

jobs:
  build:
    name: :build-deb
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: checkout milaboratory/deb repo
        uses: actions/checkout@v3

      - name: checkout ${{ inputs.repo }} repo
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.repo-ref }}
          path: ${{ inputs.src-path }}

      - uses: milaboratory/github-ci/actions/deb/setup-deb-s3@v4

      - uses: milaboratory/github-ci/actions/shell@v4
        env:
          SRC_PATH: ${{ inputs.src-path }}
          DEB_CFG_PATH: ${{ inputs.deb-conf-path }}
        with:
          dump-stdout: false
          run: |
            mv -v "${DEB_CFG_PATH}/debian" "${SRC_PATH}/"

      - uses: milaboratory/github-ci/actions/deb/build@v4
        env: ${{ fromJSON(inputs.buildpackage-env) }}
        with:
          docker-image: ${{ inputs.docker-image }}
          source-dir: ${{ inputs.src-path }}
          buildpackage-opts: ${{ inputs.buildpackage-opts }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.aws-iam-role-to-assume }}
          aws-region: ${{ inputs.aws-region }}

      - uses: milaboratory/github-ci/actions/shell@v4
        env:
          S3_BUCKET_NAME: ${{ inputs.aws-s3-bucket-name }}
          SRC_PATH: ${{ inputs.src-path }}
          DOCKER_IMAGE: ${{ inputs.docker-image }}
        with:
          dump-stdout: false
          run: |
            PREFIX=$(echo $DOCKER_IMAGE | cut -d: -f1)
            CODENAME=$(echo $DOCKER_IMAGE | cut -d: -f2)

            deb-s3 upload \
              debian/artifacts/*.deb \
              --lock \
              --bucket "${S3_BUCKET_NAME}" \
              --prefix "${PREFIX}" \
              --codename "${CODENAME}" \
              --s3-region "${AWS_REGION}" \
              --visibility private