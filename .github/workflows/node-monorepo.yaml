# This workflow will build and upload nodejs application on the github's npm registry.

name: Build and Upload Monorepo NodeJS Applications

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}

      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      #
      # Checkout settings
      #
      git-crypt-unlock:
        description: |
          Perform `git ctypt unlock` after each fresh repository checkout

          NOTE: don't forget to set the following secrets:
                  - GIT_CRYPT_GPG_KEY
                  - GIT_CRYPT_KEY_PASSWORD

        type: boolean
        required: false
        default: false

      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''

      #
      # Environment settings
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'

      #
      # NodeJS settings
      #
      node-version:
        description: |
          Node version to use
        type: string
        required: true

      #
      # Cache control
      #
      cache-version:
        description: |
          Simple hack, that allows to 'reset' cache for particular job.

          Just change the value of this parameter and the next run will
          not find build cache and will have to start from scratch.

        type: string
        required: false
        default: 'v1'

      #
      # Build control
      #
      build-version:
        description: |
          Set version number in 'package.json' file to given value.
        type: string
        required: false
      build-script-name:
        description: |
          The name of a build script
        type: string
        required: true
        default: 'build'
      is-electron-application:
        description: |
          If 'true' enables cache for an Electron application,
          if 'false', enables cache for a generic NodeJS application.
        type: string
        required: false
        default: 'true'

      #
      # NPM registry settings
      #
      registry-url:
        description: |
          The npm registry url to set up for auth
          and publication of the node js package.
        type: string
        required: false
        default: 'https://npm.pkg.github.com'

      scope:
        description: |
          Scope for authenticating against npm registries.
        type: string
        required: false
        default: ${{ format('{0}{1}', '@', github.repository_owner) }}

      always-auth:
        description: |
          Set always-auth in npmrc.
        type: string
        required: false
        default: 'false'

      #
      # Release control
      #
      changelog-exclude-types:
        description: |
          Comma-separated list of change types to skip during
          changelog generation for release.

          See 'Conventional Commits' spec for more info:
          https://www.conventionalcommits.org/en/v1.0.0/

          Default: 'doc,chore'
        type: string
        required: false
        default: doc,chore

      release-github-draft:
        description: |
          Create GitHub Release draft instead of final release.
          This makes developer to manually confirm release publication, but
          also allows to update release description and changelog before publication.
        type: boolean
        required: false
        default: false

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: 'true'

      notify-tests:
        description: |
          Enable notifications about tests status (ready/failed)
          Possible values are:
           - 'true' - send all notifications about tests status (both success and failed)
           - 'failure-only' - send notification about failed tests, don't notify on success
           - 'success-only' - send notification about success tests, don't notify on failures
           - 'false' - don't send notifications about tests results at all.
        required: false
        type: string
        default: 'true'

    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

      GIT_CRYPT_GPG_KEY:
        description: |
          base64-encoded GPG key pair
          (see actions/git/crypt inputs description)
        required: false

      GIT_CRYPT_KEY_PASSWORD:
        description: |
          Password for GPG key
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  build:
    name: :build
    runs-on: ubuntu-latest

    permissions:
      packages: read
      contents: read

    needs:
      - init

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4-beta
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - uses: milaboratory/github-ci/blocks/node/build/generic@v4-beta
        with:
          build-version: ${{ steps.context.outputs.current-version }}
          build-script-name: ${{ inputs.build-script-name }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          is-electron-application: ${{ inputs.is-electron-application }}
          registry-url: ${{ inputs.registry-url }}
          scope: ${{ inputs.scope }}
          always-auth: ${{ inputs.always-auth }}
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}

  notify-build:
    name: Notify build
    runs-on: ubuntu-latest

    if: always()
      && inputs.notify-telegram
      && inputs.notify-build != 'false'
      && needs.build.result != 'cancelled'

    needs:
      - build

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4-beta
        with:
          input: |
            build

      - uses: milaboratory/github-ci/blocks/notify/build@v4-beta
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          build-status: |
            ${{ needs.build.result }}
          product-name: ${{ inputs.app-name }}
          search-tags: ${{ steps.search-tags.outputs.result }}

  can-release:
    name: Can release
    runs-on: ubuntu-latest

    needs:
      - init
      - build

    if: always() && fromJSON(needs.init.outputs.is-release) && needs.build.result != 'failure'

    steps:
      - shell: bash
        run: 'true'

  notify-release-review:
    name: Notify review required
    runs-on: ubuntu-latest

    if: always() && needs.can-release.result == 'success'

    needs:
      - can-release

    steps:
      - uses: milaboratory/github-ci/blocks/notify/review-required@v4-beta
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          message: new version of nodejs app is ready for release.
          product-name: ${{ inputs.app-name }}

  release:
    name: Confirm release
    runs-on: ubuntu-latest

    needs:
      - can-release

    if: always() && needs.can-release.result == 'success'

    environment: release

    steps:
      - shell: bash
        run: 'true'

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

  setup-packages-matrix:
    name: :setup packages matrix
    runs-on: ubuntu-latest

    needs:
      - release
    steps:
      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4-beta
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - name: Setup packages matrix
        uses: milaboratory/github-ci/actions/shell@v4-beta
        id: packages-matrix
        with:
          dump-stdout: false
          run: |
            NPM_PACKAGES_LIST=$(ls ./packages | sort | jq -R -s -c 'split("\n")[:-1]')
            ghwa_set_output npm-packages-list "$NPM_PACKAGES_LIST"

    outputs:
      npm-packages-list: ${{ fromJSON(steps.packages-matrix.outputs.data).npm-packages-list }}

  publish-to-npm:
    name: publish
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.setup-packages-matrix.outputs.npm-packages-list) }}
    runs-on: ubuntu-latest

    if: always()
      && needs.release.result == 'success'
      && startsWith(github.ref, 'refs/tags/v')

    needs:
      - release
      - setup-packages-matrix

    permissions:
      packages: write
      contents: read

    steps:
      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/node/package-publish-status@v4-beta
        id: npm-pkg-status
        with:
          package-json-path: ${{ format('{0}/packages/{1}', github.workspace, matrix.package) }}
          npm-registry-url: ${{ inputs.registry-url }}

      - uses: milaboratory/github-ci/blocks/node/build/generic@v4-beta
        if: steps.npm-pkg-status.outputs.exists == '0'
        with:
          build-version: ${{ steps.context.outputs.current-version }}
          build-script-name: ${{ inputs.build-script-name }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          is-electron-application: ${{ inputs.is-electron-application }}
          registry-url: ${{ inputs.registry-url }}
          scope: ${{ inputs.scope }}
          always-auth: ${{ inputs.always-auth }}
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish npm package
        uses: milaboratory/github-ci/actions/shell@v4-beta
        if: steps.npm-pkg-status.outputs.exists == '0'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_PACKAGE_NAME: ${{ matrix.package }}
        with:
          run: |
            NPM_PACKAGE_PATH="${GITHUB_WORKSPACE}/packages/${NPM_PACKAGE_NAME}"
            NPM_PACKAGE_PATH_SANITIZED=$(mish_sanitized "${NPM_PACKAGE_PATH}")
            
            cd "${NPM_PACKAGE_PATH_SANITIZED}"
            npm publish

      - name: Report publish status
        uses: milaboratory/github-ci/actions/shell@v4-beta
        if: steps.npm-pkg-status.outputs.exists == '1'
        env:
          NPM_PACKAGE_NAME: ${{ matrix.package }}
        with:
          run: |
            echo "Package version for ${NPM_PACKAGE_NAME} already exists on npm registry."

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

  notify-release:
    name: notify release
    runs-on: ubuntu-latest

    if: always()
      && needs.release.result == 'success'
      && startsWith(github.ref, 'refs/tags/v')
    needs:
      - release
      - publish-to-npm

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4-beta
        with:
          input: |
            release

      - uses: milaboratory/github-ci/blocks/notify/release@v4-beta
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          job-status: |
            ${{ needs.create-release.result }}
            ${{ needs.publish-to-npm.result }}

          product-name: ${{ inputs.app-name }}
          search-tags: ${{ steps.search-tags.outputs.result }}