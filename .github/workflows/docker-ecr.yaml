# This workflow will build and push docker image to the aws ecr.

name: Build Docker image (ecr)
on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}
      app-name-slug:
        description: |
          Application name slug and also
          used as the aws ecr repository name
        type: string
        required: true
      #
      # Checkout settings
      #
      git-crypt-unlock:
        description: |
          Perform `git ctypt unlock` after each fresh repository checkout

          NOTE: don't forget to set the following secrets:
                  - GIT_CRYPT_GPG_KEY
                  - GIT_CRYPT_KEY_PASSWORD
        type: boolean
        required: false
        default: false
      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''
      #
      # Environment settings
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'
      #
      # AWS settings
      #
      aws-iam-role-to-assume:
        description: |
          The ARN of a IAM role to assume and configure the Actions environment with
          assumed role credentials.
        type: string
        required: true
      aws-region:
        description: |
          The AWS region
        type: string
        required: true
        default: 'eu-central-1'
      #
      # Docker multiarch settings
      #
      docker-qemu-setup:
        description: |
          Setup QEMU static binaries for
          building multi-architecture Docker images with Buildx.
        type: boolean
        required: false
        default: true
      docker-qemu-platforms:
        description: |
          Comma separated string of platforms
          to install (e.g. amd64,arm64,riscv64)
        type: string
        required: false
        default: 'all'
      #
      # Docker images settings
      #
      docker-bake-build-config:
        description: |
          Provide docker's images build configuration
          as JSON-encoded map. You can pass several images
          if you have additional containers for deployment.

          You also need to pass flavor-suffix if you have
          additional container in the same repo
          and you want to push it into one registry but with a different tag.

          Note here, bake_target should be the same as in the docker-bake.hcl file.
          Example:
            { "bake_target": "app",
              "flavor-suffix": "",
              "helm_value": "app.image.tag" },
            { "bake_target": "migration",
              "flavor-suffix": "-migration",
              "helm_value": "app.initContainers.image.tag" }
        required: false
        type: string
        default: '{}'
      docker-bake-file-path:
        description: |
          Path to docker bake file
        required: false
        type: string
        default: './docker-bake.hcl'
      docker-images-build-args:
        description: |
          List of build args (ARG Dockerfile instruction)
          One line one argument, provided in the
          following format.

          build_target_name.args.parameter_name="parameter_value"

          Example:
           app.args.someparam="somevalue"
           migration.args.someparam="somevalue"
        type: string
        required: false
        default: ''
      #
      # Deployment control
      #
      helm-deployment:
        description: |
          Enable deployment to the AWS EKS Cluster
        type: boolean
        required: false
        default: false
      helm-release-name:
        description: |
          Helm chart release name
        type: string
        required: false
        default: ''
      helm-chart-name:
        description: |
          Helm chart name
        type: string
        required: false
        default: ''
      helm-chart-values-file:
        description: |
          Path to Helm chart values (in YAML format)
        type: string
        required: false
        default: ''
      helm-chart-atomic-upgrade:
        description: |
          if set, upgrade process rolls back changes
          made in case of failed upgrade.
          The --wait flag will be set automatically if --atomic is used

          If --wait flag is set, will wait until all Pods, PVCs, Services,
          and minimum number of Pods of a Deployment, StatefulSet,
          or ReplicaSet are in a ready state before marking
          the release as successful. It will wait for as long as --timeout
        type: boolean
        required: false
        default: true
      helm-chart-wait-timeout:
        description: |
          time to wait for any individual Kubernetes operation
          (like Jobs for hooks) (default 5m0s)
        type: string
        required: false
        default: '5m0s'
      cluster-name:
        description: |
          AWS EKS cluster name
        type: string
        required: false
        default: 'milab-euce1-prod-eks-cluster'
      namespace:
        description: |
          Kubernetes namespace name
        type: string
        required: false
        default: ''
      kubectl-version:
        description: |
          Version of kubectl
        type: string
        required: false
        default: 'v1.24.0'
      helm-version:
        description: |
          Version of helm
        type: string
        required: false
        default: 'v3.10.3'
      regctl-version:
        description: |
          Version of regctl
        type: string
        required: false
        default: 'v0.4.7'
      #
      # Github Actions runner control
      #
      gha-environment-name:
        description: |
          The name of gtihub actions environment
        type: string
        required: false
        default: 'deployment'
      gha-runner-label:
        description: |
          The label for github actions self-hosted runner
        type: string
        default: 'gha-custom-runner'
      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true
      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: 'true'
    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false
      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false
      GIT_CRYPT_GPG_KEY:
        description: |
          base64-encoded GPG key pair
          (see actions/git/crypt inputs description)
        required: false
      GIT_CRYPT_KEY_PASSWORD:
        description: |
          Password for GPG key
        required: false
jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4
    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  setup-matrix:
    name: :setup-matrix
    runs-on: ubuntu-latest
    needs:
      - init
    steps:
      - uses: actions/checkout@v3
      - id: setup-matrix-combinations
        uses: milaboratory/github-ci/actions/shell@v4
        env:
          BAKE_FILE: ${{ inputs.docker-bake-file-path }}
          DOCKER_BAKE_BUILD_CONFIG: ${{ inputs.docker-bake-build-config }}
        with:
          dump-stdout: false
          run: |
            MATRIX_PLATFORMS="$(docker buildx bake base --print -f $BAKE_FILE | jq -rc '[ .target."base".platforms[] | { "agent": "ubuntu-latest", "platform": . } ] | map((select(.platform == "linux/arm64") | .agent) |= "linux-arm64") | { "include": . }')"
            MATRIX_BUILD=$(jq --argjson j "$DOCKER_BAKE_BUILD_CONFIG" --argjson k "$MATRIX_PLATFORMS" -n '{ include: ($k.include | map(. * $j)) }')

            ghwa_set_output "matrix-platforms" "$MATRIX_PLATFORMS"
            ghwa_set_output "matrix-bake-targets" "{\"include\":[$DOCKER_BAKE_BUILD_CONFIG]}"
            ghwa_set_output "matrix-build" "$MATRIX_BUILD"

    outputs:
      matrix-platforms: ${{ fromJSON(steps.setup-matrix-combinations.outputs.data).matrix-platforms }}
      matrix-bake-targets: ${{ fromJSON(steps.setup-matrix-combinations.outputs.data).matrix-bake-targets }}
      matrix-build: ${{ fromJSON(steps.setup-matrix-combinations.outputs.data).matrix-build }}

  setup-cache:
    name: :setup-cache
    needs:
      - init
      - setup-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup-matrix.outputs.matrix-platforms) }}
    runs-on: ${{ matrix.agent }}
    steps:
      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v3
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - uses: milaboratory/github-ci/actions/shell@v4
        with:
          dump-stdout: false
          run: |
            platform=${{ matrix.platform }}
            ghwa_set_env "PLATFORM" "${platform//\//-}"

      - uses: actions/checkout@v3
      - uses: milaboratory/github-ci/actions/shell@v4
        with:
          dump-stdout: false
          run: |
            docker context create builders

      - uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - uses: docker/bake-action@v2
        env:
          APP_NAME: ${{ inputs.app-name-slug }}
        with:
          pull: true
          files: |
            ${{ inputs.docker-bake-file-path }}
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=${{ env.APP_NAME }}-${{ env.PLATFORM }}
            *.cache-to=type=gha,scope=${{ env.APP_NAME }}-${{ env.PLATFORM }},mode=max

  build:
    name: :build
    needs:
      - init
      - setup-matrix
      - setup-cache
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup-matrix.outputs.matrix-build) }}
    runs-on: ${{ matrix.agent }}
    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4

      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v3
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - uses: docker/setup-qemu-action@v2
      - uses: milaboratory/github-ci/actions/shell@v4
        with:
          dump-stdout: false
          run: |
            docker context create builders

      - uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - uses: aws-actions/configure-aws-credentials@v2
        if: github.event_name != 'pull_request'
        with:
          role-to-assume: ${{ inputs.aws-iam-role-to-assume }}
          aws-region: ${{ inputs.aws-region }}

      - id: login-ecr
        if: github.event_name != 'pull_request'
        uses: aws-actions/amazon-ecr-login@v1

      - id: transform-version
        uses: milaboratory/github-ci/actions/shell@v4
        env:
          CURRENT_VERSION: ${{ steps.context.outputs.current-version }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.app-name-slug }}
        with:
          dump-stdout: false
          run: |
            ghwa_set_output image "${REGISTRY}/${REPOSITORY}"
            ghwa_set_output image_tag "${CURRENT_VERSION}"

      - uses: milaboratory/github-ci/actions/shell@v4
        with:
          dump-stdout: false
          run: |
            platform=${{ matrix.platform }}
            ghwa_set_env "PLATFORM" "${platform//\//-}"

      - id: image-metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ fromJSON( steps.transform-version.outputs.data ).image }}
          flavor: |
            suffix=${{ matrix.flavor-suffix }}-${{ env.PLATFORM }}
          labels: |
            org.opencontainers.image.vendor=MiLaboratories
          tags: |
            type=raw,value=${{ fromJSON( steps.transform-version.outputs.data ).image_tag }}

      - id: build-push
        uses: docker/bake-action@v2
        env:
          APP_NAME: ${{ inputs.app-name-slug }}
        with:
          targets: ${{ matrix.bake_target }}
          push: ${{ github.event_name != 'pull_request' }}
          files: |
            ${{ inputs.docker-bake-file-path }}
            ${{ steps.image-metadata.outputs.bake-file }}
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=${{ env.APP_NAME }}-${{ env.PLATFORM }}
            ${{ inputs.docker-images-build-args }}

      - uses: milaboratory/github-ci/actions/setup-regctl@v4
        with:
          version: ${{ inputs.regctl-version }}

      - id: re-tag-images
        if: github.event_name != 'pull_request'
        uses: milaboratory/github-ci/actions/shell@v4
        env:
          BAKE_FILE: ${{ inputs.docker-bake-file-path }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.app-name-slug }}
          TAG: ${{ steps.image-metadata.outputs.version }}
          PLATFORM: ${{ matrix.platform }}
        with:
          dump-stdout: false
          run: |
            IMAGE="${REGISTRY}/${REPOSITORY}"
            DIGEST=$(regctl image digest --platform $PLATFORM $IMAGE:$TAG)

            regctl image copy \
            "${IMAGE}@${DIGEST}" \
            "${IMAGE}:${TAG}"
            printf "Re-tagging: %s\n" "${IMAGE}:${TAG}"

      - id: pushed-tags
        uses: milaboratory/github-ci/actions/strings/json-list@v4
        with:
          input: ${{ steps.image-metadata.outputs.tags }}

      - id: notify-build
        if: always()
          && inputs.notify-telegram
          && inputs.notify-build != 'false'
          && steps.build-push.conclusion != 'cancelled'
        uses: milaboratory/github-ci/blocks/notify/build@v4
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}
          build-status: |
            ${{ steps.build-push.conclusion }}
          product-name: ${{ inputs.app-name }}
          docker-images: ${{ steps.pushed-tags.outputs.result }}

  push-manifest:
    if: github.event_name != 'pull_request'
    name: Push Docker Manifest to ECR
    runs-on: ubuntu-latest

    needs:
      - init
      - build
      - setup-matrix
    permissions:
      id-token: write
      contents: read
    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4

      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.aws-iam-role-to-assume }}
          aws-region: ${{ inputs.aws-region }}

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: milaboratory/github-ci/actions/setup-regctl@v4
        with:
          version: ${{ inputs.regctl-version }}

      - uses: milaboratory/github-ci/actions/shell@v4
        env:
          CURRENT_VERSION: ${{ steps.context.outputs.current-version }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.app-name-slug }}
          MATRIX_BUILD: ${{ needs.setup-matrix.outputs.matrix-build }}
        with:
          dump-stdout: false
          run: |
            IMAGE_TAGS=()
            IMAGE_SUFFIX=""
            for row in $(echo "${MATRIX_BUILD}" | jq -r '.include[] | @base64'); do
              _jq() {
                echo $row | base64 --decode | jq -r $1
            }

            IMAGE_FLAVOR_SUFFIX=$(_jq '."flavor-suffix"')
            IMAGE_PLATFORM=$(_jq '."platform"')
            IMAGE_PLATFORM_SANITIZED=$(echo $IMAGE_PLATFORM | sed 's:/:-:g')
            IMAGE="${REGISTRY}/${REPOSITORY}"

            IMAGE_TAGS+="${IMAGE}:${CURRENT_VERSION}${IMAGE_FLAVOR_SUFFIX}-${IMAGE_PLATFORM_SANITIZED}\n"
            IMAGE_SUFFIX="${IMAGE_FLAVOR_SUFFIX}"
            done

            _image_tags=$(echo -e $IMAGE_TAGS)
            _manifest_name="${REGISTRY}/${REPOSITORY}:${CURRENT_VERSION}${IMAGE_SUFFIX}"

            _image_refs=()
            while read -r _ref; do
              if [ -n "${_ref}" ]; then
              _image_refs+=( --ref "${_ref}" )
              fi
            done <<<"${_image_tags}"

            regctl index create \
             "${_manifest_name}" \
             "${_image_refs[@]}"

            regctl manifest get \
              "${_manifest_name}"

  can-release:
    name: Can release
    runs-on: ubuntu-latest

    needs:
      - init
      - build
      - setup-matrix
      - push-manifest

    if: always()
      && inputs.helm-deployment
      && fromJSON(needs.init.outputs.is-release)
      && needs.build.result         != 'failure'
      && needs.setup-matrix.result  != 'failure'
      && needs.push-manifest.result  != 'failure'

    steps:
      - shell: bash
        run: 'true'

  notify-release-review:
    name: Notify review required
    runs-on: ubuntu-latest

    if: always() && needs.can-release.result == 'success'
    needs:
      - can-release

    steps:
      - uses: milaboratory/github-ci/blocks/notify/review-required@v4
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          message: new version of app is ready for deployment
          product-name: ${{ inputs.app-name }}

  release:
    name: Confirm release
    runs-on: ubuntu-latest

    needs:
      - can-release

    if: always() && needs.can-release.result == 'success'
    environment:
      name: ${{ inputs.gha-environment-name }}

    steps:
      - shell: bash
        run: 'true'

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

  deployment:
    if: inputs.helm-deployment && needs.release.result == 'success'
    name: :deployment
    runs-on: [ self-hosted, "${{ inputs.gha-runner-label }}" ]
    needs:
      - release
      - setup-matrix
    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4

      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v3

      - uses: milaboratory/github-ci/actions/git/crypt@v4
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: milaboratory/github-ci/actions/shell@v4
        env:
          DEPLOYMENT_VERSION: ${{ steps.context.outputs.current-version }}
          MATRIX_BAKE_TARGETS: ${{ needs.setup-matrix.outputs.matrix-bake-targets }}
        with:
          dump-stdout: false
          run: |
            image_tags=()
            for row in $(echo "${MATRIX_BAKE_TARGETS}" | jq -r '.include[] | @base64'); do
              _jq() {
                echo $row | base64 --decode | jq -r $1
            }

              IMAGE_FLAVOR_SUFFIX=$(_jq '."flavor-suffix"')
              HELM_VALUE=$(_jq '."helm_value"')
              image_tags+="${HELM_VALUE}=${DEPLOYMENT_VERSION}${IMAGE_FLAVOR_SUFFIX}\n"
            done
            IMAGE_TAGS=$(echo -e "$image_tags")
            ghwa_set_env "IMAGE_TAGS" "${IMAGE_TAGS}"

      - id: helm-deployment
        uses: milaboratory/github-ci/blocks/eks/deployment@v4
        with:
          kubectl-version: ${{ inputs.kubectl-version }}
          helm-version: ${{ inputs.helm-version }}
          helm-release-name: ${{ inputs.helm-release-name }}
          helm-chart-registry: ${{ steps.login-ecr.outputs.registry }}
          helm-chart-name: ${{ inputs.helm-chart-name }}
          helm-chart-values-file: ${{ inputs.helm-chart-values-file }}
          helm-chart-atomic-upgrade: ${{ inputs.helm-chart-atomic-upgrade }}
          helm-chart-wait-timeout: ${{ inputs.helm-chart-wait-timeout }}
          cluster-name: ${{ inputs.cluster-name }}
          namespace: ${{ inputs.namespace }}
          helm-chart-values: |
            ${{ env.IMAGE_TAGS }}

  notify-deployment:
    name: notify deployment
    runs-on: ubuntu-latest

    if: always()
      && inputs.helm-deployment
      && inputs.notify-telegram
    needs:
      - deployment

    steps:
      - uses: milaboratory/github-ci/blocks/notify/deployment@v4
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          job-status: |
            ${{ needs.deployment.result }}
          product-name: ${{ inputs.app-name }}
