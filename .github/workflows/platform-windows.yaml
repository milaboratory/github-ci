# This workflow will install given version of Golang and use it to build Platform.

name: Build Platform on Windows
on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}
      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true
      #
      # Checkout settings
      #
      git-crypt-unlock:
        description: |
          Perform `git ctypt unlock` after each fresh repository checkout

          NOTE: don't forget to set the following secrets:
                  - GIT_CRYPT_GPG_KEY
                  - GIT_CRYPT_KEY_PASSWORD
        type: boolean
        required: false
        default: false
      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''
      #
      # Environment settings
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'
      #
      # Golang settings
      #
      golang-version:
        description: |
          Version of Golang to use for build
        type: string
        required: true
      cache-version:
        description: |
          Simple hack, that allows to 'reset' cache for particular job.

          Just change the value of this parameter and the next run will
          not find build cache and will have to start from scratch.
        type: string
        required: false
        default: 'v1'
      #
      # Bootstrap control
      #
      bootstrap-ci-script-name:
        description: |
          Bootstrap CI script name (install go modules, C++ libraries, binary tools, etc)
        type: string
        required: true
        default: 'bootstrap-ci-windows.ps1'
      #
      # Build control
      #
      build-command:
        description: |
          Build command (initiate build for the platform)
        type: string
        required: false
        default: 'go build -ldflags "-linkmode external -extldflags -static" .'
      build-path:
        description: |
          The path where the build command will run
        type: string
        required: false
        default: 'platform\cmd\pl'
      build-env:
        description: |
          JSON-encoded environment variables to set for 'go build .':
          Example: '{ "SOME_VAR_NAME": "variable custom value" }'
        type: string
        required: false
        default: '{}'
      rocksdb-s3-archive-path:
        description: |
          The path to the rocksdb pre-build libs archive on the s3 static files bucket
        type: string
        required: true
      #
      # Distribution control
      #
      dist-archive-paths:
        description: |
          Files to save as build artifact, release asset and to upload to S3
        type: string
        required: false
        default: 'platform\cmd\pl\*.zip'
      dist-artifact-retention:
        description: |
          Time in days to keep build artifacts before removing them
        type: number
        required: false
        default: 7
      dist-archive-s3-iam-role-to-assume:
        description: |
          The ARN of a IAM role to assume and configure the Actions environment with
          assumed role credentials.
        type: string
        required: false
        default: 'arn:aws:iam::511903394050:role/milab-euce1-prod-github-oidc-role-pkgs-build'
      dist-archive-s3-region:
        description: |
          Upload application release artifact's files to
          AWS S3 bucket in given region.
        type: string
        required: false
        default: 'eu-central-1'
      dist-archive-s3-bucket:
        description: |
          Upload application release artifact's files to
          given AWS S3 bucket.
        required: false
        type: string
        default: 'milab-euce1-prod-pkgs-s3-static-files'
      dist-archive-s3-path:
        description: |
          Upload application release artifact's files to given 'path'
          in S3 bucket.

          Released application files would be uploaded to:
            's3://<s3-bucket>/<s3-path>/<file>'

        type: string
        required: false
        default: 'pl/windows'
      dist-archive-s3-alternative-urls:
        description: |
          Customizes S3 object download URLs in notifications:
            <path regexp> -> <url>

          For more information see:
            blocks/release/s3/action.yaml -> inputs -> alternative-urls

        required: false
        type: string
        default: |
          ^/pl/windows -> s3://milab-euce1-prod-pkgs-s3-static-files/pl/windows
      dist-archive-s3-add-version:
        description: |
          Add version number to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<version>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<version>'.

        type: boolean
        required: false
        default: true
      dist-archive-s3-add-sha:
        description: |
          Add SHA to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<SHA>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<SHA>'.

          'false' or '' (empty string) disables feature
          'true'     - adds full SHA to file names
          '<number>' - adds to file names SHA abbreviated to given length in symbols,
                       e.g. '3' will cause only first 3 symbols of SHA to be added to file names.

        type: string
        required: false
        default: 'false'
      dist-archive-s3-add-os-arch:
        description: |
          Add ARCH to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<ARCH>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<ARCH>'.

        type: boolean
        required: false
        default: false
      #
      # Notifications control
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true
      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: 'true'
    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

      GIT_CRYPT_GPG_KEY:
        description: |
          base64-encoded GPG key pair
          (see actions/git/crypt inputs description)
        required: false

      GIT_CRYPT_KEY_PASSWORD:
        description: |
          Password for GPG key
        required: false
jobs:
  init:
    name: init
    runs-on: ubuntu-latest
    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4
    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  build:
    name: :build-on-windows
    runs-on: windows-latest
    needs:
      - init
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v3
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.dist-archive-s3-iam-role-to-assume }}
          aws-region: ${{ inputs.dist-archive-s3-region }}

      - id: rocksdb_download_libs
        name: download pre-build libs for rocksdb
        env:
          S3_BUCKET_NAME: ${{ inputs.dist-archive-s3-bucket }}
          ROCKSDB_S3_ARCHIVE_PATH: ${{ inputs.rocksdb-s3-archive-path }}
          GH_WORKSPACE: ${{ github.workspace }}
        run: |
          $ROCKSDB_LIB_PATH = "${{ env.GH_WORKSPACE }}\rocksdb"
          $ROCKSDB_ARCHIVE_NAME = Split-Path ${{ env.ROCKSDB_S3_ARCHIVE_PATH }} -leaf
          
          Write-Output "Downloading pre-build rocksdb libs..."
          aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/${{ env.ROCKSDB_S3_ARCHIVE_PATH }} ./
          
          Write-Output "Unzip pre-build rocksdb libs to '${ROCKSDB_LIB_PATH}'"
          New-Item -ItemType directory -Path "${ROCKSDB_LIB_PATH}"
          7z x -o"${ROCKSDB_LIB_PATH}" "${ROCKSDB_ARCHIVE_NAME}"
          
          echo "rocksdb_libs_path=${ROCKSDB_LIB_PATH}" >> ${env:GITHUB_OUTPUT} 

      - uses: milaboratory/github-ci/blocks/pl/windows/build@v4
        env: ${{ fromJSON(inputs.build-env) }}
        with:
          golang-version: ${{ inputs.golang-version }}
          cache-version: ${{ inputs.cache-version }}

          pkg-config-path: ${{ steps.rocksdb_download_libs.outputs.rocksdb_libs_path }}
          bootstrap-ci-script-name: ${{ inputs.bootstrap-ci-script-name }}
          build-command: ${{ inputs.build-command }}
          build-path: ${{ inputs.build-path }}
          netrc-password: ${{ secrets.GITHUB_TOKEN }}

          artifact-name: ${{ inputs.app-name-slug }}
          artifact-paths: ${{ inputs.dist-archive-paths }}
          artifact-retention: ${{ inputs.dist-artifact-retention }}

  upload-build-results:
    name: archive-upload
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      id-token: write
      contents: read
    steps:
      - id: s3
        uses: milaboratory/github-ci/blocks/release/s3@v4
        with:
          artifact-name: ${{ inputs.app-name-slug }}
          add-version: ${{ inputs.dist-archive-s3-add-version }}
          add-sha: ${{ inputs.dist-archive-s3-add-sha }}
          add-os-arch: ${{ inputs.dist-archive-s3-add-os-arch }}

          s3-iam-role-to-assume: ${{ inputs.dist-archive-s3-iam-role-to-assume }}
          s3-region: ${{ inputs.dist-archive-s3-region }}
          s3-bucket: ${{ inputs.dist-archive-s3-bucket }}
          s3-path: ${{ inputs.dist-archive-s3-path }}

          alternative-urls: ${{ inputs.dist-archive-s3-alternative-urls }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

      s3-files: ${{ steps.s3.outputs.uploaded }}
      s3-files-json: ${{ steps.s3.outputs.uploaded-json }}
      s3-urls: ${{ steps.s3.outputs.download }}
      s3-urls-json: ${{ steps.s3.outputs.download-json }}

  notify-build:
    name: notify build
    runs-on: ubuntu-latest

    if: always()
      && inputs.notify-telegram
      && inputs.notify-build != 'false'
      && needs.build.result != 'cancelled'

    needs:
      - build
      - upload-build-results

    steps:
      - uses: milaboratory/github-ci/blocks/notify/build@v4
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}
          build-status: |
            ${{ needs.build.result }}
          product-name: ${{ inputs.app-name }}
          download-links: ${{ needs.upload-build-results.outputs.s3-urls-json }}


