# This workflow will prepare given version of Java and use it to build gradle application.
# All gradle dependencies will be cached for next runs.

name: Build Java project

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      product-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}

      product-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      #
      # Checkout settings
      #
      git-crypt-unlock:
        description: |
          Perform `git ctypt unlock` after each fresh repository checkout

          NOTE: don't forget to set the following secrets:
                  - GIT_CRYPT_GPG_KEY
                  - GIT_CRYPT_KEY_PASSWORD

        type: boolean
        required: false
        default: false

      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''

      #
      # Environment control
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'

      java-version:
        description: |
          Version of JAVA to use for build
        type: string
        required: true

      java-distribution:
        description: |
          Java distribution to use.
          Example: 'temurin', zulu, ...
          See 'https://github.com/actions/setup-java#supported-distributions'
          for complete list of supported distributions
        type: string
        required: false
        default: 'temurin'

      #
      # Build control
      #
      build-project:
        description: |
          Gradle project name to build: gradle :<project>:<command>
        type: string
        required: false
        default: ''

      build-project-dir:
        description: |
          Path to project root directory
          Defaults to repository root
        type: string
        required: false
        default: './'

      build-tasks:
        description: |
          Gradle build tasks.
          You can put several tasks here (one per line)

          NOTE: for 'publish*' tasks use 'publish-*-tasks' inputs.

        type: string
        required: false
        default: build

      build-data-cache-key:
        description: |
          Key to use for custom build data caching.

          Both <build-data-cache-key> and <build-data-cache-paths> are
          required for feature to work.

          Some builds produce project-specific data as a build result,
          This data can be re-used in subsequent builds.
        required: false
        type: string
        default: ''

      build-data-cache-paths:
        description: |
          Additional paths to cache between runs.

          Both <build-data-cache-key> and <build-data-cache-paths> are
          required for feature to work.

          Some builds produce project-specific data as a build result,
          This data can be re-used in subsequent builds.
        required: false
        type: string
        default: ''

      # artifact-paths:
      #   description: |
      #     List of paths to artifacts to save after build run.
      #     Empty list disables artifacts storage.
      #
      #     Relative paths are relative to gradle 'buildDir' project's property.
      #     Absolute paths (starting with '/') are relative to repository root.
      #     Patterns ('*', '**', etc.) are supported.
      #
      #   type: string
      #   required: false
      #   default: ''

      #
      # Tests control
      #
      test-unit:
        description: |
          Run unit tests
        type: boolean
        required: false
        default: true
      test-unit-before-tasks:
        description: |
          Run these gradlew tasks before running hooks
        type: string
        required: false
        default: ''
      test-unit-tasks:
        description: |
          Run these gradlew tasks to start tests
        type: string
        required: false
        default: 'test'
      test-unit-cache:
        description: |
          Cache test data for unit tests
        type: boolean
        required: false
        default: false
      test-unit-cache-paths:
        description: |
          Path to files to restore/cache before/after each unit tests run
        type: string
        required: false
        default: ''
      test-unit-cache-key:
        description: |
          Key for unit tests cached data
        type: string
        required: false
        default: ''

      test-integration:
        description: |
          Run integration tests
        type: boolean
        required: false
        default: false
      test-integration-before-tasks:
        description: |
          Run these gradlew tasks before running hooks
        type: string
        required: false
        default: ''
      test-integration-tasks:
        description: |
          Run these gradlew tasks to start tests
        type: string
        required: false
        default: 'test'
      test-integration-cache:
        description: |
          Cache test data for integration tests
        type: boolean
        required: false
        default: false
      test-integration-cache-paths:
        description: |
          Path to files to restore/cache before/after each integration tests run
        type: string
        required: false
        default: ''
      test-integration-cache-key:
        description: |
          Key for integration tests cached data
        type: string
        required: false
        default: ''
      test-integration-python-version:
        description: |
           Version of Python to install
        type: string
        required: false
        default: ''

      #
      # Docker distribution control
      #
      dist-docker:
        description: |
          Distribute application in Docker image
        type: boolean
        required: false
        default: false

      dist-docker-tasks:
        description: |
          Tasks to run to build docker image with application
        type: string
        required: false
        default: dockerBuildImage

      dist-docker-image-name:
        description: |
          Name of docker image, created by <dist-docker-tasks>, without
          version part (the text after colon).
          E.g. for 'ubuntu:20.04' tag we need only 'ubuntu' in this input.

          Defaults to <build-project> input.
        type: string
        required: false
        default: ''

      #
      # Archive distribution control
      #
      dist-archive:
        description: |
          Distribute application in archive:
           - upload to GitHub Artifacts storage;
           - save as GitHub Release asset;
           - upload to S3 bucket
             (see <dist-archive-s3> and <release-to-s3> inputs);

        type: boolean
        required: false
        default: false

      dist-archive-tasks:
        description: |
          Tasks for archive distribution generation (.zip, .tar and so on)
        type: string
        required: false
        default: 'distTar'

      dist-archive-paths:
        description: |
          Files to save as build artifact, release asset and to upload to S3
          Each file matched by this patterns would be added to GitHub action
          as individual asset.
        type: string
        required: false
        default: './distributions/*.tar'

      dist-artifact-retention:
        description: |
          Time in days to keep build artifacts before removing them
        type: number
        required: false
        default: 7

      dist-archive-s3:
        description: |
          Upload application archives to S3 bucket.
          Archive is uploaded to bucket immediately after creation regardless
          of build type (release/dev/...).

          This means, that if you use the same upload settings for
          <dist-archive-s3-*> and <release-s3-*>, the release file will be
          uploaded to S3 bucket _before_ release confirmation.

        type: boolean
        required: false
        default: false

      dist-archive-s3-region:
        description: |
          Upload application release artifact's files to
          AWS S3 bucket in given region.
        type: string
        required: false
        default: 'eu-central-1'

      dist-archive-s3-bucket:
        description: |
          Upload application release artifact's files to
          given AWS S3 bucket.
        required: false
        type: string
        default: 'milaboratory-artefacts-public-files'

      dist-archive-s3-alternative-urls:
        description: |
          Customizes S3 object download URLs in notifications:
            <path regexp> -> <url>

          For more information see:
            blocks/release/s3/action.yaml -> inputs -> alternative-urls

        required: false
        type: string
        default: |
          ^/cdn/software/ -> https://cdn.milaboratory.com/software/

      dist-archive-s3-path:
        description: |
          Upload application release artifact's files to given 'path'
          in S3 bucket.

          Released application files would be uploaded to:
            's3://<s3-bucket>/<s3-path>/<file>'

        type: string
        required: false
        default: 'cdn/software/${{ github.event.repository.name }}'

      dist-archive-s3-add-version:
        description: |
          Add version number to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<version>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<version>'.

        type: boolean
        required: false
        default: true

      dist-archive-s3-add-sha:
        description: |
          Add SHA to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<SHA>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<SHA>'.

          'false' or '' (empty string) disables feature
          'true'     - adds full SHA to file names
          '<number>' - adds to file names SHA abbreviated to given length in symbols,
                       e.g. '3' will cause only first 3 symbols of SHA to be added to file names.

        type: string
        required: false
        default: 'false'

      #
      # CDN redirect link control
      #
      cdn-redirect-s3:
        description: |
          Whether or not to enable the CDN link
          to redirect to the latest build results.

        type: boolean
        required: false
        default: false

      cdn-redirect-s3-bucket-path:
        description: |
          The path to a zero-byte object on an S3 bucket

        type: string
        default: 'link/software/${{ github.event.repository.name }}'
        required: false

      cdn-redirect-s3-bucket-key:
        description: |
          The name of a zero-byte object.
          In particular it should be a combination
          of the application name, branch name and extention.

        type: string
        default: '${{ github.event.repository.name }}-${{ github.ref_name }}.zip'
        required: false


      #
      # Library distribution control
      #
      dist-library:
        description: |
          Distribute product as library: run specific tasks to publish dev
          and release library versions to repositories
        type: boolean
        required: false
        default: false

      dist-library-dev-tasks:
        description: |
          Newline-separated list of tasks to run on library publication step.
        type: string
        required: false
        default: publish

      dist-library-release-tasks:
        description: |
          Newline-separated list of tasks to run on library publication step.
        type: string
        required: false
        default: ''

      #
      # Release control
      #
      changelog-exclude-types:
        description: |
          Comma-separated list of change types to skip during
          changelog generation for release.

          See 'Conventional Commits' spec for more info:
          https://www.conventionalcommits.org/en/v1.0.0/

          Default: 'doc,chore'
        type: string
        required: false
        default: doc,chore

      release-github-draft:
        description: |
          Create GitHub Release draft instead of final release.
          This makes developer to manually confirm release publication, but
          also allows to update release description and changelog before publication.
        type: boolean
        required: false
        default: false

      release-to-s3:
        description: |
          Set it to 'true' if you want to upload releases to S3 bucket
          This feature requires 'dist-archive' feature to be enabled and
          configured. The file created at 'dist-archive' step is uploaded
          to S3 storage.
        type: boolean
        required: false
        default: false

      release-s3-region:
        description: |
          Upload application release artifact's files to
          AWS S3 bucket in given region.
        type: string
        required: false
        default: 'eu-central-1'

      release-s3-bucket:
        description: |
          Upload application release artifact's files to
          given AWS S3 bucket.
        required: false
        type: string
        default: 'milaboratory-artefacts-public-files'

      release-s3-path:
        description: |
          Upload application release artifact's files to given 'path'
          in S3 bucket.

          Released application files would be uploaded to:
            's3://<s3-bucket>/<s3-path>/<file>'

        type: string
        required: false
        default: 'cdn/software/${{ github.event.repository.name }}'

      release-s3-alternative-urls:
        description: |
          Customizes S3 object download URLs in notifications:
            <path regexp> -> <url>

          For more information see:
            blocks/release/s3/action.yaml -> inputs -> alternative-urls

        required: false
        type: string
        default: |
          ^/cdn/software/ -> https://cdn.milaboratory.com/software/

      release-s3-add-version:
        description: |
          Add version number to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<version>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<version>'.

        type: boolean
        required: false
        default: true

      release-s3-add-sha:
        description: |
          Add SHA to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<SHA>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<SHA>'.

          'false' or '' (empty string) disables feature
          'true'     - adds full SHA to file names
          '<number>' - adds to file names SHA abbreviated to given length in symbols,
                       e.g. '3' will cause only first 3 symbols of SHA to be added to file names.

        type: string
        required: false
        default: 'false'

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: 'true'

      notify-tests:
        description: |
          Enable notifications about tests status (ready/failed)
          Possible values are:
           - 'true' - send all notifications about tests status (both success and failed)
           - 'failure-only' - send notification about failed tests, don't notify on success
           - 'success-only' - send notification about success tests, don't notify on failures
           - 'false' - don't send notifications about tests results at all.
        required: false
        type: string
        default: 'true'

    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false

      GRADLE_PROPERTIES:
        description: |
          Create properties file with given contents before starting the build
        required: false

      AWS_KEY_ID:
        description: |
          AWS Key ID for S3 to use when uloading tests report.
          Empty value disables report upload step.
        required: false
      AWS_KEY_SECRET:
        description: |
          AWS Key Secret for S3 to use when uploading tests report.
          Empty value disables report upload step.
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

      GIT_CRYPT_GPG_KEY:
        description: |
          base64-encoded GPG key pair
          (see actions/git/crypt inputs description)
        required: false

      GIT_CRYPT_KEY_PASSWORD:
        description: |
          Password for GPG key
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v3

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  build:
    name: :build
    runs-on: ubuntu-latest

    needs:
      - init

    steps:
      - uses: milaboratory/github-ci/actions/env@v3
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v3
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - uses: milaboratory/github-ci/blocks/java/build@v3
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: ${{ inputs.build-tasks }}
          exclude-tasks: test

          data-cache-key: ${{ inputs.build-data-cache-key }}
          data-cache-paths: ${{ inputs.build-data-cache-paths }}

          properties: |
            mi-ci-stage=build
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

  test-unit:
    name: :test (unit)
    runs-on: ubuntu-latest

    if: inputs.test-unit
    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/actions/env@v3
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v3
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - id: test
        uses: milaboratory/github-ci/blocks/java/test@v3
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          before-hooks-tasks: ${{ inputs.test-unit-before-tasks }}
          tasks: ${{ inputs.test-unit-tasks }}

          hook-before: .mi-ci/hooks/test-unit-before.sh
          hook-after: .mi-ci/hooks/test-unit-after.sh

          test-data-cache-enabled: ${{ inputs.test-unit-cache }}
          test-data-cache-paths: ${{ inputs.test-unit-cache-paths }}
          test-data-cache-key: ${{ inputs.test-unit-cache-key }}

          properties: |
            mi-ci-stage=test
            mi-ci-test-type=unit
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

          s3-key-id: ${{ secrets.AWS_KEY_ID }}
          s3-key-secret: ${{ secrets.AWS_KEY_SECRET }}
          upload-report: ${{ secrets.AWS_KEY_ID != '' && secrets.AWS_KEY_SECRET != '' }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

      report-uploaded: ${{ steps.test.outputs.report-uploaded }}
      report-url: https://cdn.milaboratory.com/internal/ci/${{ steps.test.outputs.report-path }}index.html

  notify-test-unit:
    name: notify unit test
    runs-on: ubuntu-latest

    if:  always()
      && needs.test-unit.outputs.started == 'true'
      && inputs.notify-tests != 'false'
    needs:
      - test-unit

    steps:
      - uses: milaboratory/github-ci/blocks/notify/tests@v3
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          notification-mode: ${{ inputs.notify-tests }}
          tests-status: ${{ needs.test-unit.result }}
          tests-type: 'Unit'

          product-name: ${{ inputs.product-name }}
          report-url: ${{ fromJSON(needs.test-unit.outputs.report-uploaded) && needs.test-unit.outputs.report-url || '' }}

  test-integration:
    name: :test (integration)
    runs-on: ubuntu-latest

    if: inputs.test-integration
    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/actions/env@v3
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v3
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - id: test
        uses: milaboratory/github-ci/blocks/java/test@v3
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          before-hooks-tasks: ${{ inputs.test-integration-before-tasks }}
          tasks: ${{ inputs.test-integration-tasks }}

          hook-before: .mi-ci/hooks/test-integration-before.sh
          hook-after: .mi-ci/hooks/test-integration-after.sh

          test-data-cache-enabled: ${{ inputs.test-integration-cache }}
          test-data-cache-paths: ${{ inputs.test-integration-cache-paths }}
          test-data-cache-key: ${{ inputs.test-integration-cache-key }}

          python-version: ${{ inputs.test-integration-python-version }}

          properties: |
            mi-ci-stage=test
            mi-ci-test-type=integration
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

          s3-key-id: ${{ secrets.AWS_KEY_ID }}
          s3-key-secret: ${{ secrets.AWS_KEY_SECRET }}
          upload-report: ${{ secrets.AWS_KEY_ID != '' && secrets.AWS_KEY_SECRET != '' }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

      report-uploaded: ${{ steps.test.outputs.report-uploaded }}
      report-url: https://cdn.milaboratory.com/internal/ci/${{ steps.test.outputs.report-path }}index.html

  notify-test-integration:
    name: notify integration test
    runs-on: ubuntu-latest

    if:  always()
      && needs.test-integration.outputs.started == 'true'
      && inputs.notify-tests != 'false'

    needs:
      - test-integration

    steps:
      - uses: milaboratory/github-ci/blocks/notify/tests@v3
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          notification-mode: ${{ inputs.notify-tests }}
          tests-status: ${{ needs.test-integration.result }}
          tests-type: 'Integration'

          product-name: ${{ inputs.product-name }}
          report-url: ${{ fromJSON(needs.test-integration.outputs.report-uploaded) && needs.test-integration.outputs.report-url || '' }}

  distArchive:
    name: archive
    runs-on: ubuntu-latest

    if: inputs.dist-archive
    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/actions/env@v3
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v3
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - uses: milaboratory/github-ci/blocks/java/build@v3
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: ${{ inputs.dist-archive-tasks }}
          exclude-tasks: test

          data-cache-key: ${{ inputs.build-data-cache-key }}
          data-cache-paths: ${{ inputs.build-data-cache-paths }}

          artifact-name: ${{ inputs.product-name-slug }}
          artifact-paths: ${{ inputs.dist-archive-paths }}
          artifact-retention: ${{ inputs.dist-artifact-retention }}

          properties: |
            mi-ci-stage=dist
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

      - name: Upload to S3
        id: s3
        if: ${{ inputs.dist-archive-s3 }}
        uses: milaboratory/github-ci/blocks/release/s3@v3
        with:
          artifact-name: ${{ inputs.product-name-slug }}
          add-version: ${{ inputs.dist-archive-s3-add-version }}
          add-sha: ${{ inputs.dist-archive-s3-add-sha }}

          s3-key-id: ${{ secrets.AWS_KEY_ID }}
          s3-key-secret: ${{ secrets.AWS_KEY_SECRET }}

          s3-region: ${{ inputs.dist-archive-s3-region }}
          s3-bucket: ${{ inputs.dist-archive-s3-bucket }}
          s3-path: ${{ inputs.dist-archive-s3-path }}

          alternative-urls: ${{ inputs.dist-archive-s3-alternative-urls }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

      s3-files: ${{ steps.s3.outputs.uploaded }}
      s3-files-json: ${{ steps.s3.outputs.uploaded-json }}
      s3-urls: ${{ steps.s3.outputs.download }}
      s3-urls-json: ${{ steps.s3.outputs.download-json }}

  distDocker:
    name: docker
    runs-on: ubuntu-latest

    if: inputs.dist-docker
    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/actions/env@v3
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v3
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - uses: milaboratory/github-ci/blocks/java/build@v3
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: ${{ inputs.dist-docker-tasks }}
          exclude-tasks: test

          data-cache-key: ${{ inputs.build-data-cache-key }}
          data-cache-paths: ${{ inputs.build-data-cache-paths }}

          properties: |
            mi-ci-stage=dist
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

      - uses: milaboratory/github-ci/actions/helpers/default-value@v3
        id: project
        with:
          value: ${{ inputs.dist-docker-image-name }}
          default: ${{ inputs.build-project }}

      - uses: milaboratory/github-ci/blocks/java/publish/docker@v3
        id: docker-push
        with:
          project: ${{ steps.project.outputs.value }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

      docker-tags: ${{ steps.docker-push.outputs.pushed-json }}

  distLibrary:
    name: library
    runs-on: ubuntu-latest

    if:  inputs.dist-library
      && inputs.dist-library-dev-tasks != ''
    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/actions/env@v3
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v3
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - name: publish lib to dev
        uses: milaboratory/github-ci/blocks/java/build@v3
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: ${{ inputs.dist-library-dev-tasks }}
          exclude-tasks: test

          data-cache-key: ${{ inputs.build-data-cache-key }}
          data-cache-paths: ${{ inputs.build-data-cache-paths }}

          properties: |
            mi-ci-stage=publish
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

      - id: props
        uses: milaboratory/github-ci/actions/java/gradle/properties/read@v3
        with:
          project-dir: ${{ inputs.build-project-dir }}
          project-name: ${{ inputs.build-project }}

      - id: context
        uses: milaboratory/github-ci/actions/context@v3

      - name: Prepare JSON list of published libraries
        id: libs-list
        uses: milaboratory/github-ci/actions/strings/json-list@v3
        with:
          input: |-
            ${{ steps.props.outputs.group}}:${{ steps.props.outputs.name }}:${{ steps.context.outputs.current-version }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

      libs-list: ${{ steps.libs-list.outputs.result }}

  update-cdn-link:
    name: Update the latest build link on the CDN
    runs-on: ubuntu-latest

    if: inputs.cdn-redirect-s3
      &&  needs.build.result != 'cancelled'

    needs:
      - build
      - distArchive

    steps:
      - id: cdn-string
        uses: milaboratory/github-ci/actions/shell@v3
        with:
          dump-stdout: false
          run: |
            CDN_URL=$(echo '${{ needs.distArchive.outputs.s3-urls-json }}' | jq -r  -c '.[]')
            ghwa_set_output "converted_cdn_url" "${CDN_URL}"

      - uses: milaboratory/github-ci/blocks/update-cdn-link@v3
        with:
          cdn-redirect-link: ${{ fromJSON( steps.cdn-string.outputs.data ).converted_cdn_url }}
          s3-key-id: ${{ secrets.AWS_KEY_ID }}
          s3-key-secret: ${{ secrets.AWS_KEY_SECRET }}
          s3-region: ${{ inputs.dist-archive-s3-region }}
          s3-bucket: ${{ inputs.dist-archive-s3-bucket }}
          s3-bucket-path: ${{ inputs.cdn-redirect-s3-bucket-path }}
          s3-bucket-key: ${{ inputs.cdn-redirect-s3-bucket-key }}


  notify-build:
    name: Notify build
    runs-on: ubuntu-latest

    if:  always()
      && inputs.notify-telegram
      && inputs.notify-build != 'false'
      && needs.build.result != 'cancelled'

    needs:
      # Get build status from first build job
      - build

      # Wait for docker image and archive to be built before sending notification
      - distDocker
      - distArchive
      - distLibrary

    steps:
      - uses: milaboratory/github-ci/blocks/notify/build@v3
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          notification-mode: ${{ inputs.notify-build }}
          build-status: |
            ${{ needs.build.result }}
            ${{ needs.distDocker.result }}
            ${{ needs.distArchive.result }}
            ${{ needs.distLibrary.result }}

          product-name: ${{ inputs.product-name }}
          docker-images: ${{ needs.distDocker.outputs.docker-tags }}
          maven-packages: ${{ needs.distLibrary.outputs.libs-list }}
          download-links: ${{ needs.distArchive.outputs.s3-urls-json }}

  can-release:
    name: Can release
    runs-on: ubuntu-latest

    needs:
      - init

      - build
      - distDocker
      - distArchive
      - distLibrary

    if: always()
      && fromJSON(needs.init.outputs.is-release)

      && needs.build.result       != 'failure'
      && needs.distDocker.result  != 'failure'
      && needs.distArchive.result != 'failure'
      && needs.distLibrary.result != 'failure'

      && (
           needs.distDocker.result  != 'skipped'
        || needs.distArchive.result != 'skipped'
        || needs.distLibrary.result != 'skipped'
      )

    steps:
      - shell: bash
        run: 'true'

  notify-release-review:
    name: Notify review required
    runs-on: ubuntu-latest

    if:  always()
      && needs.can-release.result == 'success'
      && (
           needs.test-unit.outputs.started        == 'true'
        || needs.test-integration.outputs.started == 'true'
      )

    needs:
      - can-release

      # Send 'review required' notification only after all tests finished
      - notify-test-unit
      - notify-test-integration

    steps:
      - uses: milaboratory/github-ci/blocks/notify/review-required@v3
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          message: new version of app is ready for release.
          product-name: ${{ inputs.product-name }}

  release:
    name: Confirm release
    runs-on: ubuntu-latest

    needs:
      - can-release

    if:  always()
      && needs.can-release.result == 'success'

    environment: release

    steps:
      - shell: bash
        run: 'true'

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

  create-release:
    name: GitHub release
    runs-on: ubuntu-latest

    needs:
      - release

    if:  always()
      && needs.release.result == 'success'

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v3

      - uses: actions/download-artifact@v2
        if: inputs.dist-archive
        with:
          name: ${{ inputs.product-name-slug }}
          path: release-files

      - name: Create release
        uses: milaboratory/github-ci/actions/release/create@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

          name: ${{ steps.context.outputs.current-version }}
          tag: ${{ steps.context.outputs.current-version-tag }}
          draft: ${{ inputs.release-github-draft }}

          assets: |
            release-files/**

          changelog-exclude-types: ${{ inputs.changelog-exclude-types }}

  upload-release-s3:
    name: S3 archive release
    runs-on: ubuntu-latest

    if:  always()
      && needs.release.result == 'success'
      && inputs.release-to-s3
      && inputs.dist-archive

    needs:
      - release

    steps:
      - id: s3
        name: Upload to S3
        uses: milaboratory/github-ci/blocks/release/s3@v3
        with:
          artifact-name: ${{ inputs.product-name-slug }}
          add-version: ${{ inputs.release-s3-add-version }}
          add-sha: ${{ inputs.release-s3-add-sha }}

          s3-key-id: ${{ secrets.AWS_KEY_ID }}
          s3-key-secret: ${{ secrets.AWS_KEY_SECRET }}

          s3-region: ${{ inputs.release-s3-region }}
          s3-bucket: ${{ inputs.release-s3-bucket }}
          s3-path: ${{ inputs.release-s3-path }}

          alternative-urls: ${{ inputs.release-s3-alternative-urls }}

    outputs:
      s3-files: ${{ steps.s3.outputs.uploaded }}
      s3-files-json: ${{ steps.s3.outputs.uploaded-json }}
      s3-urls: ${{ steps.s3.outputs.download }}
      s3-urls-json: ${{ steps.s3.outputs.download-json }}

  publish-release-lib:
    name: library release
    runs-on: ubuntu-latest

    if:  always()
      && needs.release.result == 'success'
      && inputs.dist-library
      && inputs.dist-library-release-tasks != ''
    needs:
      - release

    steps:
      - uses: milaboratory/github-ci/actions/env@v3
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v3
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - name: publish lib
        uses: milaboratory/github-ci/blocks/java/build@v3
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: ${{ inputs.dist-library-release-tasks }}
          exclude-tasks: test

          data-cache-key: ${{ inputs.build-data-cache-key }}
          data-cache-paths: ${{ inputs.build-data-cache-paths }}

          properties: |
            mi-ci-stage=publish
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

      - id: props
        uses: milaboratory/github-ci/actions/java/gradle/properties/read@v3
        with:
          project-dir: ${{ inputs.build-project-dir }}
          project-name: ${{ inputs.build-project }}

      - id: context
        uses: milaboratory/github-ci/actions/context@v3

      - name: Prepare JSON list of published libraries
        id: libs-list
        uses: milaboratory/github-ci/actions/strings/json-list@v3
        with:
          input: |-
            ${{ steps.props.outputs.group}}:${{ steps.props.outputs.name }}:${{ steps.context.outputs.current-version }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'

      libs-list: ${{ steps.libs-list.outputs.result }}

  notify-release:
    name: notify release
    runs-on: ubuntu-latest

    if:  always()
      && needs.release.result == 'success'
    needs:
      - release

      - create-release
      - upload-release-s3
      - publish-release-lib

    steps:
      - uses: milaboratory/github-ci/blocks/notify/release@v3
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          job-status: |
            ${{ needs.create-release.result }}
            ${{ needs.upload-release-s3.result }}
            ${{ needs.publish-release-lib.result }}

          product-name: ${{ inputs.product-name }}

          maven-packages: ${{ needs.publish-release-lib.outputs.libs-list }}
          download-links: ${{ needs.upload-release-s3.outputs.s3-urls-json }}
