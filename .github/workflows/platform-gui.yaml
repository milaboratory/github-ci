# This workflow will do a clean prepare of node dependencies,
# cache/restore them, build the source code and run tests across different OS

name: Build Platform GUI

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in texts
        type: string
        required: false
        default: ${{ github.repository }}
      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      #
      # Checkout settings
      #
      git-crypt-unlock:
        description: |
          Perform `git ctypt unlock` after each fresh repository checkout

          NOTE: don't forget to set the following secrets:
                  - GIT_CRYPT_GPG_KEY
                  - GIT_CRYPT_KEY_PASSWORD

        type: boolean
        required: false
        default: false

      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''

      #
      # Environment control
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'

      #
      # NodeJS and OS settings
      #
      node-version:
        description: |
          Node version to use
        type: string
        required: true
      os:
        description: |
          OS to build for.
          Examples: ubuntu-latest, macos-latest, windows-latest

          Check labels of GitHub-hosted runners for more info:
          https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#github-hosted-runners
        type: string
        required: true

      #
      # Build control
      #
      build-version:
        description: |
          Set version number in 'package.json' file to given value.
        type: string
        required: false
      build-script-name:
        description: |
          Name of script for application build
        type: string
        required: true
        default: 'build'
      build-working-directory:
        description: |
          Directory where NPM/Yarn commands should be run
        type: string
        required: false
        default: '.'
      skip-build:
        description: |
          Whether the action should execute the NPM build script before running 'electron-builder'
        type: string
        required: false
        default: false
      electron-builder-args:
        description: |
          Other arguments to pass to the `electron-builder` command, e.g. configuration overrides
        type: string
        required: false
        default: ''
      is-electron-application:
        description: |
          If 'true' enables cache for an Electron application,
          if 'false', enables cache for a generic NodeJS application.
        type: string
        required: false
        default: 'true'

      #
      # Test control
      #
      test-unit:
        description: |
          Run unit tests
        type: boolean
        required: false
        default: false
      test-unit-names-list:
        description: |
          Comma-separated list of unit tests names.
          Each name is separate test.
          e.g. 'test:e2e', 'test:main' e.t.c
        type: string
        required: false
        default: ''
      test-static:
        description: |
          Run static tests
        type: boolean
        required: false
        default: false
      test-static-names-list:
        description: |
          Comma-separated list of static tests names.
          Each name is separate test.
          e.g. 'lint', 'typecheck' e.t.c
        type: string
        required: false
        default: ''

      #
      # Archive distribution control
      #
      dist-archive:
        description: |
          Distribute application in archive:
           - upload to GitHub Artifacts storage;
           - save as GitHub Release asset;
           - upload to S3 bucket
             (see <dist-archive-s3> and <release-to-s3> inputs);

        type: boolean
        required: false
        default: false

      dist-artifact-retention:
        description: |
          Time in days to keep build artifacts before removing them
        type: number
        required: false
        default: 7

      dist-archive-s3:
        description: |
          Upload application archives to S3 bucket.
          Archive is uploaded to bucket immediately after creation regardless
          of build type (release/dev/...).

          This means, that if you use the same upload settings for
          <dist-archive-s3-*> and <release-s3-*>, the release file will be
          uploaded to S3 bucket _before_ release confirmation.

        type: boolean
        required: false
        default: false

      dist-archive-s3-iam-role-to-assume:
        description: |
          The ARN of a IAM role to assume and configure the Actions environment with
          assumed role credentials.
        type: string
        required: false
        default: ''

      dist-archive-s3-region:
        description: |
          Upload application release artifact's files to
          AWS S3 bucket in given region.
        type: string
        required: false
        default: 'eu-central-1'

      dist-archive-s3-bucket:
        description: |
          Upload application release artifact's files to
          given AWS S3 bucket.
        required: false
        type: string
        default: 'milaboratory-artefacts-public-files'

      dist-archive-s3-alternative-urls:
        description: |
          Customizes S3 object download URLs in notifications:
            <path regexp> -> <url>

          For more information see:
            blocks/release/s3/action.yaml -> inputs -> alternative-urls

        required: false
        type: string
        default: |
          ^/cdn/software/ -> https://cdn.milaboratory.com/software/

      dist-archive-s3-path:
        description: |
          Upload application release artifact's files to given 'path'
          in S3 bucket.

          Released application files would be uploaded to:
            's3://<s3-bucket>/<s3-path>/<file>'

        type: string
        required: false
        default: 'cdn/software/${{ github.event.repository.name }}'

      dist-archive-s3-add-version:
        description: |
          Add version number to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<version>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<version>'.

        type: boolean
        required: false
        default: true

      dist-archive-s3-add-sha:
        description: |
          Add SHA to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<SHA>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<SHA>'.

          'false' or '' (empty string) disables feature
          'true'     - adds full SHA to file names
          '<number>' - adds to file names SHA abbreviated to given length in symbols,
                       e.g. '3' will cause only first 3 symbols of SHA to be added to file names.

        type: string
        required: false
        default: 'false'

      #
      # Release control
      #
      draft-ttl-threshold:
        description: |
          Delete drafts older than the set threshold (e.g. '1s', '5d', '1y')
        type: string
        required: false
        default: '7d'

      changelog-exclude-types:
        description: |
          Comma-separated list of change types to skip during
          changelog generation for release.

          See 'Conventional Commits' spec for more info:
          https://www.conventionalcommits.org/en/v1.0.0/

          Default: 'doc,chore'
        type: string
        required: false
        default: doc,chore

      release-to-s3:
        description: |
          Set it to 'true' if you want to upload releases to S3 bucket
          This feature requires 'dist-archive' feature to be enabled and
          configured. The file created at 'dist-archive' step is uploaded
          to S3 storage.
        type: boolean
        required: false
        default: false

      release-s3-iam-role-to-assume:
        description: |
          The ARN of a IAM role to assume and configure the Actions environment with
          assumed role credentials.
        type: string
        required: false
        default: ''

      release-s3-region:
        description: |
          Upload application release artifact's files to
          AWS S3 bucket in given region.
        type: string
        required: false
        default: 'eu-central-1'

      release-s3-bucket:
        description: |
          Upload application release artifact's files to
          given AWS S3 bucket.
        required: false
        type: string
        default: 'milaboratory-artefacts-public-files'

      release-s3-path:
        description: |
          Upload application release artifact's files to given 'path'
          in S3 bucket.

          Released application files would be uploaded to:
            's3://<s3-bucket>/<s3-path>/<file>'

        type: string
        required: false
        default: 'cdn/software/${{ github.event.repository.name }}'

      release-s3-alternative-urls:
        description: |
          Customizes S3 object download URLs in notifications:
            <path regexp> -> <url>

          For more information see:
            blocks/release/s3/action.yaml -> inputs -> alternative-urls

        required: false
        type: string
        default: |
          ^/cdn/software/ -> https://cdn.milaboratory.com/software/

      release-s3-add-version:
        description: |
          Add version number to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<version>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<version>'.

        type: boolean
        required: false
        default: true

      release-s3-add-sha:
        description: |
          Add SHA to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<SHA>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<SHA>'.

          'false' or '' (empty string) disables feature
          'true'     - adds full SHA to file names
          '<number>' - adds to file names SHA abbreviated to given length in symbols,
                       e.g. '3' will cause only first 3 symbols of SHA to be added to file names.

        type: string
        required: false
        default: 'false'

      #
      # Dependencies download control
      #
      java-url:
        description: |
          JAVA download url.
        type: string
        required: false
        default: 'https://corretto.aws/downloads/latest'

      mixcr-url:
        description: |
          CDN url for MiXCR.
        type: string
        required: false
        default: 'https://cdn.milaboratory.com/software/mixcr'

      pl-s3-iam-role-to-assume:
        description: |
          The ARN of a IAM role to assume and configure the Actions environment with
          assumed role credentials.
        type: string
        required: false
        default: ''

      pl-s3-region:
        description: |
          Download the platform application artifact files
          from the given AWS S3 bucket in the given region.
        type: string
        required: false
        default: 'eu-central-1'

      pl-s3-bucket:
        description: |
          Download the platform application artifact files from
          the given AWS S3 bucket.
        required: false
        type: string
        default: 'milab-euce1-prod-pkgs-s3-static-files'

      #
      # NPM registry settings
      #
      registry-url:
        description: |
          The npm registry url to set up for auth
          and publication of the node js package.
        type: string
        required: false
        default: 'https://npm.pkg.github.com'

      scope:
        description: |
          Scope for authenticating against npm registries.
        type: string
        required: false
        default: ${{ format('{0}{1}', '@', github.repository_owner) }}

      always-auth:
        description: |
          Set always-auth in npmrc.
        type: string
        required: false
        default: 'false'

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: 'true'

      notify-tests:
        description: |
          Enable notifications about tests status (ready/failed)
          Possible values are:
           - 'true' - send all notifications about tests status (both success and failed)
           - 'failure-only' - send notification about failed tests, don't notify on success
           - 'success-only' - send notification about success tests, don't notify on failures
           - 'false' - don't send notifications about tests results at all.
        required: false
        type: string
        default: 'true'

    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false

      GRADLE_PROPERTIES:
        description: |
          Create properties file with given contents before starting the build
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false

      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

      GIT_CRYPT_GPG_KEY:
        description: |
          base64-encoded GPG key pair
          (see actions/git/crypt inputs description)
        required: false

      GIT_CRYPT_KEY_PASSWORD:
        description: |
          Password for GPG key
        required: false

      MAC_SIGN_CERT:
        description: |
          base64-encoded p12 signing certificate file for the macOS
          (more info here https://www.electron.build/code-signing)
        required: false

      MAC_SIGN_CERT_PWD:
        description: |
          password to decrypt the p12 signing certificate for the macOS
        required: false

      MAC_NOTR_API_KEY:
        description: |
          base64-encoded content of an API key file
        required: false

      MAC_NOTR_API_KEY_ID:
        description: |
          Key ID found on App Store Connect for the API key file
        required: false

      MAC_NOTR_API_KEY_ISSUER_ID:
        description: |
          Issuer ID found on App Store Connect for the API key file
        required: false

      WIN_SIGN_CERT:
        description: |
          base64-encoded p12 certificate file for the Windows
          (more info here https://docs.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage)
        required: false

      WIN_SIGN_CERT_PWD:
        description: |
          password to decrypt the p12 signing certificate for the Windows
        required: false


jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  create-draft-release:
    name: Create Draft release
    runs-on: ubuntu-latest

    needs:
      - init

    if: ${{ !fromJSON(needs.init.outputs.is-release)  }}

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

      - uses: milaboratory/github-ci/actions/release/delete-draft/@v4-beta
        with:
          draft-ttl-threshold: ${{ inputs.draft-ttl-threshold }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Draft release
        id: draft-release
        uses: milaboratory/github-ci/actions/release/create@v4-beta
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

          draft: true
          pre-release: true
          name: ${{ steps.context.outputs.current-version }}
          tag: ${{ steps.context.outputs.current-version }}

          assets: release-files/*

          changelog-exclude-types: ${{ inputs.changelog-exclude-types }}

  build:
    strategy:
      matrix:
        os: ${{ fromJSON( inputs.os ) }}

    name: Build application
    runs-on: ${{ matrix.os }}

    needs:
      - init
    permissions:
      id-token: write
      contents: read
      packages: read

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4-beta
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.pl-s3-iam-role-to-assume }}
          aws-region: ${{ inputs.pl-s3-region }}

      - name: Get platform gui dependecies
        id: get_deps
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          PL_DIST_DIR: "pl-dist"
          EXT_PROGRAMS_PATH: "external_programs"
          EXT_PROGRAMS_SCRIPT_NAME: "download.sh"
          S3_BUKCET: ${{ inputs.pl-s3-bucket }}
        with:
          run: |
            GET_OS_ARCH=$(uname -m)
            case "${GET_OS_ARCH}" in
              x86_64)
                RUNNER_OS_ARCH="amd64"
                ;;
              aarch64 | arm64)
                RUNNER_OS_ARCH="arm64"
                ;;
              *)
                echo "Arch is not in the list: ${GET_OS_ARCH}"
                exit 1
                ;;
            esac

            RUNNER_OS_SANITEZED=$(echo ${RUNNER_OS} | awk '{print tolower($0)}')
            PL_VERSION=$(jq -r ".dependencies.architecture.$RUNNER_OS_ARCH.$RUNNER_OS_SANITEZED[] | select(.name == \"pl\") | .version" plui-dependencies.json)
            PL_COMMON_VERSION=$(jq -r ".dependencies.common[] | select(.name == \"pl\") | .version" plui-dependencies.json)

            if [ -z "${PL_VERSION}" ];then
              PL_VERSION="${PL_COMMON_VERSION}"
            fi

            PL_ARCHIVE="pl-${PL_VERSION}-${RUNNER_OS_ARCH}.tgz"
            PL_DL_LINK="s3://${S3_BUKCET}/pl/${RUNNER_OS_SANITEZED}/${PL_ARCHIVE}"

            mkdir -v ./"${PL_DIST_DIR}"
            mkdir -pv ./"${EXT_PROGRAMS_PATH}"

            echo "Downloading platform archive..."
            aws s3 cp --no-progress "${PL_DL_LINK}" ./
            if [ -f "${PL_ARCHIVE}" ];then
             echo "Extracting platform archive..."
             if [ "${RUNNER_OS}" == "Linux" ] || [ ${RUNNER_OS} == "macOS" ];then
               tar -zxvf "./${PL_ARCHIVE}" -C "./${PL_DIST_DIR}"
             fi
            else
              echo "Platform archive not found"
              exit 1
            fi

            echo "Downloading platform dependencies"
            if [ -f "./${PL_DIST_DIR}/${EXT_PROGRAMS_SCRIPT_NAME}" ];then
              cd "./${EXT_PROGRAMS_PATH}" && "../${PL_DIST_DIR}/${EXT_PROGRAMS_SCRIPT_NAME}"
              rm -vf "../${PL_DIST_DIR}/${EXT_PROGRAMS_SCRIPT_NAME}"
            else
              echo "Dependencies script not found"
              exit 1
            fi

      - name: Clean-up and check content step
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          EXT_PROGRAMS_PATH: "external_programs"
        with:
          run: |
            cd "./${EXT_PROGRAMS_PATH}"
            ls -la
            rm -rfv "./amazon-corretto/Contents/MacOS" && \
            rm -rfv "./amazon-corretto/Contents/_CodeSignature"

      - id: artifact
        if: always()
        uses: milaboratory/github-ci/actions/shell@v4-beta
        env:
          APP_NAME: ${{ inputs.app-name }}
          APP_NAME_SLUG: ${{ inputs.app-name-slug }}
        with:
          dump-stdout: false
          run: |
            case "${RUNNER_OS}" in
              Linux)
                ghwa_set_output "app_name_slug" "${APP_NAME_SLUG}-linux"
                ghwa_set_output "path" "dist/*.AppImage"
                ghwa_set_output "app_name" "${APP_NAME} ${RUNNER_OS}"
                ;;
              macOS)
                ghwa_set_output "app_name_slug" "${APP_NAME_SLUG}-macos"
                ghwa_set_output "path" "dist/*.dmg"
                ghwa_set_output "app_name" "${APP_NAME} ${RUNNER_OS}"
                ;;
              Windows)
                ghwa_set_output "app_name_slug" "${APP_NAME_SLUG}-windows"
                ghwa_set_output "path" "dist/*.exe"
                ghwa_set_output "app_name" "${APP_NAME} ${RUNNER_OS}"
                ;;
              *)
                echo "Agent OS couldn't be determined: ${RUNNER_OS}"
                ghwa_set_output "app_name_slug" ""
                ghwa_set_output "path" ""
                ghwa_set_output "app_name" ""
                ;;
            esac

      - uses: milaboratory/github-ci/blocks/node/build/electron@v4-beta
        with:
          build-version: ${{ steps.context.outputs.current-version }}
          build-script-name: ${{ inputs.build-script-name }}
          build-working-directory: ${{ inputs.build-working-directory }}
          skip-build: ${{ inputs.skip-build }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          electron-builder-args: ${{ inputs.electron-builder-args }}
          is-release: ${{ steps.context.outputs.is-release }}
          is-electron-application: ${{ inputs.is-electron-application }}
          mac-sign-cert: ${{ secrets.MAC_SIGN_CERT }}
          mac-sign-cert-pwd: ${{ secrets.MAC_SIGN_CERT_PWD }}
          mac-notr-api-key: ${{ secrets.MAC_NOTR_API_KEY }}
          mac-notr-api-key-id: ${{ secrets.MAC_NOTR_API_KEY_ID }}
          mac-notr-api-key-issuer-id: ${{ secrets.MAC_NOTR_API_KEY_ISSUER_ID }}
          win-electron-app-path: ${{ fromJSON( steps.artifact.outputs.data ).path }}
          win-code-sign-chain: ${{ secrets.WIN_SIGN_CERT }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          registry-url: ${{ inputs.registry-url }}
          scope: ${{ inputs.scope }}
          always-auth: ${{ inputs.always-auth }}
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}
          gradle-properties: ${{ secrets.GRADLE_PROPERTIES }}

      - name: Save build artifacts
        uses: actions/upload-artifact@v3
        if: fromJSON( steps.artifact.outputs.data ).app_name_slug != ''
        with:
          name: ${{ fromJSON( steps.artifact.outputs.data ).app_name_slug }}
          path: ${{ fromJSON( steps.artifact.outputs.data ).path }}
          retention-days: ${{ inputs.dist-artifact-retention }}

    outputs:
      artifact-app-name: ${{ fromJSON( steps.artifact.outputs.data ).app_name }}
      artifact-app-name-slug: ${{ fromJSON( steps.artifact.outputs.data ).app_name_slug }}


  upload-s3:
    name: Upload archive to s3
    runs-on: ubuntu-latest

    if: ${{ inputs.dist-archive-s3 }}
    needs:
      - build
    permissions:
      id-token: write
      contents: read

    steps:
      - id: s3
        name: Upload to S3
        uses: milaboratory/github-ci/blocks/release/s3@v4-beta
        with:
          artifact-name: ${{ needs.build.outputs.artifact-app-name-slug }}
          add-version: ${{ inputs.dist-archive-s3-add-version }}
          add-sha: ${{ inputs.dist-archive-s3-add-sha }}

          s3-iam-role-to-assume: ${{ inputs.dist-archive-s3-iam-role-to-assume }}
          s3-region: ${{ inputs.dist-archive-s3-region }}
          s3-bucket: ${{ inputs.dist-archive-s3-bucket }}
          s3-path: ${{ inputs.dist-archive-s3-path }}

          alternative-urls: ${{ inputs.dist-archive-s3-alternative-urls }}

    outputs:
      s3-files: ${{ steps.s3.outputs.uploaded }}
      s3-files-json: ${{ steps.s3.outputs.uploaded-json }}
      s3-urls: ${{ steps.s3.outputs.download }}
      s3-urls-json: ${{ steps.s3.outputs.download-json }}


  test-unit:
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON( inputs.os ) }}
        tests: ${{ fromJSON( inputs.test-unit-names-list ) }}

    name: :test (unit)
    runs-on: ${{ matrix.os }}

    if: inputs.test-unit
    needs:
      - build
    permissions:
      contents: read
      packages: read

    steps:
      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4-beta
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - id: test
        uses: milaboratory/github-ci/blocks/node/test@v4-beta
        with:
          test-name: ${{ matrix.tests }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          is-electron-application: ${{ inputs.is-electron-application }}
          registry-url: ${{ inputs.registry-url }}
          scope: ${{ inputs.scope }}
          always-auth: ${{ inputs.always-auth }}
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'
      artifact-app-name: ${{ needs.build.outputs.artifact-app-name }}

  notify-test-unit:
    name: notify unit test
    runs-on: ubuntu-latest

    if:  always()
      && needs.test-unit.outputs.started == 'true'
      && inputs.notify-tests != 'false'

    needs:
      - test-unit

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4-beta
        with:
          input: |
            test
            unit

      - uses: milaboratory/github-ci/blocks/notify/tests@v4-beta
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          notification-mode: ${{ inputs.notify-tests }}
          tests-status: ${{ needs.test-unit.result }}
          tests-type: 'Unit'

          product-name: ${{ needs.test-unit.outputs.artifact-app-name }}
          search-tags: ${{ steps.search-tags.outputs.result }}

  test-static:
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON( inputs.os ) }}
        tests: ${{ fromJSON( inputs.test-unit-names-list ) }}

    name: :test (static)
    runs-on: ${{ matrix.os }}

    if: inputs.test-static
    needs:
      - build
    permissions:
      contents: read
      packages: read

    steps:
      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4-beta
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - id: test
        uses: milaboratory/github-ci/blocks/node/test@v4-beta
        with:
          test-name: ${{ matrix.tests }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          is-electron-application: ${{ inputs.is-electron-application }}
          registry-url: ${{ inputs.registry-url }}
          scope: ${{ inputs.scope }}
          always-auth: ${{ inputs.always-auth }}
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'
      artifact-app-name: ${{ needs.build.outputs.artifact-app-name }}

  notify-test-static:
    name: notify static test
    runs-on: ubuntu-latest

    if:  always()
      && needs.test-static.outputs.started == 'true'
      && inputs.notify-tests != 'false'

    needs:
      - test-static

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4-beta
        with:
          input: |
            test
            static

      - uses: milaboratory/github-ci/blocks/notify/tests@v4-beta
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          notification-mode: ${{ inputs.notify-tests }}
          tests-status: ${{ needs.test-static.result }}
          tests-type: 'Static'

          product-name: ${{ needs.test-static.outputs.artifact-app-name }}
          search-tags: ${{ steps.search-tags.outputs.result }}

  notify-build:
    name: Notify build
    runs-on: ubuntu-latest

    if:  always()
      && inputs.notify-telegram
      && inputs.notify-build != 'false'
      && needs.build.result != 'cancelled'

    needs:
      - build
      - upload-s3

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4-beta
        with:
          input: |
            build

      - uses: milaboratory/github-ci/blocks/notify/build@v4-beta
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          build-status: |
            ${{ needs.build.result }}
            ${{ needs.upload-s3.result }}
          product-name: ${{ needs.build.outputs.artifact-app-name }}
          download-links: ${{ needs.upload-s3.outputs.s3-urls-json }}
          search-tags: ${{ steps.search-tags.outputs.result }}

  can-release:
    name: Can release
    runs-on: ubuntu-latest

    needs:
      - init
      - build

    if: always()
      && fromJSON(needs.init.outputs.is-release)
      && needs.build.result != 'failure'

    steps:
      - shell: bash
        run: 'true'

    outputs:
      artifact-app-name: ${{ needs.build.outputs.artifact-app-name }}
      artifact-app-name-slug: ${{ needs.build.outputs.artifact-app-name-slug }}

  notify-release-review:
    name: Notify review required
    runs-on: ubuntu-latest

    if:  always()
      && needs.can-release.result == 'success'
      && (
      needs.test-unit.outputs.started        == 'true'
      || needs.test-static.outputs.started == 'true'
      )

    needs:
      - can-release

      # Send 'review required' notification only after all tests finished
      - notify-test-unit
      - notify-test-static

    steps:
      - uses: milaboratory/github-ci/blocks/notify/review-required@v4-beta
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          message: new version of app is ready for release.
          product-name: ${{ needs.can-release.outputs.artifact-app-name }}

  release:
    name: Confirm release
    runs-on: ubuntu-latest

    needs:
      - can-release

    if:  always()
      && needs.can-release.result == 'success'

    environment: release

    steps:
      - shell: bash
        run: 'true'

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: 'true'
      artifact-app-name: ${{ needs.can-release.outputs.artifact-app-name }}
      artifact-app-name-slug: ${{ needs.can-release.outputs.artifact-app-name-slug }}

  create-release:
    name: Create release

    runs-on: ubuntu-latest
    needs:
      - release

    environment: release

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta

      - uses: actions/download-artifact@v3
        with:
          name: release-files
          path: release-files

      - name: Create release
        id: release
        uses: milaboratory/github-ci/actions/release/create@v4-beta
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

          name: ${{ steps.context.outputs.current-version }}
          tag: ${{ steps.context.outputs.current-version-tag }}

          assets: release-files/*

          changelog-exclude-types: ${{ inputs.changelog-exclude-types }}

    outputs:
      release-id: ${{ steps.release.outputs.id }}
      release-url: ${{ steps.release.outputs.html_url }}

  upload-release-s3:
    name: Upload archive release to s3
    runs-on: ubuntu-latest

    if: inputs.release-to-s3 && inputs.dist-archive
    needs:
      - release
    permissions:
      id-token: write
      contents: read

    steps:
      - id: s3
        name: Upload to S3
        uses: milaboratory/github-ci/blocks/release/s3@v4-beta
        with:
          artifact-name: ${{ needs.release.outputs.artifact-app-name-slug }}
          add-version: ${{ inputs.release-s3-add-version }}
          add-sha: ${{ inputs.release-s3-add-sha }}

          s3-iam-role-to-assume: ${{ inputs.release-s3-iam-role-to-assume }}
          s3-region: ${{ inputs.release-s3-region }}
          s3-bucket: ${{ inputs.release-s3-bucket }}
          s3-path: ${{ inputs.release-s3-path }}

          alternative-urls: ${{ inputs.release-s3-alternative-urls }}

    outputs:
      s3-files: ${{ steps.s3.outputs.uploaded }}
      s3-files-json: ${{ steps.s3.outputs.uploaded-json }}
      s3-urls: ${{ steps.s3.outputs.download }}
      s3-urls-json: ${{ steps.s3.outputs.download-json }}

  notify-release:
    name: notify release
    runs-on: ubuntu-latest

    if:  always()
      && needs.release.outputs.started == 'true'
    needs:
      - release
      - create-release
      - upload-release-s3

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4-beta
        with:
          input: |
            release

      - uses: milaboratory/github-ci/blocks/notify/release@v4-beta
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          job-status: |
            ${{ needs.create-release.result }}
            ${{ needs.upload-release-s3.result }}

          product-name: ${{ needs.release.outputs.artifact-app-name  }}
          download-links: ${{ needs.upload-release-s3.outputs.s3-urls-json }}
          search-tags: ${{ steps.search-tags.outputs.result }}