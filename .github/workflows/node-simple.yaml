# This workflow will build and upload nodejs application on the github's npm registry.

name: Build and Upload NodeJS Applications

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}

      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      gha-runner-label:
        description: |
          The label for github actions hosted runner
        type: string
        default: 'ubuntu-latest'

      #
      # Checkout settings
      #
      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ""

      #
      # Environment settings
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: "{}"

      #
      # NodeJS settings
      #
      node-version:
        description: |
          Node version to use
        type: string
        required: true

      node-execution-path:
        description: |
          Specify the path where to execute all node scripts (npm and so on).
          Allows to run workflow inside given directory instead of repository root.
        type: string
        required: false
        default: ''

      #
      # Cache control
      #
      cache-version:
        description: |
          Simple hack, that allows to 'reset' cache for particular job.

          Just change the value of this parameter and the next run will
          not find build cache and will have to start from scratch.

        type: string
        required: false
        default: "v1"

      #
      # Build control
      #
      build-version:
        description: |
          Set version number in 'package.json' file to given value.
        type: string
        required: false

      build-script-name:
        description: |
          The name of a build script
        type: string
        required: false
        default: "build"

      is-electron-application:
        description: |
          If 'true' enables cache for an Electron application,
          if 'false', enables cache for a generic NodeJS application.
        type: string
        required: false
        default: "true"

      #
      # Test control
      #
      test:
        description: |
          Run tests
        type: boolean
        required: false
        default: false

      test-script-name:
        description: |
          The name of a test script for 'npm run <script>' command
        type: string
        required: false
        default: "test"

      #
      # NPM registry settings
      #
      registry-url:
        description: |
          The npm registry url to set up for auth
          and publication of the node js package.
        type: string
        required: false
        default: "https://npm.pkg.github.com"

      scope:
        description: |
          Scope for authenticating against npm registries.
        type: string
        required: false
        default: ${{ format('{0}{1}', '@', github.repository_owner) }}

      always-auth:
        description: |
          Set always-auth in npmrc.
        type: string
        required: false
        default: "false"

      npmrc-config:
        description: |
          Generates a .npmrc file based on provided configuration.
        type: string
        required: false

      #
      # Release control
      #
      publish-script-name:
        description: |
          Run 'npm run <script>' instead of 'npm publish'
        type: string
        required: false
        default: ""

      publish-to-public:
        description: |
          Whether or not the npm package should be published as public.
        type: boolean
        required: false
        default: false

      #
      # AWS S3 Bucket registry control
      #
      aws-login-enable:
        description: |
          Enables the creation of AWS credentials during the GitHub Action workflow.
        type: boolean
        required: false
        default: false

      aws-login-duration:
        description: |
          Maximum time AWS credentials will be valid until expiration.
          Defaults to 1 hour.
        type: number
        required: false
        default: 3600

      #
      # GCP sign control
      #
      gcp-login-enable:
        description: |
          Enables the creation of Google cloud credentials during the GitHub Action workflow.
        type: boolean
        required: false
        default: false

      gcp-sdk-version:
        description: |
          Version or version constraint of the gcloud SDK to install. If
          unspecified, it will accept any installed version of the gcloud SDK. If
          set to "latest", it will download the latest available SDK. If set to a
          version constraint, it will download the latest available version that
          matches the constraint. Examples: "290.0.1" or ">= 197.0.1".
        type: string
        required: false
        default: "latest"

      # We do not put version into secrets because it has very short value.
      #  '1' in secrets may cause '1' to be replaced with '*' everywhere in github workflow logs
      gcp-kms-key-version:
        description: |
          Version of KMS key.
        type: string
        required: false
        default: '1'

      gcp-kms-digest-algorithm:
        description: |
          The algorithm to digest the input.
          Must be one of: sha256, sha384, sha512.
        type: string
        required: false
        default: "sha256"

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: "true"

      notify-tests:
        description: |
          Enable notifications about tests status (ready/failed)
          Possible values are:
           - 'true' - send all notifications about tests status (both success and failed)
           - 'failure-only' - send notification about failed tests, don't notify on success
           - 'success-only' - send notification about success tests, don't notify on failures
           - 'false' - don't send notifications about tests results at all.
        required: false
        type: string
        default: "true"

    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

      AWS_ASSUME_ROLE:
        description: |
          Role to assume in AWS to assume during CI run.
        required: false
      AWS_ASSUME_REGION:
        description: |
          The AWS region for AWS role assumption
        required: false

      GCP_KMS_WORKLOAD_IDENTITY_PROVIDER:
        description: |
          Tha name of the GCP workload identity federation provider.
        required: false
      GCP_KMS_SERVICE_ACCOUNT:
        description: |
          The name of the GCP service account
        required: false
      GCP_KMS_LOCATION:
        description: |
          KMS key and keyring location
        required: false
      GCP_KMS_KEYRING:
        description: |
          KMS keyring name in Google Cloud Platform.
        required: false
      GCP_KMS_KEY_NAME:
        description: |
          KMS key name in Google Cloud Platform.
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}
      current-version: ${{ steps.context.outputs.current-version }}

  build:
    name: :build
    runs-on: ${{ inputs.gha-runner-label }}

    permissions:
      packages: read
      contents: read

    needs:
      - init

    steps:
      - uses: milaboratory/github-ci/actions/shell@v4
        if: inputs.gha-runner-label == 'dev-assets'
        with:
          dump-stdout: false
          run: |
            sudo apt-get update && \
            DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC sudo apt-get install -y build-essential git jq awscli wget unzip

      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - id: npm-pkg-metadata
        uses: milaboratory/github-ci/actions/shell@v4
        with:
          run: |
            NPM_PKG_NAME="$(cat "${GITHUB_WORKSPACE}/package.json" | jq --raw-output '.name')"
            NPM_PKG_VERSION="$(cat "${GITHUB_WORKSPACE}/package.json" | jq --raw-output '.version')"

            ghwa_set_output npm-pkg-name "${NPM_PKG_NAME}"
            ghwa_set_output npm-pkg-version "${NPM_PKG_VERSION}"

      - uses: milaboratory/github-ci/blocks/node/build/generic@v4
        env:
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN }}
        with:
          working-directory: ${{ inputs.node-execution-path }}
          build-script-name: ${{ inputs.build-script-name }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          is-electron-application: ${{ inputs.is-electron-application }}
          registry-url: ${{ inputs.registry-url }}
          scope: ${{ inputs.scope }}
          always-auth: ${{ inputs.always-auth }}
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}
          npmrc-config: ${{ inputs.npmrc-config }}

    outputs:
      npm-pkg-version: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).npm-pkg-version }}

  notify-build:
    name: Notify build
    runs-on: ubuntu-latest

    if: always()
      && inputs.notify-telegram
      && inputs.notify-build != 'false'
      && needs.build.result != 'cancelled'

    needs:
      - build

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4
        with:
          input: |
            build

      - uses: milaboratory/github-ci/blocks/notify/build@v4
        env:
          NPM_PKG_VERSION: ${{ needs.build.outputs.npm-pkg-version }}
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          build-status: |
            ${{ needs.build.result }}
          product-name: ${{ inputs.app-name }}
          override-version: ${{ format('{0}', env.NPM_PKG_VERSION) }}
          search-tags: ${{ steps.search-tags.outputs.result }}

  test:
    name: :test
    runs-on: ${{ inputs.gha-runner-label }}

    if: inputs.test
    permissions:
      packages: read
      contents: read
    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/actions/shell@v4
        if: inputs.gha-runner-label == 'dev-assets'
        with:
          dump-stdout: false
          run: |
            sudo apt-get update && \
            DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC sudo apt-get install -y build-essential git jq awscli wget unzip

      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - id: npm-pkg-metadata
        uses: milaboratory/github-ci/actions/shell@v4
        with:
          run: |
            NPM_PKG_NAME="$(cat "${GITHUB_WORKSPACE}/package.json" | jq --raw-output '.name')"
            NPM_PKG_VERSION="$(cat "${GITHUB_WORKSPACE}/package.json" | jq --raw-output '.version')"

            ghwa_set_output npm-pkg-name "${NPM_PKG_NAME}"
            ghwa_set_output npm-pkg-version "${NPM_PKG_VERSION}"

      - id: test
        uses: milaboratory/github-ci/blocks/node/test@v4
        env:
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN }}
        with:
          working-directory: ${{ inputs.node-execution-path }}
          test-name: ${{ inputs.test-script-name }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          is-electron-application: ${{ inputs.is-electron-application }}
          registry-url: ${{ inputs.registry-url }}
          scope: ${{ inputs.scope }}
          always-auth: ${{ inputs.always-auth }}
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}
          npmrc-config: ${{ inputs.npmrc-config }}

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      npm-pkg-version: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).npm-pkg-version }}
      started: "true"

  notify-test:
    name: notify test
    runs-on: ubuntu-latest

    if: always()
      && inputs.notify-telegram
      && inputs.notify-tests != 'false'
      && needs.test.outputs.started == 'true'

    needs:
      - test

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4
        with:
          input: |
            test
            unit

      - uses: milaboratory/github-ci/blocks/notify/tests@v4
        env:
          NPM_PKG_VERSION: ${{ needs.test.outputs.npm-pkg-version }}
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          notification-mode: ${{ inputs.notify-tests }}
          tests-status: ${{ needs.test.result }}
          tests-type: "Unit"

          product-name: ${{ inputs.app-name }}
          override-version: ${{ format('{0}', env.NPM_PKG_VERSION) }}
          search-tags: ${{ steps.search-tags.outputs.result }}

  can-release:
    name: Can release
    runs-on: ubuntu-latest

    needs:
      - init
      - build
      - test

    if: always()
      && fromJSON(needs.init.outputs.is-release)
      && ( needs.build.result == 'success' || needs.build.result == 'skipped' )
      && ( needs.test.result == 'success' || needs.test.result == 'skipped' )

    steps:
      - shell: bash
        run: "true"

  notify-release-review:
    name: Notify review required
    runs-on: ${{ inputs.gha-runner-label }}

    if: always() && needs.can-release.result == 'success'

    needs:
      - can-release

    steps:
      - uses: milaboratory/github-ci/blocks/notify/review-required@v4
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          message: new version of nodejs app is ready for release.
          product-name: ${{ inputs.app-name }}

  release:
    name: Confirm release
    runs-on: ubuntu-latest

    needs:
      - can-release

    if: always() && needs.can-release.result == 'success'

    environment: release

    steps:
      - shell: bash
        run: "true"

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      started: "true"

  publish-to-npm:
    name: publish
    runs-on: ${{ inputs.gha-runner-label }}
    timeout-minutes: 4320

    if: always()
      && needs.release.result == 'success'

    needs:
      - release

    permissions:
      id-token: write
      packages: write
      contents: write

    steps:
      - uses: milaboratory/github-ci/actions/shell@v4
        if: inputs.gha-runner-label == 'dev-assets'
        with:
          dump-stdout: false
          run: |
            sudo apt-get update && \
            DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC sudo apt-get install -y build-essential git jq awscli wget unzip

      - id: context
        uses: milaboratory/github-ci/actions/context@v4

      - uses: milaboratory/github-ci/actions/env@v4
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - id: npm-pkg-metadata
        uses: milaboratory/github-ci/actions/shell@v4
        with:
          run: |
            NPM_PKG_NAME="$(cat "${GITHUB_WORKSPACE}/package.json" | jq --raw-output '.name')"
            NPM_PKG_VERSION="$(cat "${GITHUB_WORKSPACE}/package.json" | jq --raw-output '.version')"

            ghwa_set_output npm-pkg-name "${NPM_PKG_NAME}"
            ghwa_set_output npm-pkg-version "${NPM_PKG_VERSION}"

      - id: npm-pkg-status
        uses: milaboratory/github-ci/actions/node/npm-pkg-status@v4
        with:
          npm-pkg-name: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).npm-pkg-name }}
          npm-pkg-version: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).npm-pkg-version }}
          registry-url: ${{ inputs.registry-url }}
          npm-auth-token: ${{ env.NPMJS_TOKEN || secrets.GITHUB_TOKEN }}

      - uses: milaboratory/github-ci/blocks/node/build/generic@v4
        if: steps.npm-pkg-status.outputs.exist == '0'
          && steps.context.outputs.is-release == 'true'
        env:
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN }}
        with:
          working-directory: ${{ inputs.node-execution-path }}
          build-script-name: ${{ inputs.build-script-name }}
          node-version: ${{ inputs.node-version }}
          cache-version: ${{ inputs.cache-version }}
          is-electron-application: ${{ inputs.is-electron-application }}
          registry-url: ${{ inputs.registry-url }}
          scope: ${{ inputs.scope }}
          always-auth: ${{ inputs.always-auth }}
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}
          npmrc-config: ${{ inputs.npmrc-config }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4 tag
        if: inputs.aws-login-enable
          && steps.npm-pkg-status.outputs.exist == '0'
          && steps.context.outputs.is-release == 'true'
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-duration-seconds: ${{ inputs.aws-login-duration }}
          aws-region: ${{ secrets.AWS_ASSUME_REGION }}

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        if: inputs.gcp-login-enable
          && steps.npm-pkg-status.outputs.exist == '0'
          && steps.context.outputs.is-release == 'true'
        with:
          workload_identity_provider: ${{ secrets.GCP_KMS_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_KMS_SERVICE_ACCOUNT }}
          token_format: "access_token"

      - name: Set up GCloud SDK
        uses: google-github-actions/setup-gcloud@v2
        if: inputs.gcp-login-enable
          && steps.npm-pkg-status.outputs.exist == '0'
          && steps.context.outputs.is-release == 'true'
        with:
          version: ${{ inputs.gcp-sdk-version }}

      - name: Add MiLab shell utils to PATH
        if: inputs.gcp-login-enable
        uses: milaboratory/github-ci/actions/milab-shell-utils@v4

      - name: Publish npm package
        if: steps.npm-pkg-status.outputs.exist == '0'
          && steps.context.outputs.is-release == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_TOKEN: ${{ env.NPMJS_TOKEN }}
          PUBLISH_SCRIPT: ${{ inputs.publish-script-name }}
          PUBLISH_TO_PUBLIC: ${{ inputs.publish-to-public }}
          GCP_KMS_KEY_VERSION: ${{ inputs.gcp-kms-key-version }}
          GCP_KMS_KEY_NAME: ${{ secrets.GCP_KMS_KEY_NAME }}
          GCP_KMS_KEYRING: ${{ secrets.GCP_KMS_KEYRING }}
          GCP_KMS_LOCATION: ${{ secrets.GCP_KMS_LOCATION }}
          GCP_KMS_DIGEST_ALGORITHM: ${{ inputs.gcp-kms-digest-algorithm }}
        shell: bash
        working-directory: ${{ inputs.node-execution-path }}
        run: |
          if [ -z "${PUBLISH_SCRIPT}" ]; then
            if [ "${PUBLISH_TO_PUBLIC}" == "true" ]; then
              npm publish --access public
            else
              npm publish
            fi
          else
            npm run "${PUBLISH_SCRIPT}"
          fi

      - name: Create release with tag
        if: steps.npm-pkg-status.outputs.exist == '0'
          && steps.context.outputs.is-release == 'true'
        uses: milaboratory/github-ci/actions/release/create-with-tag@v4
        env:
          NPM_PKG_VERSION: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).npm-pkg-version }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ format('v{0}', env.NPM_PKG_VERSION) }}
          tag: ${{ format('v{0}', env.NPM_PKG_VERSION) }}
          commit: ${{ github.sha }}
          draft: false
          prerelease: false

    outputs:
      # Even constant outputs become initialized only after job start.
      # All outputs of skipped jobs are always empty.
      npm-pkg-version: ${{ fromJSON(steps.npm-pkg-metadata.outputs.data).npm-pkg-version }}
      started: "true"

  notify-release:
    name: notify release
    runs-on: ubuntu-latest

    if: always()
      && needs.release.result == 'success'
    needs:
      - release
      - publish-to-npm

    steps:
      - id: search-tags
        if: always()
        uses: milaboratory/github-ci/actions/strings/json-list@v4
        with:
          input: |
            release

      - uses: milaboratory/github-ci/blocks/notify/release@v4
        env:
          NPM_PKG_VERSION: ${{ needs.publish-to-npm.outputs.npm-pkg-version }}
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          job-status: |
            ${{ needs.release.result }}
            ${{ needs.publish-to-npm.result }}

          product-name: ${{ inputs.app-name }}
          override-version: ${{ format('{0}', env.NPM_PKG_VERSION) }}
          override-tag: ${{ format('v{0}', env.NPM_PKG_VERSION) }}
          search-tags: ${{ steps.search-tags.outputs.result }}
